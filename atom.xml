<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sergiojune | 梦开始的地方</title>
  
  <subtitle>路在，人就在</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sergiojune.com/"/>
  <updated>2019-03-23T23:46:18.174Z</updated>
  <id>http://sergiojune.com/</id>
  
  <author>
    <name>sergiojune</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode_two-sum-1</title>
    <link href="http://sergiojune.com/2019/03/24/two_sum_1/"/>
    <id>http://sergiojune.com/2019/03/24/two_sum_1/</id>
    <published>2019-03-23T23:45:06.811Z</published>
    <updated>2019-03-23T23:46:18.174Z</updated>
    
    <content type="html"><![CDATA[<p>今天第一天开始刷leetcode，加油<br>题号：1<br>题目描述：</p><blockquote><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p></blockquote><blockquote><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p></blockquote><p>例子:</p><blockquote><p>Given nums = [2, 7, 11, 15], target = 9,</p></blockquote><blockquote><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p></blockquote><p>我的做法：无脑循环两次列表找到两个相加值等于需要找的值，简单暴力<br>时间复杂度：O(n^2)<br>空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(x + <span class="number">1</span>,len(nums)):</span><br><span class="line">                <span class="keyword">if</span>  nums[x] + nums[y] == target:</span><br><span class="line">                    <span class="keyword">return</span> [x, y]</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>运行的结果，实在太慢了，都至少4秒多。<br><img src="https://user-gold-cdn.xitu.io/2019/3/24/169acdb030054253?w=922&amp;h=529&amp;f=png&amp;s=44302" alt=""></p><p>再来看看大佬们的做法：<br>用一个字典保存数组中与目标相差的值，键就是这个相差的值，而值就是这个在数组中的位置。<br>当在字典中能存在这个与目标相差的值的时候即可有结果，就是可以把当前位置和之前那个相差值的坐标返回即可。<br>主要就是寻找与目标值相差得值即可。</p><p>时间复杂度：O(n)，只需要遍历一次列表即可有结果<br>空间复杂度：O(n)，需要额外申请内存保存键值对，最多就是所有元素都保存<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        index_map = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[x] <span class="keyword">in</span> index_map:</span><br><span class="line">                <span class="keyword">return</span> [index_map[nums[x]], x]</span><br><span class="line">            index_map[target-nums[x]] = x</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><p>运行时间，只有64ms，我的与别人相差了一百倍差不多，有点远，哈哈。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/24/169acdd62c986730?w=953&amp;h=133&amp;f=png&amp;s=10824" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天第一天开始刷leetcode，加油&lt;br&gt;题号：1&lt;br&gt;题目描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add
      
    
    </summary>
    
      <category term="算法" scheme="http://sergiojune.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://sergiojune.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>最近的生活状态的复盘</title>
    <link href="http://sergiojune.com/2019/03/24/19-03-04%E5%A4%8D%E7%9B%98/"/>
    <id>http://sergiojune.com/2019/03/24/19-03-04复盘/</id>
    <published>2019-03-23T16:05:57.850Z</published>
    <updated>2019-03-23T16:08:39.895Z</updated>
    
    <content type="html"><![CDATA[<p>开学了差不多一个月了，相比刚开学的时候，这几天的学习热情下降了不少，觉得是时候复盘一波了，不想再和上学期那样，无所事事一天又过去了，毕竟自己要做的事情还有很多很多。所以，随便说下自己最近的生活吧，好让自己尽快恢复下学习热情。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><h4 id="1-早起"><a href="#1-早起" class="headerlink" title="1. 早起"></a>1. 早起</h4><p>从寒假的新年那段时间到今天，也就是3.23，除了有一天需要起床训练而闹钟关了没起来，其余我都是在6点半之前就起来了，最近几天，在起床的时候，总是在挣扎，在想今天都周末了，能不能迟点？能不能今天睡到10点，好在不断地在提醒自己，有一次不执行，就代表着会有下一次，然后就会产生多米诺骨牌效应，然后就继续咬着牙起来了，这个是不错的。然而，今天又想到了自己的在2018年跨年夜时看罗胖节目发的一个朋友圈：<strong>做一个长期主义者，一旦中断，前功尽弃</strong>。<br><img src="https://user-gold-cdn.xitu.io/2019/3/23/169ab16aaa18f4ad?w=1080&amp;h=2248&amp;f=png&amp;s=747648" alt="长期主义者"></p><p>我相信，在以后的每天早上起来的时候，心里都会默念上面这一句话，要坚定地做一名长期主义者。</p><p>其实仔细想了想，很多时候，起床困难的时候，大多数因为自己起来的时候不知道做什么比较好，所以就不想起来，因为觉得没事做，<strong>那以后就这样吧，如果自己没事做的话，那就起来学习算法吧，毕竟这是进大厂必备，我也想成为一个算法大佬。所以，每天起来如果没事做就刷一条 leetcode 的题目。</strong></p><h4 id="2-爬虫"><a href="#2-爬虫" class="headerlink" title="2. 爬虫"></a>2. 爬虫</h4><p>爬虫这个是我一直在学习的方向，虽然自己中间也在尝试转其他方向，但是实在学不下，可能自己太菜了，所以现在还是暂时深入爬虫先。</p><p>最近一直在研究逆向JS，但是这几天竟然感觉有点腻了，因为这些只需要找到加密的地方就可以了，无非就是断点，hook等找加密位置，而由于现在水平有限，等找到了之后就是一顿扣JS，感觉现在做的东西毫无技术水平，小学生都能做，可能我现在接触的深度也不够吧。现在也在怀疑自己是不是真的喜欢爬虫。现在终于感觉到了，某一件自己喜欢的事情做多了，真的会产生厌恶，由此也想到了我的工作是不是也应该会这样，我会不会把工作做了一半就不想做了？我想都是有可能的，毕竟一直在扣代码，自己没有写过任何代码。</p><p><strong>所以，是时候先放下一阵子了，先去学下别的内容，比如多线程爬虫，异步爬虫，分布式等等之类的，破解之类的暂时先不着急。我还要去学习一些加密方法，如果太着急，只能像现在这样扣代码，一点技术长进都没有，所以先放下两周吧。</strong></p><h4 id="3-英语"><a href="#3-英语" class="headerlink" title="3. 英语"></a>3. 英语</h4><p>自己上学期的英语四级没有过，当然这个自己当时也是能想到的，毕竟我英语确实很菜而且差不多一年没学英语了，而上学期也下了决心说这学期要学英语。然而，现在还没有开始动手，现在再不开始动手，就可能又要等到下学期了。</p><p>明天就开始吧，一边学习阅读，一遍学习听力，每天一小时的学习。<br>学习方法：<strong>看一篇四级的英语短文，把不会的英语都记下来，并且在第二天的时候复习一篇这个短文，并尝试翻译下来。听力的话，不管能不能听得懂，至少让自己在扇贝听力在听半个小时，坚持三个月，应该会有成效。</strong></p><h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><h4 id="1-锻炼胸肌和腹肌"><a href="#1-锻炼胸肌和腹肌" class="headerlink" title="1. 锻炼胸肌和腹肌"></a>1. 锻炼胸肌和腹肌</h4><p>这个活动也是自己在寒假的时候开始的，想当时开始的时候，自己在练一次的时候，要休息好几天，因为肌肉太酸痛了，之前因为脚伤一直没运动过。到现在，我已经可以坚持每天都做了，而且在 keep 上 已经有了 1000+ 分钟的锻炼时间，看到这里还是感到很爽的。最爽的还是自己的胸肌和腹肌有了很大的变化，胸肌现在可以看到有轻微的凹凸了，因为自己太瘦了，没办法，只能这样，但是腹肌有了很大变化，坚持下去会继续变大的，又是一件长期需要做的事。</p><p>但是这里也有一个问题，这几天可能自己太累了，也开始有点不想练了，然后在第一天不练的时候，接着第二天也开始不想练，接着就。。。所以有了今天这篇文章，可能自己是太累了，<strong>但是还是得坚持下来，如果不能练太多的话，那就做25个以上得标准俯卧撑吧，这个是在自己很累得情况下，其他情况还得坚持 keep 上面的锻炼。</strong></p><h4 id="2-踢足球"><a href="#2-踢足球" class="headerlink" title="2. 踢足球"></a>2. 踢足球</h4><h6 id="1-伤病"><a href="#1-伤病" class="headerlink" title="1) 伤病"></a>1) 伤病</h6><p>踢足球，这个是高中开始的喜欢的，也很感谢当时高中的伙伴肯带我一起踢足球，肯教我，非常感谢，让我学会了这门运动。</p><p>但是现在我由于自己在高中踢野球的时候，不小心弄伤了脚，自己又懒得理，导致现在每次踢完球的时候都感觉有点痛，现在回想起来很后悔。唉，现在还被人说是玻璃人，特别伤心。<strong>好在今年寒假的时候去看了下，现在感觉还是很良好的，但是连续运动多天还是感觉脚有点问题的，可能是由于自己太久没跑过，还不适应吧。</strong></p><p>从现在起，每天坚持搽药吧，因为我不想被人说是玻璃人。</p><h6 id="2-体能"><a href="#2-体能" class="headerlink" title="2) 体能"></a>2) 体能</h6><p>前面也说了我很长时间没有运动过了，所以导致现在体能特别差，前两天的一场热身赛，自己最多踢了20分钟就主动投降下来了，那时候觉得自己真菜，真丑，<strong>我需要练习体能，今天也在宿舍小跑了一下，从明天开始，我要在下课之后，自己一个人跑去操场加练，练习内容：2圈操场+2个半场足球场的来回跑+2个慢跑快跑，再也不想自己提前下场了</strong></p><h6 id="3-信心"><a href="#3-信心" class="headerlink" title="3) 信心"></a>3) 信心</h6><p>算上高中踢球，我的球龄可以说有了<strong>4年</strong>了，这么长时间，如果说正常人学的话，可能技术都很好了，但是我的还是很菜，还是看不懂球，过不了人，没信心，但是技术还是有一点的,但是除了这一点，其他都是渣。</p><p>这个是我在前天热身赛的第一次笔记，以后每一次踢比赛自己都看一次，而且也总结一次。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/23/169ab46966a215be?w=941&amp;h=524&amp;f=png&amp;s=82296" alt="足球总结"></p><p>太多问题了，这一切都归根于自己没有信心，无论什么时候都是，踢个野球都不敢过人。<br>想了想，我自己在做很多事都是没有信心，上讲台没有信心，泡妞没有信心，写代码没有信心，写文章没有信心等等，这些都让我失去了很多，而且自己一直都没有改，从现在开始，是时候需要做出改变了，<strong>做这些事之前，先想象自己很厉害，甚至可以膨胀的那种，管不了那么多，让自己先有信心再说，怎样才能有，会是我接下来探索学习的地方</strong></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>第一次写，写得很乱，没事，我得有信心，这写得特别好，哈哈，下一次我还会继续写。</p><p>这段时间每天必看文章！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开学了差不多一个月了，相比刚开学的时候，这几天的学习热情下降了不少，觉得是时候复盘一波了，不想再和上学期那样，无所事事一天又过去了，毕竟自己要做的事情还有很多很多。所以，随便说下自己最近的生活吧，好让自己尽快恢复下学习热情。&lt;/p&gt;
&lt;h3 id=&quot;学习&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="复盘" scheme="http://sergiojune.com/categories/%E5%A4%8D%E7%9B%98/"/>
    
    
      <category term="复盘" scheme="http://sergiojune.com/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>请求网页时，怎么给我返回了一段 JavaScript 代码</title>
    <link href="http://sergiojune.com/2019/03/19/%E8%AF%B7%E6%B1%82%E7%BD%91%E9%A1%B5%E6%97%B6%EF%BC%8C%E6%80%8E%E4%B9%88%E7%BB%99%E6%88%91%E8%BF%94%E5%9B%9E%E4%BA%86%E4%B8%80%E6%AE%B5%20JavaScript%20%E4%BB%A3%E7%A0%81/"/>
    <id>http://sergiojune.com/2019/03/19/请求网页时，怎么给我返回了一段 JavaScript 代码/</id>
    <published>2019-03-19T07:41:42.593Z</published>
    <updated>2019-03-19T08:08:09.400Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家带来的是一个论坛网站，牛仔俱乐部-努比亚社区，</p><p>网址为：<strong><a href="https://bbs.nubia.cn/" target="_blank" rel="noopener">https://bbs.nubia.cn/</a></strong></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c56e7bdfc93905e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果你想要获取这个网站的源代码的话，必须要先获取一个 cookie，其字段名为：<strong>acw_sc__v2</strong>，你是不是不相信？爬取网站还需要获取 cookie 值才可以？说实话，我刚开始爬的时候我也不相信，直到我运行请求代码，一看，给我返回这个：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5dae7e236a22da18?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这是什么啊，一段 JavaScript 代码，很容易地就可以看到下面有个 setCookie 的方法，这不就是我刚才说的需要获取的 cookie 的字段吗？如果你看到这，留下了没技术的眼泪的话？别怕，我劝你擦干眼泪，继续看下去，你会发现新大陆！</p><p>我们首先在 chrome 看看这里网站的请求先，打开 chrome，打开开发者工具，输入网址：<a href="https://bbs.nubia.cn/(需要先清除cookie)，你可以看到下面这个东西：" target="_blank" rel="noopener">https://bbs.nubia.cn/(需要先清除cookie)，你可以看到下面这个东西：</a></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-aa2e4c81716c31d0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>是不是呆住了？这是debug，明明什么都没按啊，如果你按跳出这个函数的话，可以暂时跳出，不过等到运行多几行代码的话，他会运行到一个无限执行 debug 的函数，让你永无翻身之日，一直在 debug 转动。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-503311680e639ee8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>那怎么办？莫慌，其实这里运行代码就是我们在上面第一次请求这个网站给我们返回的 JavaScript 代码，那么我们可以把刚才响应回来的代码复制出来，写成 html 文件，使用 chrome 浏览器打开。</p><p>如果你把 那段代码展开的话，打开的时候就会无限进行刷新，直到浏览器崩溃。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-79e0b8561463ffbc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这里是代码在执行过程中使用正则检测你把代码展开了，所以就会无限进行刷新，这叫做<strong>内存爆破</strong>，是不是又 get 新知识？</p><p>所以我们直接原样复制进去，在打开 chrome 进行调试。</p><p>但是，当我们一打开 开发者工具，还是会立刻弹出 debug 页面</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3487a7c59fb58752?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这又是为什么呢？我们根据右边的调用栈看看是怎样执行的，查看调用栈，可以看到这个函数：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3fcb492efb5915e4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果你是学习过 JavaScript 的话，很容易就知道 <strong>setInterval 是个设置每隔一段时间就执行相应操作的函数</strong>。所以他这里每隔一段时间就会执行函数，<strong>用于检测用户有没有打开开发者工具</strong>，这个太猛了，具体原理我现在还不知道，如果你知道的不防在下面留言分享给大家。</p><p>知道了，之后，我们直接在原文件找到这个定时设置语句给删除就可以了。删除了之后，还是会执行这个 debug 语句，我们继续把这个执行给删除。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-efb6e68b9ad7daea?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>现在就不会出现 debug 了，但是有一个新的问题，出现，页面会不断刷新，也是一个定时操作，这时该怎么办呢？因为是一个刷新操作，每次刷新必然会执行里面的 JavaScript 代码，所以不妨随便打个断点，看看调用栈，这里我比较有经验，所以就在这里打了个断点</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e745f7d4707d03f9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>因为这个 <strong>relaod 函数就是一个刷新页面的函数</strong>，所以直接在这里点击，可以肯定这个函数会被执行，如果你打的断点没有被执行，可以多打几个断点，总会被执行的，这个不需要担心。</p><p>当断点被执行到时，你就可以查看右边的调用栈了，很容易就找到这个地方</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ce7c5f763b6b3741?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-65f7ec89c0a69967?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>这个 setTimeout 也是一个定时执行，不过他只执行一次，相当于定时炸弹。又因为每次都会 reload，所以这个炸弹在每次刷新的时候就会继续新的炸弹，才会有刚才的不断刷</strong>新，了解了原理之后，那么我们就把这个 setTimeout 给删除即可。</p><p>这时候，再次刷新网页，就什么阻力都没有了，是不是感觉来到这一步不容易？哈哈，爬虫就是这样，与反爬死坑到底，不服就干，看谁更有耐心。</p><p>这时候终于可以开始我们的调试之旅了，因为知道这个 JavaScript 执行之后会返回一个 cookie 值，所以<strong>接下来就是寻找生成的位置，如果你熟练的话，可以利用二分法来找，具体怎样找自己探索</strong>，因为我也不是很熟练。如果你不熟练的话，可以学我一样，因为代码就几百行，可以直接从第一行开始找。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f9667a4144e2ed46?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果你认真找，不用多久，很快就可以发现这个，这个 arg2 就是我们需要找的 cookie 的值，所以接下来可以在这里打断点，看看具体的执行步骤。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-b4a316aff3dd051e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到，通过传一参数，使用这个函数就可以完成加密了，根据这个函数的函数名是 hexXor,可以知道是一个 Xor 加密，想知道原理的可以看看这篇文章：<a href="http://www.ruanyifeng.com/blog/2017/05/xor.html，我们也可以根据" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/05/xor.html，我们也可以根据</a> JavaScript 代码直接转成 python 代码也可以，不难。</p><p>通过调试发现，这里面需要两个参数，一个是加密的信息，一个是key</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-752e3388f8351ae8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-6de2a2d4cfd80374?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>加密的信息是在很容易就发现，是从这里生成的</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ac59698967060c0c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>所以也可以在这里打断点，再刷新一下，就可以看到加密信息是由这个函数生成的。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-535008087de4b9c6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这里的 JavaScript 代码也很容易，也可以直接翻译成 python 代码。而其参数需要的是 arg1，这个变量在代码第一行就声明了，所以在获取的时候，可以使用正则获取。</p><p>接着就是 key 的获取了。直接搜索这个 key 的变量，很容易就找到这个</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f128f4268c70dfca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4025cfdbaa509fef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>加密函数很长，但是也是可以自己转 python的，难度也不大。</p><p>在经过我多次测试之后，发现这个 key 是固定的，所以无需自己实现这个函数，可以直接取这个值即可。</p><p>现在大功告成，已经可以获得所需要的 cookie 值了，是不是觉得非常不可思议，一路走过来都不容易。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-a7af732a95c76b6b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>不过这里有个 bug，就是有时还是获取到 JavaScript 代码，但是多运行几次还是可以正常获取到 html 源码的，由于自己只是获取这个值而已，能成功即可，所以没有研究下去，如果你知道原因，也可以在留言区告诉我。</p><p><strong>最后总结下遇到各种挑战：</strong></p><ol><li><p>代码展开会无限刷新，内存爆破，如果你认真自己调试的话，会发现里面有几个正则，有些是用来匹配函数的，用于判断有没有展开代码的，展开了就代表有人想搞代码了，所以就会无限刷新。</p></li><li><p>设置定时与刷新网页，使网页无限刷新。这个对我们来说调试问题不大，毕竟每次刷新我们都可以断点调试代码</p></li><li><p>设置定时检测有没有打开开发者工具，这个才是最厉害的，检测到的话就胡无限 debug。</p></li></ol><p>最后就没有啦，如果你需要源码的话，可以在我的 GitHub 上获取，地址为：<strong><a href="https://github.com/SergioJune/Spider-Crack-JS/tree/master/nubiya_bbs" target="_blank" rel="noopener">https://github.com/SergioJune/Spider-Crack-JS/tree/master/nubiya_bbs</a></strong></p><p><strong>如果对你有用的话，还请给个star，我会一直更新下去，你有什么需要破解的网站也可以提issue</strong>。</p><p>目前还更新了拼多多的搜索参数 <strong>anti_content</strong> 和另一个更加厉害的 cookie 反爬，也是属于这个 <strong>Incapsula-CDN</strong> 的，难度比今天这个难上不少，由于个人问题，暂时只能每周讲解一个，请谅解。</p><p>原创不易，希望能给个赞，给个star，支持下继续写下去。</p><blockquote><p>本文仅用于交流学习，请勿用于非法用途，后果自负！</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/6474572-08d76c3a554dbc81?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天给大家带来的是一个论坛网站，牛仔俱乐部-努比亚社区，&lt;/p&gt;
&lt;p&gt;网址为：&lt;strong&gt;&lt;a href=&quot;https://bbs.nubia.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bbs.nubia.cn/&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="爆破JS" scheme="http://sergiojune.com/categories/%E7%88%86%E7%A0%B4JS/"/>
    
    
      <category term="cookie反爬" scheme="http://sergiojune.com/tags/cookie%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>python运行execjs中出现编码问题</title>
    <link href="http://sergiojune.com/2019/03/12/python%E8%BF%90%E8%A1%8Cexecjs%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://sergiojune.com/2019/03/12/python运行execjs中出现编码问题/</id>
    <published>2019-03-12T08:34:02.821Z</published>
    <updated>2019-03-12T08:37:16.495Z</updated>
    
    <content type="html"><![CDATA[<p>在破解豆瓣的window.<strong>DATA</strong>时，使用python的execjs执行js，会有这个错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Exception <span class="keyword">in</span> thread Thread<span class="number">-1</span>:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"E:\codes\python\lib\threading.py"</span>, line <span class="number">917</span>, <span class="keyword">in</span> _bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File <span class="string">"E:\codes\python\lib\threading.py"</span>, line <span class="number">865</span>, <span class="keyword">in</span> run</span><br><span class="line">    self._target(*self._args, **self._kwargs)</span><br><span class="line">  File <span class="string">"E:\codes\python\lib\subprocess.py"</span>, line <span class="number">1238</span>, <span class="keyword">in</span> _readerthread</span><br><span class="line">    buffer.append(fh.read())</span><br><span class="line">UnicodeDecodeError: <span class="string">'gbk'</span> codec can<span class="string">'t decode byte 0x80 in position 41: illegal multibyte sequence</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "E:/Python/python_project/decrypt_js/douban.py", line 13, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    data = ctx.call('</span>decrypt<span class="string">', r)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_abstract_runtime_context.py", line 37, in call</span></span><br><span class="line"><span class="string">    return self._call(name, *args)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_external_runtime.py", line 92, in _call</span></span><br><span class="line"><span class="string">    return self._eval("&#123;identifier&#125;.apply(this, &#123;args&#125;)".format(identifier=identifier, args=args))</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_external_runtime.py", line 78, in _eval</span></span><br><span class="line"><span class="string">    return self.exec_(code)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_abstract_runtime_context.py", line 18, in exec_</span></span><br><span class="line"><span class="string">    return self._exec_(source)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_external_runtime.py", line 87, in _exec_</span></span><br><span class="line"><span class="string">    output = self._exec_with_pipe(source)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\site-packages\execjs\_external_runtime.py", line 103, in _exec_with_pipe</span></span><br><span class="line"><span class="string">    stdoutdata, stderrdata = p.communicate(input=input)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\subprocess.py", line 939, in communicate</span></span><br><span class="line"><span class="string">    stdout, stderr = self._communicate(input, endtime, timeout)</span></span><br><span class="line"><span class="string">  File "E:\codes\python\lib\subprocess.py", line 1288, in _communicate</span></span><br><span class="line"><span class="string">    stdout = stdout[0]</span></span><br><span class="line"><span class="string">IndexError: list index out of range</span></span><br></pre></td></tr></table></figure></p><p>原因是有一个程序在使用TextIOWrapper 类创建对象时默认使用了cp936的编码，也就是gbk编码，读取不了utf-8的字符，<br>所以我们可以修改下 subprocess.py 文件的默认编码方式为utf-8即可</p><p>在代码行656有个初始化，直接修改默认即可，如下<br><img src="https://upload-images.jianshu.io/upload_images/6474572-248002fb299bbab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>修改完再运行代码，结果就出来了，没有报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在破解豆瓣的window.&lt;strong&gt;DATA&lt;/strong&gt;时，使用python的execjs执行js，会有这个错误：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="execjs" scheme="http://sergiojune.com/categories/execjs/"/>
    
    
      <category term="编码" scheme="http://sergiojune.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣读书搜索页的window.__DATA__的解密</title>
    <link href="http://sergiojune.com/2019/03/12/%E8%B1%86%E7%93%A3%E8%AF%BB%E4%B9%A6%E6%90%9C%E7%B4%A2%E9%A1%B5%E7%9A%84window.__DATA__%E7%9A%84%E8%A7%A3%E5%AF%86/"/>
    <id>http://sergiojune.com/2019/03/12/豆瓣读书搜索页的window.__DATA__的解密/</id>
    <published>2019-03-12T08:30:47.917Z</published>
    <updated>2019-03-12T08:33:28.854Z</updated>
    
    <content type="html"><![CDATA[<p>上次发了破解知乎模拟登陆的最新版之后，很多人看了都说好，唯独没人给我点赞，以后还是麻烦大家，如果看到对你有用的文章，可以点点赞，支持下作者哈。</p><p>还有，知乎模拟登陆的代码已给出，github地址为：<strong><a href="https://github.com/SergioJune/Spider-Crack-JS" target="_blank" rel="noopener">https://github.com/SergioJune/Spider-Crack-JS</a></strong></p><p>希望各位大佬给点个<strong>star</strong>哈，以后会持续更新，将我的每个破解的网站源码都放上去，如果你也有什么解不开的网站，欢迎去提issue，我会尽我能力去破解，后分享给大家。</p><p>这次给大家分享的是豆瓣的读书搜索页</p><blockquote><p><a href="https://book.douban.com/subject_search?search_text=%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84&amp;cat=1001" target="_blank" rel="noopener">https://book.douban.com/subject_search?search_text=%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84&amp;cat=1001</a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/6474572-256bebad7971973c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>以前还以为豆瓣只是给新手爬虫练手的，直到我发现了这个页面，才发现是我错了，原来豆瓣也有加密的，有可能是为了防止新手乱爬吧，一看到这个就觉得爬虫越来越不好做了，随便一个页面都有 js 加密。</p><p>而且我觉得比上次的知乎的还难点，但是可能就只有搜索页是加密的，其他的直接找全部图书的都是直接放在html源码的。</p><p>废话不多说，生死看淡，不服就干！！！开始分析。</p><h2 id="1-寻找搜索内容"><a href="#1-寻找搜索内容" class="headerlink" title="1. 寻找搜索内容"></a>1. 寻找搜索内容</h2><p>这个图书数据是直接加密的，隐藏在了html页面，如果你需要找的话，估计还得找很长时间，我是从一位大佬告诉我的，就在下面这个页面的 window.<strong>DATA</strong> 里面</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c46e7b23d77d4067?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>不过如果需要自己找的话，还是可以的，需要点时间，自己细心点找，对于这个有经验了，以后遇到那些找不到数据的都可以尝试在本页面的html里面找。</p><h2 id="2-找解密位置"><a href="#2-找解密位置" class="headerlink" title="2. 找解密位置"></a>2. 找解密位置</h2><p>直接搜 window.<strong>DATA</strong> 即可</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-fba9cbbc15cae8ae?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>上面的就是html内容，所以是下面一个，或者你不信的话可以自己尝试下。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-2670b3a9b689637c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>打断点，一看，果不其然，数据都出来了</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-69d043bd51fda616?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>接着就是自己慢慢调试了，点击下一步自己慢慢调试，看看用到的方法</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-89dac147b8d8736d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>走了几步会很容易发现这个，这个就可以说是上面那个方法的解密步骤了</p><p>接下来就是自己看这些 JS 的内容了，不算难，如果你厉害的话，能看出他加密使用的方法的话，你可以直接使用 Python 语言的相关加密方法，如果看不懂，你就需要自己扣出相关的 JS 了，</p><p>如果你初学 JS 的话，学过了 JS 原型的属性，那么非常推荐你解一下，因为这里的 JS 分布在两个文件内，不像上次知乎那样直接一段函数就解决了那么简单，并且扣出来了还需要自己改下函数之间或者对象之间的原型，总之很复杂，这个只能意会不能言传，篇幅有限，也不可能全部一个一个扣出来并和你说怎么改。</p><p>还是得自己实践一次才能感受到，我最后花了几天时间，扣出了1500+行代码</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-521e05e6aee50c18?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="3-用Python运行"><a href="#3-用Python运行" class="headerlink" title="3. 用Python运行"></a>3. 用Python运行</h2><p>这里扣出了 JS 使用 python 的 execjs 执行，会出现一个问题</p><blockquote><p>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x80 in position 41: illegal multibyte sequence</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/6474572-23b1a6ab002819a0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这里是因为里面使用了一个 TextIOWrapper 对象，里面没有指定编码类型，使用了默认的 cp936 也就是 gbk 编码，使读取字符出错，我们可以在这个类上面初始化改下编码类型为 utf-8 即可运行</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f8c31822dd61c776?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>再次运行，即可成功。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5fc6260c6deddcb4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="4-写在最后"><a href="#4-写在最后" class="headerlink" title="4. 写在最后"></a>4. 写在最后</h2><p>这个豆瓣解密可以说不难，也可以说有点难，因为需要扣很多 JS ，如果你能看懂他相关的解密方法就不需要扣，就会很容易了。如果逆向深入研究逆行 JS 的话，还是建议你自己动手撸一遍，</p><p>最后，想要源码地址为 <a href="https://github.com/SergioJune/Spider-Crack-JS/tree/master/douban，对你有用的话请给个star，谢谢。" target="_blank" rel="noopener">https://github.com/SergioJune/Spider-Crack-JS/tree/master/douban，对你有用的话请给个star，谢谢。</a></p><p><strong>如果文章对你有用的话就点个赞吧！</strong></p><blockquote><p><strong>本文仅用于交流学习，请勿用于非法用途，后果自负！</strong></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/6474572-05ea86ee37163ae9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次发了破解知乎模拟登陆的最新版之后，很多人看了都说好，唯独没人给我点赞，以后还是麻烦大家，如果看到对你有用的文章，可以点点赞，支持下作者哈。&lt;/p&gt;
&lt;p&gt;还有，知乎模拟登陆的代码已给出，github地址为：&lt;strong&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="爆破JS" scheme="http://sergiojune.com/categories/%E7%88%86%E7%A0%B4JS/"/>
    
    
      <category term="豆瓣解密" scheme="http://sergiojune.com/tags/%E8%B1%86%E7%93%A3%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>deactivate不是内部命令</title>
    <link href="http://sergiojune.com/2019/03/02/deactivate%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sergiojune.com/2019/03/02/deactivate不是内部命令/</id>
    <published>2019-03-02T07:55:07.666Z</published>
    <updated>2019-03-02T07:56:01.956Z</updated>
    
    <content type="html"><![CDATA[<p>deactivate不是内部命令原因是<strong>原来在已创建的虚拟环境后，卸载了 Python 重新安装 Python 来直接移动已创建的虚拟环境就会出现这个问题</strong>，激活环境是没有问题的，但是退出环境就出错了，把这个环境删除再重新创建即可。</p><p>这个还会出现的问题就是，<strong>你在虚拟环境安装的库，在本地环境也存在，就是说你的虚拟环境是无效的</strong>，所以说不要直接移动虚拟环境，需要移动就先删除再创建即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;deactivate不是内部命令原因是&lt;strong&gt;原来在已创建的虚拟环境后，卸载了 Python 重新安装 Python 来直接移动已创建的虚拟环境就会出现这个问题&lt;/strong&gt;，激活环境是没有问题的，但是退出环境就出错了，把这个环境删除再重新创建即可。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="virtualenv" scheme="http://sergiojune.com/categories/virtualenv/"/>
    
    
      <category term="deactivate" scheme="http://sergiojune.com/tags/deactivate/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 重定向</title>
    <link href="http://sergiojune.com/2019/03/02/scrapy%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://sergiojune.com/2019/03/02/scrapy重定向/</id>
    <published>2019-03-02T07:54:20.011Z</published>
    <updated>2019-03-02T07:56:32.612Z</updated>
    
    <content type="html"><![CDATA[<p>scrapy可以支持重定向，有以下方法：</p><ol><li>在请求时带上meta<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrapy.Request(self.start_urls[<span class="number">0</span>], headers=self.headers, meta=&#123;</span><br><span class="line">            <span class="string">'dont_redirect'</span>: <span class="keyword">True</span>,  <span class="comment"># 这个和下面的是处理重定向的</span></span><br><span class="line">            <span class="string">'handle_httpstatus_list'</span>: [<span class="number">301</span>]  <span class="comment"># 这个列表为阻止重定向的请求码</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;scrapy可以支持重定向，有以下方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在请求时带上meta&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
      <category term="scrapy" scheme="http://sergiojune.com/categories/scrapy/"/>
    
    
      <category term="重定向" scheme="http://sergiojune.com/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>教你如何将自己的脚本代码放到服务器上运行</title>
    <link href="http://sergiojune.com/2019/03/02/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81%E6%94%BE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%BF%90%E8%A1%8C/"/>
    <id>http://sergiojune.com/2019/03/02/教你如何将自己的脚本代码放到服务器上运行/</id>
    <published>2019-03-02T07:52:31.160Z</published>
    <updated>2019-03-02T07:53:56.874Z</updated>
    
    <content type="html"><![CDATA[<p>上次弄了个机器人，反响挺不错的，我也挺满意的，因为这个我也初步了解了服务器这个东西，懂得了如何将自己的脚本代码放到服务器上运行了，妈妈再也不怕我每天都得开着电脑才能运行脚本了，不过说实话，这个服务器真贵，不过有阿里云学生机，想尝试了解下的可以去试试，非常建议去折腾下，可以学到的东西很多。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d55279677a6f?w=675&amp;h=671&amp;f=jpeg&amp;s=42484" alt=""></p><p>如果你还没有了解我的机器人，可以看看<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247484797&amp;idx=1&amp;sn=e3c7cdfd3955724bdc86b15df3ec4a9c&amp;chksm=fb4a7fd1cc3df6c7f3ff007b785669a79153cff97c766f2379e781408e0180c7d08f6da77dbf&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">为了你们，我用一天时间做了一个机器人！</a>，也欢迎大家加我进群哈，大家一起交流学习！</p><p>当时为了将代码放到服务器上运行，也花了很多时间，所以避免还有不会的小白同学，记录下此过程，让他们少走点坑。</p><h2 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h2><p>如果你是学生的话，想折腾的可以去阿里云那里购买，因为有学生机优惠，只需要9.9一个月，但是只能购买一次，在下一次购买需要做任务才可以继续享用学生机优惠。如果你是土豪的话，可以直接忽略这个。</p><p>因为这次我只需要把机器人脚本运行就可以了，所以直接选择学生机的配置就够用了。</p><p>阿里云的学生机购买链接：<a href="https://promotion.aliyun.com/ntms/act/campus2018.html?spm=5176.10695662.1244717.1.605c4804V5gfhs" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/act/campus2018.html?spm=5176.10695662.1244717.1.605c4804V5gfhs</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552799c462b?w=1080&amp;h=492&amp;f=jpeg&amp;s=43057" alt=""></p><p>点击购买即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d55279ff8ed1?w=1080&amp;h=663&amp;f=jpeg&amp;s=42501" alt=""></p><p>这个密码是你登陆上服务器的密码，需要记住，登陆用户名就是 root。</p><p>接下来就是扫码支付了。</p><p>购买了点击阿里云控制台，点击云服务器ECS，就可以看到你刚才购买的服务器了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5527afdb255?w=1080&amp;h=571&amp;f=jpeg&amp;s=50332" alt=""></p><p>再点击下面的云服务器，你就可以看到这个服务器的相关配置了</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5527b2cb1e0?w=1080&amp;h=291&amp;f=jpeg&amp;s=31881" alt=""></p><p>连接服务器可以在这个页面的右边的远程连接进行连接，这个第一次点进去会有个远程连接密码，需要记住，因为每次在这里进行远程连接的时候都需要填入这个密码。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5527b40306a?w=832&amp;h=312&amp;f=png&amp;s=10896" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5529a1ad406?w=1080&amp;h=535&amp;f=jpeg&amp;s=27195" alt=""></p><p>连接成功就会显示一个黑色框，这里连接服务器虽然可以，但是不太方便，这里推荐大家一个在 window 的免费 ssh 连接工具 putty</p><h2 id="2-在服务器上配置-Python-环境"><a href="#2-在服务器上配置-Python-环境" class="headerlink" title="2. 在服务器上配置 Python 环境"></a>2. 在服务器上配置 Python 环境</h2><p>需要在服务器上运行 Python 脚本 ，就必须要在服务器上有 Python 的环境，在阿里云购买的学生机默认就装有 Python 的，不过版本是 2.7.5。这里我们重新安装 Python3，是这个服务器上可以多个版本共存。</p><p>先在 putty 上连接我们的服务器。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5529ecd69e9?w=618&amp;h=551&amp;f=jpeg&amp;s=58530" alt=""></p><p>上面的 ip 地址就是我们购买的服务器的共有ip地址，使用 ssh连接就行了。不过还得设置一个东西，不设置的话，如果超过一段时间不动终端的话，就会自动断开，又得重新连接。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552a58facbc?w=618&amp;h=551&amp;f=jpeg&amp;s=58839" alt=""></p><p>这里设置成 60 秒就可以了，原理我现在不太记得了，如果有读者知道的话，可以在留言区说下。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552a5f3f4f4?w=841&amp;h=529&amp;f=png&amp;s=24165" alt=""></p><p>点击 open，然后填写用户名 root 和自己之前设置的密码即可登陆成功，如上图。</p><p>接下来就是开始安装我们的 Python3 环境了。</p><p>先查看下 centos 服务器的已安装的 Python 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552ace4542a?w=593&amp;h=56&amp;f=png&amp;s=2652" alt=""></p><p>我这里是 3.6.8 版本，因为我重新配置了，如果你第一次使用，这个结果是 python 2.7.5</p><p>查看 python 可执行文件的路径</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552c01ca0f4?w=549&amp;h=50&amp;f=png&amp;s=2016" alt=""></p><p>可以看到所在的目录，进入这个 bin 目录，并查看 python 文件</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552c1121f03?w=778&amp;h=168&amp;f=png&amp;s=8064" alt=""></p><p>可以看到我这里的 python 指向了 python3 这个文件，但是你们第一次的会指向 python2.7 这个文件，接下来就是将 python 这个软连接指向 python3 就行了。如果怕弄坏的，想备份原来 python2 的文件可以执行 mv python2.7 python.bak 就可以将文件备份到当前目录了。</p><h3 id="1）先安装相关包"><a href="#1）先安装相关包" class="headerlink" title="1）先安装相关包"></a>1）先安装相关包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552c8448f02?w=825&amp;h=521&amp;f=jpeg&amp;s=102042" alt=""></p><p>需要需要确认时直接输入 y 即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552ce38e82b?w=825&amp;h=521&amp;f=jpeg&amp;s=98975" alt=""></p><h3 id="2）下载-python-3-6-8-源码包"><a href="#2）下载-python-3-6-8-源码包" class="headerlink" title="2）下载 python 3.6.8 源码包"></a>2）下载 python 3.6.8 源码包</h3><p>如果觉得下载网速有点慢的话，可以更换阿里云源，可以参考这个连接：<a href="https://blog.csdn.net/qq_37274323/article/details/81107958" target="_blank" rel="noopener">https://blog.csdn.net/qq_37274323/article/details/81107958</a></p><p>下载 python 3.6.8 包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552dfd5134b?w=798&amp;h=228&amp;f=png&amp;s=8933" alt=""></p><p>解压 python 3.6.8 源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf Python-3.6.8.tar.xz -C /usr/local/src/</span><br></pre></td></tr></table></figure><p>这个是将 python 源码包解压到文件夹 /usr/local/src 内，这里你也可以自己指定解压目录，你自己记得解压位置即可。</p><p>安装 python3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3</span><br></pre></td></tr></table></figure><p>这里的地址需要指定为自己的 python 源码包解压地址。</p><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>这时候可以说安装 python3 成功了，我们可以使用这个命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/python3/bin/pip3 list</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552e1f74eb9?w=1006&amp;h=134&amp;f=jpeg&amp;s=13914" alt="">  </p><p>更新 pip 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/python3/bin/pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p>也可以查看一下是否更新成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/python3/bin/pip3 list</span><br></pre></td></tr></table></figure><h3 id="3）建立软连接"><a href="#3）建立软连接" class="headerlink" title="3）建立软连接"></a>3）建立软连接</h3><p>现在就是需要将 python3 这个文件建立软连接，使 python 指向 python3 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>执行之后查看 python 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552f2a662c4?w=557&amp;h=54&amp;f=png&amp;s=1981" alt=""></p><p>成功之后就会看到 python 指向了 python 3.6.8 版本，如果出错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: python: command not found...</span><br></pre></td></tr></table></figure><p>这个是你建立软连出问题了，可能指定的 python3 安装路径不正确，这时候将 python 这个软连接删除重新创建即可。  </p><p>你可以进入 。/usr/bin 目录，查看是否创建软连接成功</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552f82e4edc?w=554&amp;h=58&amp;f=png&amp;s=2008" alt=""></p><p>若找到 python 这个指向为红色显示的，证明创建错误了，python3 的地址错误了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d552fe901a58?w=1080&amp;h=159&amp;f=png&amp;s=69446" alt=""></p><p>这时就删除这个 python 软连接</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d55305e0e71b?w=688&amp;h=135&amp;f=png&amp;s=4782" alt=""></p><p>再重新创建 python 软连接即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>这前面的地址就是 python3 的安装路径，就是有 python3 这个文件的目录。</p><h3 id="4）修改-yum-配置"><a href="#4）修改-yum-配置" class="headerlink" title="4）修改 yum 配置"></a>4）修改 yum 配置</h3><p>因为 yum 原来是使用 python2 的，改了 python3 之后可能会出错，所以需要重新配置。</p><p>修改 yum 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p>把文件头部的#!/usr/bin/python改成#!/usr/bin/python2.7保存，然后按esc，输入 :wq 退出即可</p><p>修改 urlgrabber-ext-down 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure><p>第一行改为#!/usr/bin/python2.7，然后按esc，输入 :wq 退出即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5530f0c5f7e?w=618&amp;h=90&amp;f=png&amp;s=2410" alt=""></p><p>现在就完成了 python 环境的配置了。</p><h2 id="3-下载相关库"><a href="#3-下载相关库" class="headerlink" title="3. 下载相关库"></a>3. 下载相关库</h2><p>为了方便管理，我这里使用了虚拟环境，防止每个脚本运行时所需要的库进行冲突，如果你暂时没有想那么复杂，只是想运行一次脚本而已，也可以不必要使用虚拟环境，不过还是建议使用虚拟环境的，毕竟始终都需要用到的。</p><h3 id="1）下载-virtualenv-库"><a href="#1）下载-virtualenv-库" class="headerlink" title="1）下载 virtualenv 库"></a>1）下载 virtualenv 库</h3><p>这个是创建 虚拟环境使用的库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><p>注意：这里使用的是 pip3，若是直接使用 pip 则对应的是 python2 版本的。</p><h3 id="2）下载-virtualenvwrapper-win-库"><a href="#2）下载-virtualenvwrapper-win-库" class="headerlink" title="2）下载 virtualenvwrapper-win 库"></a>2）下载 virtualenvwrapper-win 库</h3><p>这个库是为了方便管理虚拟环境使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>下载完了还需要配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在末尾添加上这两句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export WORK_HOME=$HOME/.virtualenvssource /usr/local/python3/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>第一句是固定的，第二句为指定 virtualenvwrapper 安装的路径</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5531dc61ddf?w=841&amp;h=529&amp;f=png&amp;s=27823" alt=""></p><p>激活配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5531e4317a4?w=807&amp;h=289&amp;f=jpeg&amp;s=84804" alt=""></p><p>然后进入你想创建虚拟环境的路径，输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv py3_test</span><br></pre></td></tr></table></figure><p>创建成功之后会自动进入该虚拟环境</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d55325690315?w=832&amp;h=387&amp;f=jpeg&amp;s=78100" alt=""></p><p>但是这里默认使用的是 python2 版本指定的虚拟环境，需要使用 python3 版本可以指定版本创建</p><p>指定 python 版本创建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv py3 --python=python</span><br></pre></td></tr></table></figure><p>上面使用 –python 参数来指定 python 版本，因为 python 这个文件是指向 python3 的，所以可以这样使用，当然你也可以填上你 python3 版本的位置，这时虚拟环境的 python 版本就是 3 了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5532a60026f?w=838&amp;h=343&amp;f=jpeg&amp;s=75194" alt=""></p><h2 id="3-下载机器人相关库"><a href="#3-下载机器人相关库" class="headerlink" title="3. 下载机器人相关库"></a>3. 下载机器人相关库</h2><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d553360725bf?w=396&amp;h=133&amp;f=png&amp;s=1876" alt=""></p><p>这里就是在虚拟环境中使用 pip3 安装 itchat 和 requests 库(用于爬虫获取早报)即可</p><h3 id="4-上传脚本到服务器"><a href="#4-上传脚本到服务器" class="headerlink" title="4. 上传脚本到服务器"></a>4. 上传脚本到服务器</h3><p>由于服务器上原本就带有 ftp 服务器的，所以我们只需要在本地安装个 fileZilla 客户端进行连接即可，自己去官网下载即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5533b00c9a8?w=702&amp;h=655&amp;f=jpeg&amp;s=55962" alt=""></p><p>这里填上自己的服务器 ip 地址和连接账号和密码 ，点击连接即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d55341d414d2?w=1080&amp;h=855&amp;f=jpeg&amp;s=129862" alt=""></p><p>连接成功之后，左边就是我们服务器上面的文件了，右边就是本地文件，右击需要上传的文件选择上传即可。上传成功之后即可在服务器上看到相关文件。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5534abbb776?w=631&amp;h=70&amp;f=png&amp;s=3866" alt=""></p><p>接下来就是运行脚本了。</p><h2 id="5-在服务器上运行脚本"><a href="#5-在服务器上运行脚本" class="headerlink" title="5. 在服务器上运行脚本"></a>5. 在服务器上运行脚本</h2><p>可以直接像在本地一样运行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python robot.py</span><br></pre></td></tr></table></figure><p>这样就可以 运行成功了，但是我们在关闭连接之后，这个脚本就停止了，那岂不是还是需要开着电脑挂机？</p><p>别急，我们可以在后台运行脚本啊，这样即使关闭连接，也一样在运行。使用命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python robot.py</span><br></pre></td></tr></table></figure><p>这时你可以查看进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep python</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d5534b5fa6ef?w=817&amp;h=161&amp;f=png&amp;s=8719" alt=""></p><p>就会看到我们刚才 robot 代码已经运行起来了，这个就是在后台运行，关闭连接之后一样会运行，这下就放心了。</p><p>但是，如果发生错误的话，我们是无法知道哪里出错的，这时我们指定日志输出文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python -u robot.py &gt; robot.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>-u 就是指定实时的日志输出目录，而 &amp; 符号是使程序在后台运行，一边运行还可以一边查看日志输出文件，这里的 robot.log 就是我们的日志输出文件。</p><p>还有一个问题，我想停止机器人怎么办？可以使用这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill PID</span><br></pre></td></tr></table></figure><p>这里 PID 为 linux 系统上的进程号，要想停止哪个后台程序就填上它对应的 PID 即可，查看 PID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep python</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/2/1693d553509275fb?w=768&amp;h=146&amp;f=png&amp;s=7122" alt=""></p><p>箭头所指就是 PID 了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>由于我现在的知识水平有限，暂时只能说明这么多，这些都是我当初在第一次使用时所做的记录，如有错误，还请帮忙指出。同时还参考了几篇文章：</p><ul><li><p><a href="https://www.cnblogs.com/sanduzxcvbnm/p/5984352.html" target="_blank" rel="noopener">https://www.cnblogs.com/sanduzxcvbnm/p/5984352.html</a></p></li><li><p><a href="https://blog.csdn.net/miner_zhu/article/details/81315974" target="_blank" rel="noopener">https://blog.csdn.net/miner_zhu/article/details/81315974</a></p></li><li><p><a href="https://blog.csdn.net/eastmount/article/details/79321822" target="_blank" rel="noopener">https://blog.csdn.net/eastmount/article/details/79321822</a></p></li></ul><p>最后码字不易，如果对你有用的话，分享给你的朋友一起学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次弄了个机器人，反响挺不错的，我也挺满意的，因为这个我也初步了解了服务器这个东西，懂得了如何将自己的脚本代码放到服务器上运行了，妈妈再也不怕我每天都得开着电脑才能运行脚本了，不过说实话，这个服务器真贵，不过有阿里云学生机，想尝试了解下的可以去试试，非常建议去折腾下，可以学
      
    
    </summary>
    
      <category term="服务器" scheme="http://sergiojune.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://sergiojune.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>知乎模拟登陆最新版详解，小白也能看懂</title>
    <link href="http://sergiojune.com/2019/02/22/%E7%9F%A5%E4%B9%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E6%9C%80%E6%96%B0%E7%89%88%E8%AF%A6%E8%A7%A3%EF%BC%8C%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82/"/>
    <id>http://sergiojune.com/2019/02/22/知乎模拟登陆最新版详解，小白也能看懂/</id>
    <published>2019-02-22T02:48:26.744Z</published>
    <updated>2019-03-04T05:57:48.028Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下内容仅交流学习，请勿用于非法用途</strong></p><p>如果你现在想模拟登陆知乎，会发现 fromdata 是一串加密的字符串</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-bec3f49c98f0079d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>看了之后是不是很痛苦？你是不是就想使用 selenium 来模拟登陆？不过好像知乎对 selenium 也进行了相应的反爬处理，哈哈。但是我不也想用 selenium，效率太慢了，直接破解 js 才是我最喜欢挑战的。好，我现在教你如何用 js 硬撸破解,废话不多说，直接进入正题。</p><h2 id="1-找出signature加密"><a href="#1-找出signature加密" class="headerlink" title="1. 找出signature加密"></a>1. 找出signature加密</h2><p>加密位置这个相对来说是比较难找的，需要自己对那些混淆过的 js 进行一遍又一遍的搜寻，有时候你看到头皮发麻也不一定找得到，再加上这个加密参数是一堆字符串，连个键都没有，搜索的条件都没有。这怎么办呢？我们可以去百度或者谷歌看看前人是怎么搞的。</p><p>你直接搜索知乎模拟登陆的话，会发现以前的知乎的 fromdata 是键值形式的，有以下键值对</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e23042075e43d900?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>顺便也可以看看之前的破解思路，看到了上面的 signature 是通过加密来的，猜测知乎应该也是对之前的键值加密的 fromdata 进行加密的，在控制台搜搜 signature 看看有没有线索</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e058534eee75aede?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>提示：按下 ctrl + shift + f 可出现搜索框</p></blockquote><p>一搜，果然有，看了看，signature 的加密过程和以前的还是一样的，证明我的猜想正确了，说明是通过之前的 fromdata 的键值对进行加密成的一堆字符串，现在就看看 signature 是如何加密的。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4bcea4d46111f393?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果你对加密有点了解的话，还容易知道通过上面代码知道，很容易知道是<strong>通过 hmac 加密，哈希算法是 sha1，密钥为 d1b964811afb40118a12068ff74a12f4，加密数据有四个，为 clientId、grantType、timestamp 和 source</strong>，这些值都可以在上面通过调试出来的，就不多说了，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3ddb6bf78db13dd6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="2-找出fromdata的完整键值对"><a href="#2-找出fromdata的完整键值对" class="headerlink" title="2. 找出fromdata的完整键值对"></a>2. 找出fromdata的完整键值对</h2><p>在知道 signature 是如何加密的之后，我们还需要找出完整的 fromdata 先，不过在上面的调试中，你会发现也有几个 fromdata 值，但是不全。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-8eabf2fda11d2a3b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这时候如果我们得继续搜索 signature 的话，找了一整天你都会发现不到什么线索，这时候我们可以通过登陆的 url 进行突破，看看 url 是哪个路径，然后一段搜。</p><p>其登陆url是 <strong><a href="https://www.zhihu.com/api/v3/oauth/sign_in" target="_blank" rel="noopener">https://www.zhihu.com/api/v3/oauth/sign_in</a></strong>。那我们可以直接搜 <strong>sign_in</strong> 试试。搜了发现和上面的 signature 是在同一个 js 文件上的，感觉应该有戏。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-510ce45d2eb49a7f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个和登陆地址完全匹配，应该就是这个了，可以进行调试一波</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-d218c662d8a97a55?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这不出来了，经过多次调试，发现大多数值都是固定的，只有 signature 和 timestamp 不是，其他的就是账号密码之类的，还有个验证码 captcha 以及它的类型 lang，signature 上面的已经找出来了，timestamp 很明显就是时间戳，其他的就不多说了。</p><p>现在的 fromdata 已经全部找出来了，我们离加密字符串又近了一步，如果你直接用这个表单进行模拟登陆，会给你返回下面错误</p><p><code>Missing argument grant_type</code></p><p>可见我们还得找出这个 fromdata 的加密方法。</p><h2 id="3-找出-fromdata-加密位置"><a href="#3-找出-fromdata-加密位置" class="headerlink" title="3. 找出 fromdata 加密位置"></a>3. 找出 fromdata 加密位置</h2><p>如果你是第一次找这个，估计你得不断地翻 js，也不一定能找得到，或者你可以根据下面这个调用函数过程来找</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-617a2244485e9b76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>会发现很多，不过你懂套路的话都知道加密一般都用到 encrypt 名字之类的,可以直接根据这个名字搜</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-db9ff65a92071e31?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>一搜果然有这个，通过查看你很容易就找到这个</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4a1a21d682925694?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个一通过调试，你可以看到，我们的加密字符串出来了，是不是很激动，我当时找到了这个的时候激动不得了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-eed53ffe5a5775fe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>这个是加密的字符串</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/6474572-02a4e1f15a001982?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>这个就是我们需要找的</p></blockquote><p>历尽千辛万苦，终于找出了庐山真面目，激动不？先不要激动先，这只是加密的位置，后面的才是最难的！</p><h2 id="4-找出-fromdata-加密的所有方法"><a href="#4-找出-fromdata-加密的所有方法" class="headerlink" title="4. 找出 fromdata 加密的所有方法"></a>4. 找出 fromdata 加密的所有方法</h2><p>知道位置后，我们可以直接把这个加密的 js 方法都扣出来，放在一个 html 文件内执行就好。</p><p>在上面找出位置之后，很容易就可以看到这个完整的一个的加密方法</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ac31dbe4b69f01df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>按这个半括号向上找，你就可以找到一个完整的加密方法，这个就是整个 fromdata 的加密方法，挺容易找的，如果觉得不方便找的，可以先将这个 js 文件里面的代码复制下来，然后到 Sublime Text 软件上找，这个可以折叠，也比较容易找，找出来是这样子</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f7652b0f02a22ea1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>格式化之后有 400 多行，而且全是混淆，难看得一批。</p><p>为了看看这个正确不正确，我们可以把函数里面的内容直接拿出来，就是<strong>去掉最外层的函数，然后调用下面的函数 Q，把我们的 fromdata 传进去</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-8c354c7895815a61?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>最后将上面的 JavaScript 给弄成一个 html 文件，放在 script 标签内即可</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-17d09b7535c6f231?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>格式就和上面一样，然后直接用浏览器上打开这个 html 文件，你会看到这个</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5cc15eeb4d207af1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个就是我们一直努力在找的 fromdata 加密字符串。</p><p>弄完这个之后，我们继续使用 python 来操作了，因为这个 加密的方法格式化之后有 400 多行，实在太多，也全都是混淆，如果想用 python 来实现的话也不是不可能，就是成本太大了，需要的时间太多了，我们还不如直接使用 python 的 execjs 来执行 JavaScript 代码直接获得就可以了，这个简单方便。</p><p>(我们除了使用 execjs 来执行，还可以使用 selenium 运行这个html 文件也是可以的，但是我并不想用 selenium 这个工具，还是喜欢折腾，所以忽略了，想用的可以试试。)</p><p>但是这里又会有一个问题，我们用浏览器打开的是为它提供了一个浏览器的运行环境，我们在 python 使用的 execjs 提供的是 node 环境，两个环境的不一样，就会产生不同的效果，下面我们可以选择使用 webstorm 编辑器来提供 nodejs 环境来进行尝试以下。</p><h2 id="5-在-node-环境调试加密代码"><a href="#5-在-node-环境调试加密代码" class="headerlink" title="5. 在 node 环境调试加密代码"></a>5. 在 node 环境调试加密代码</h2><p>你可以拿上面的 JavaScript 代码在 webstorm 运行，你就会看到</p><p><code>TypeError: __g._encrypt is not a function</code></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3d5e4622957d935e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>所以我们需要调试，需要把那些在浏览器上只有的对象，比如 <strong>window、navigator</strong> 之类的对象给弄掉，从而在 node 上用不用的代码代替相同的效果即可。</p><p>要调试我们先要找到代码运行的开端，可以很容易找到</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-d606ab96365bb4fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到，这里它会先去判断有没有 window 这个对象来判断是不是在浏览器上面运行的，所以我们可以直接<strong>把它修改成 true 或者其他**</strong>表示成 true 的值都可以**</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-8ea83281785249bb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>再次运行，可以看到这个错误</p><p><code>ReferenceError: atob is not defined</code></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f7ca7f0b1288affb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个 atob 是将 base64 加密的字符串给解密，在 node 环境下是没有这个方法的，我们需要使用 Buffer.toString()替代即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e750743abf04194b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>运行之后，还是报这个错误</p><p><code>TypeError: __g._encrypt is not a function</code></p><p>注意：<strong>这个是大坑</strong>，估计一般人每个一两天还搞不定，这个是因为上面的解密的，但是上面的并不一样，你可以在上面的两个函数加断点，分别在浏览器和 node 环境下运行，可以看到解密的数据是不一样的，是<strong>因为在浏览器上的 base64 加密的是 binary 编码，解密之后也就同样需要使用 binary 编码</strong>，这个是我在知乎的资源文件上搜索 atob 这个方法，然后慢慢查找看到的，当时也差不多心态崩了，还好坚持下来了。<strong>而我在 node 环境下解密之后使用了默认的编码，所以解密的数据出错了</strong>。当我们加上 binary 编码之后，再运行</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f10f14a4f8861236?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这时，错误不再是上面那个了，变成了另一个，证明解密正确了，再来看看下面这个错误</p><p><code>execption at 11: ReferenceError: window is not defined</code></p><p>原来是 window 对象惹的祸，这个时候就需要我们伪造 window 对象了，至于怎样伪造呢，<strong>我们可以调试出错的地方，看看它使用了什么方法，就直接使用适合 node 运行的相同效果的代码代替就可以了</strong>，经过多次调试，需要我们伪造 window 和 navigator 这两个对象，下面就是伪造之后的代码</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-9747863af553b3a1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个时候再运行看看。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c25d7e7327ad0f39?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到成功了，上面的红色字是一个提示，关于 Buffer 的，这个我们忽略就行，接下来就可以使用 python 环境进行测试了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-cf5ae9b95b2c9049?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-1bc79e99fe397e56?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>果然，都出来了，哈哈，注意需要先<strong>安装 PyExecJS 库</strong>，自行安装，然后在测试的时候记得导入 execjs 即可。现在这个 fromdata 算是大功告成了，接下来就是登陆验证下我们搞得这个加密对不对了。</p><h2 id="6-模拟登陆知乎"><a href="#6-模拟登陆知乎" class="headerlink" title="6. 模拟登陆知乎"></a>6. 模拟登陆知乎</h2><p>这个知乎的登陆也是坑满满，我也给踩了几个，这个就直接说坑吧，其他的就不多说了。</p><p>我只是用手机号来登陆的，也可以用邮箱登陆，过程都差不多的。</p><h3 id="1-请求登陆的网址的请求头需要带上这几个"><a href="#1-请求登陆的网址的请求头需要带上这几个" class="headerlink" title="1. 请求登陆的网址的请求头需要带上这几个"></a>1. 请求登陆的网址的请求头需要带上这几个</h3><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0246e252fd0230d9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>不带 content-type 的话，会给你返回这个错误</p><p><code>Missing argument grant_type</code></p><p>不带 x-zse-83 的话，会给你返回这个错误</p><p><code>请求参数异常，请升级客户端后重试</code></p><p>至于 agent-user 那就更不需要说了。</p><h3 id="2-请求顺序"><a href="#2-请求顺序" class="headerlink" title="2. 请求顺序"></a>2. 请求顺序</h3><p>知乎这个登陆是首<strong>先请求验证码地址</strong>，看需要不需要填写验证码，如果<strong>需要填就再请求一次，而且还需要再再请求一次查看是否输入验证码正确</strong>，不正确就重复上面步骤，<strong>当不需要填写验证码的时候就可以直接请求登陆网址了</strong>。</p><p>还有上面的三次请求的验证码地址的请求方法都是不一样的，哪种方法自行调试即可。</p><h3 id="3-验证验证码"><a href="#3-验证验证码" class="headerlink" title="3. 验证验证码"></a>3. 验证验证码</h3><p>在验证验证码的时候<strong>请求头的 content-type 不要填写 值为 multipart/form-data</strong>，如果填了请求验证码的时候会给你返回这个错误：</p><p><code>{&quot;error&quot;:{&quot;message&quot;:&quot;Missing argument input_text&quot;,&quot;code&quot;:400}}</code></p><p>它的意思是说没有带上验证码验证，当我们去掉的这个字段的时候，就可以验证了。</p><p>验证验证码的时候请求头只需要有一个<strong> user-agent </strong>就可以了</p><h3 id="4-请求的所有阶段带上-cookie"><a href="#4-请求的所有阶段带上-cookie" class="headerlink" title="4. 请求的所有阶段带上 cookie"></a>4. 请求的所有阶段带上 cookie</h3><p>知乎这个有个 cookie 值是验证码票据，是从第一次请求验证码地址来的，就是下面这个</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e628c80e4126cccd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果不带 cookie请求或者请求顺序不一样都有可能给你返回这个错误。</p><p><code>{&quot;error&quot;:{&quot;message&quot;:&quot;缺少验证码票据&quot;,&quot;code&quot;:120002,&quot;name&quot;:&quot;ERR_CAPSION_TICKET_NOT_FOUND&quot;}}</code></p><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><p>你还想要？没有了，坑暂时只有这么多，最后给你们看下登陆成功的结果</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-a4d8f084d04c9cd0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="7-写在最后"><a href="#7-写在最后" class="headerlink" title="7. 写在最后"></a>7. 写在最后</h2><p>这个登陆折腾了差不多一周了，实际来说可能是三周，因为从刚开始看不懂 js 代码，就跑去学了两周 js，现在总得来说 js 也可以说上手了，以后或许也会使用 nodejs 搞点爬虫，挺好玩的。</p><p><strong>至于代码，暂时不公布了，如果你一步一步按照我方法来弄的话估计也可以，前提的有 js 基础最好，以后会公布的，等我再完善先，因为还需要干别的东西。如果有问题也可以找我，加我微信 june–98 拉你进群讨论即可</strong>。</p><p>折腾这个，掉了不少头发，但听说<strong>分享点赞是生发之道</strong>，所以你们懂的！</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ed16e0b5bab8baf9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;以下内容仅交流学习，请勿用于非法用途&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你现在想模拟登陆知乎，会发现 fromdata 是一串加密的字符串&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_im
      
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="login" scheme="http://sergiojune.com/tags/login/"/>
    
  </entry>
  
  <entry>
    <title>爬虫不得不学之 JavaScript 函数对象篇</title>
    <link href="http://sergiojune.com/2019/02/14/%E7%88%AC%E8%99%AB%E4%B8%8D%E5%BE%97%E4%B8%8D%E5%AD%A6%E4%B9%8B%20JavaScript%20%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%AF%87/"/>
    <id>http://sergiojune.com/2019/02/14/爬虫不得不学之 JavaScript 函数对象篇/</id>
    <published>2019-02-14T13:18:08.156Z</published>
    <updated>2019-02-14T13:18:49.740Z</updated>
    
    <content type="html"><![CDATA[<p>今天好像是情人节？所以最适合面向对象，JavaScript 也有对象，我们也可以随时面向对象，方便得很，那怎样才有对象呢？下面告诉你！</p><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a><strong>1. 数组</strong></h2><p>数组，字面意思就是一堆数的组合，但是它是<strong>有顺序</strong>的，学了数组就不仅可以存储一个数据，还可以<strong>存储一堆数据</strong>，这就是我们为什么学了简单数据类型之后还要学数组的原因。</p><h3 id="1-1-声明数组"><a href="#1-1-声明数组" class="headerlink" title="1.1 声明数组"></a><strong>1.1 声明数组</strong></h3><p><img src="http://upload-images.jianshu.io/upload_images/6474572-7ede45ce71ae53b5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到，数组里面的定义和 python 里的差不多，也可以存储不同数据类型。获取数组元素也是一样通过下标获取，下标<strong>从 0 开始</strong>，而且 JavaScript 的数组可以<strong>随意根据下标进行赋值</strong>，不管你的数组长度，因为 <strong>JavaScript 的数组长度是动态</strong>的。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5a33e90340a9f68b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="1-2-遍历数组"><a href="#1-2-遍历数组" class="headerlink" title="1.2 遍历数组"></a><strong>1.2 遍历数组</strong></h3><p>遍历数组，根据数组长度可以轻易知道循环次数，所以可以使用 for 循环，获取数组的长度可以通过 <strong>length</strong> 属性进行获取。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ad792b6f41c94926?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这里有个提高效率的地方，就是在<strong>获取数组的长度时放在了 for 语句的初始化表达式里，而不是放在判断表达式里</strong>，当你这个值需要运算才能获得的时候，这样做就<strong>可以不用在每次判断时都需要通过运算获得，减少运算</strong>，也就提高效率了，当然，数组的长度在这里只是一个属性，不需要运算，放不放在初始化表达式都差不多。</p><h3 id="1-3-清空数组"><a href="#1-3-清空数组" class="headerlink" title="1.3 清空数组"></a><strong>1.3 清空数组</strong></h3><p>JavaScript 这里清空数组简单粗暴，直接将<strong>长度赋值为 0 </strong>即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5c0bd5b4f895b34b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="1-4-数组小练习"><a href="#1-4-数组小练习" class="headerlink" title="1.4 数组小练习"></a><strong>1.4 数组小练习</strong></h3><ul><li>找出数组中最大的值</li></ul><p>这个直接通过遍历数组，然后将每个值进行比较即可，很容易。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-fc43b2f06c29a013?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>翻转数组</li></ul><p>这个就是将数组中的元素前后互相替换，也不多说了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-53d9f13cdecfdab1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a><strong>2. 函数</strong></h2><p>当我们需要在对多个数组进行上面的其中练习之一，比如进行寻找最大值，我们总不能每个数组都各自写一段寻找最大值的代码，否则这样子的话代码的复用性太低了。</p><p>函数的出现就是解决这个问题的，<strong>函数就是把一段相对独立的具有特定功能的代码抽取出来进行封装，形成一个独立的个体。当需要多次使用的时候，我们只需要使用函数名调用即可</strong>。</p><h3 id="2-1-函数的定义"><a href="#2-1-函数的定义" class="headerlink" title="2.1 函数的定义"></a><strong>2.1 函数的定义</strong></h3><p>函数定义这里有两种方法，如下：</p><ul><li>使用函数声明，语法为</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5be4c5e588fc0e36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3011d5e6f9790118?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>使用函数表达式，语法为：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-bb10dd07abf46e6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-46f1a1dde9c2fdb1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>上面只是函数的定义而已，并不会去执行，只有你调用函数的时候才会去执行。</p><h3 id="2-2-函数调用"><a href="#2-2-函数调用" class="headerlink" title="2.2 函数调用"></a><strong>2.2 函数调用</strong></h3><p>调用函数的语法也比较简单，就是函数加上一个括号就行了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4e57ecb047136b10?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-7734042c17b8816a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>所以当需要多次使用这段功能的时候，就多次调用即可，不需要每次都写一段相同的代码。</p><h3 id="2-3-函数参数"><a href="#2-3-函数参数" class="headerlink" title="2.3 函数参数"></a><strong>2.3 函数参数</strong></h3><p>不需要多次写同一段代码解决了，但是当有不同的数据内容参与运算时，好像我还需要重复写呀！就比如前面说的求数组最大值。这个时候就需要我们的函数参数了，函数参数就是解决这个不确定的数据内容的。当我们需要对不确定数据内容进行操作时，只需要在调用函数的时候把数据内容当作参数传进去即可。</p><p>函数的参数定义与调用语法：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-d11a102bb4971a46?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p><strong>形参</strong>：在声明函数时，有些值是固定的，而有些值不是固定的，对于这些不固定的值，我们可以给它们设置参数，但是这个参数不是具体的值，只是一个形式而已，所以叫做形参</p></li><li><p><strong>实参</strong>：在函数声明设置的形参，我们调用函数就需要传入对应的参数，而这个参数就是实参。</p></li></ul><p>了解了这个之后，是不是很容易就可以写出一个求数组最大值的函数了？</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c9059a3db0e9cf5e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>咦？上面的我都看明白了，但是 <strong>return </strong>那个语句又是什么？<strong>return 后面跟的内容就是函数的返回值，当函数运行到这里的时候就会结束函数并且把该值返回给调用处，就相对于一段代码执行之后的反馈</strong>。<strong>所以 return 语句也会常常用于终止函数的运行，还有也可以不写 return 语句，但是会默认返回 undefined</strong></p><h3 id="2-4-函数内部的-arguments-对象"><a href="#2-4-函数内部的-arguments-对象" class="headerlink" title="2.4 函数内部的 arguments 对象"></a><strong>2.4 函数内部的 arguments 对象</strong></h3><p>JavaScript 中，函数的内部都有一个 arguments 对象，<strong>用来记录在调用函数时所传进来的参数</strong>，可以说是一个伪数组。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-910a10957265b010?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-2fe0065a2dfb1189?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个对象可以<strong>用于当我们需要传进来的参数个数不确定</strong>时就可以使用这个，就比如求一堆数的和。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0b3c46564f87ec45?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="2-5-匿名函数"><a href="#2-5-匿名函数" class="headerlink" title="2.5 匿名函数"></a><strong>2.5 匿名函数</strong></h3><p>匿名函数就是没有名字的函数，当我们只需要只需要调用一次的话就可以使用匿名函数，或者需要回调函数的时候就会使用匿名函数，至于什么是回调函数，以后遇到了就说，匿名函数声明如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-60b8813aa2fdef35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这是将匿名函数赋值给一变量，然后可以通过该变量进行调用，也可以传参的，除了这样子调用匿名函数，匿名函数还可以进行自调用。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c3b94d55484eeb2d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这里需要注意的是在自调用的时候别忘了定义函数的部分需要加括号括起来。这自调用的匿名函数就常用于<strong>防止全局被污染</strong>，就是当你写的代码量大了，难免会有些全局变量会有重名的可能，这时候使用匿名函数自调用就可以新开辟了一个作用域，不同作用域的变量就算同名也不怕了，至于具体的后面我也会应用到，到时再详讲。</p><h3 id="2-6-函数其他"><a href="#2-6-函数其他" class="headerlink" title="2.6 函数其他"></a><strong>2.6 函数其他</strong></h3><ul><li>函数也是一种数据类型，可以说是一个对象吧，至于具体的后面再详讲，现在了解就好。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-a3f4482335a6a7fe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>函数不仅可以作为参数进行传递，还可以作为返回值，毕竟函数也是一种数据类型。作为参数传递主要就是我们所说的回调函数，遇到就会说，作为返回值的应用，闭包就是一个应用，也不多说，以后会讲。</li></ul><h3 id="2-7-作用域"><a href="#2-7-作用域" class="headerlink" title="2.7. 作用域"></a><strong>2.7. 作用域</strong></h3><p>作用域就是变量可以起作用的范围，在 JavaScript 中定义的变量符合词法作用域，就是说变量的作用域是在定义时决定的，不是在执行时决定的，即变量作用域只需要通过源码分析就知道了。</p><p>1. JavaScript 中 词法作用域的规则为：</p><ul><li><p>函数内部的变量允许访问函数外部的。</p></li><li><p>整个代码结构只能函数限定作用域，这就是为什么上文说使用自调用函数来开辟新的作用域的原因了。</p></li><li><p>作用域规则首先使用提升规则分析，下文说的预解析就是这个</p></li><li><p>如果当前作用域有该变量了，就不会考虑外面的了。</p></li></ul><p>2. 下面再看看 JavaScript 中三种作用域</p><ul><li><p><strong>全局作用域</strong>：JavaScript 中认为在函数外部定义的变量就是全局变量，而这个全局变量所在的作用域就是全局作用域。</p></li><li><p><strong>局部作用域</strong>：在函数内部就是局部作用域，在这里定义的内部变量也就是局部变量。</p></li><li><p><strong>块级作用域</strong>：这个是 ES6 才有的，简单说下，就是只使用一对<strong>大括号{}</strong> 括起来的就是块级作用域。</p></li></ul><p>3. 作用域链</p><p>只有函数才可以限定作用域，那么在要有代码，这里就至少存在一个全局作用域，而写代码难免又会有函数，这里的函数就会构成另一个作用域，如果函数中还有函数，则他还会构成一个新的作用域，等等。<strong>将上面的这些作用域列出来，就会形成一个结构，这个结构就是作用域链</strong>。如下面代码：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-6a57527c433b55a8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>按照<strong>全局作用域就是 0 级链，函数就是 1 级链，函数的函数就是 2级链</strong>，就会有下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-cda19836ec6560f9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="2-8-预解析"><a href="#2-8-预解析" class="headerlink" title="2.8 预解析"></a><strong>2.8 预解析</strong></h3><p>JavaScript 的解释器在执行代码的时候有两个过程，就是<strong>预解析和再从上往下执行代码过程</strong>。预解析就是先把代码中的变量提升，然后函数提升，接着再执行代码。</p><ul><li><p><strong>变量提升</strong>：变量的声明会被提升到作用域的最上面，注不会将赋值提升。</p></li><li><p><strong>函数提升</strong>：把当前作用域的函数声明提升到当前作用域的最上面。</p></li></ul><p>如果你懂了再看看下面几段代码会不会报错？</p><p>1.</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c026a092ca1ad3f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>解答：不会报错，因为经过预解析后代码成这样</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-be5da179b4381676?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-dd64b2f404f8c4fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>解答：也不会报错，不过 a 打印的值为 undefined</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0e2a231c01bb07ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>3.</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-53ddd6f3fa9b2dee?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>解答：会报错，原因可以结合上下两张图看即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-57644d837ce4f5ba?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="3-对象-object"><a href="#3-对象-object" class="headerlink" title="3. 对象 object"></a><strong>3. 对象 object</strong></h2><p>对象是一个具体的事物，比如你和我都是对象，但是汽车和手机不是事物，可以说它们是一个类别。</p><p>JavaScript 中的对象可以说是一个无序的属性的集合，属性可以包括基本值、对象或函数，也可以把 JavaScript 中的对象想像为一组键值对。</p><p>把现实中的事物抽象为代码中的对象，其的特征可以作为对象的属性，其的行为可以作为方法。</p><h3 id="3-1-创建对象"><a href="#3-1-创建对象" class="headerlink" title="3.1 创建对象"></a><strong>3.1 创建对象</strong></h3><p>JavaScript 中创建对象的方法有四种，并不像其他语言中只能通过 new 来创建。</p><ul><li><strong>直接声明一个键值对的集合</strong></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c03b8492283f2974?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个 obj 变量就是一个对象了里面有两个属性和一个方法。使用这种方法也只适合创建一个类，因为当需要创建大量同类型的对象时，使用这个方法就需要写大量的方法。</p><ul><li><strong>使用 new Object() 创建</strong></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-1b1a17cb61bb5102?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个是先创建一个空对象，然后动态增加对象的属性和方法，也是只适合创建只有一个对象的类型，还不如第一种，也不推荐。</p><ul><li><strong>使用工厂模式创建</strong></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-1201f3647fa5b7cc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这种方法就是使用一个模板函数，就相当于一个工厂，还有记得返回创建的对象。当需要创建对象的时候只需要调用一下函数传参就可以了，就比上面两种代码的复用性提高了。</p><p>但是这有一个问题，我们在判断对象类型的时候，结果都是 Object</p><p><strong>判断对象类型使用 instanceof，而使用 typeof 判断对象，无论什么对象的结果都是 Object</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-748f7f15a532aca8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><strong>自定义构造函数来创建</strong></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-14fcf04583c2869f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这个<strong>自定义构造函数名字需要首字母大写，当然这只是个规范而已</strong>。</p><p>里面使用了 this 关键字，这个 <strong>this 的指向就是使用构造函数创建的对象</strong>，也不需要返回 对象了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-165abb97cad7a6c6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>注意：创建对象也需要使用 <strong>new</strong> 关键字，如上图，<strong>通过这种方法就既可以创建大量同类型的对象，也可以判断所属类型</strong>，非常方便。</p><p>这个 <strong>new 创建对象的过程</strong>为：</p><ol><li><p>在内存中先创建一个空的对象</p></li><li><p>让构造函数的 this 指向刚刚创建的对象</p></li><li><p>执行构造函数内部的属性和方法定义</p></li><li><p>返回当前对象</p></li></ol><h3 id="3-2-对象属性和方法的相关操作"><a href="#3-2-对象属性和方法的相关操作" class="headerlink" title="3.2 对象属性和方法的相关操作"></a><strong>3.2 对象属性和方法的相关操作</strong></h3><ul><li>访问属性语法为<strong>对象.属性</strong>，还可以 <strong>对象[‘属性名’]</strong> 这样， 当然也可以通过这两个来修改对象属性的值</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3bcd02cbd411263f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-264151b405a8286a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>当然，当对一个不存在的属性访问的时候就会返回 undefined，若是修改一个不存在的属性就是向该对象动态增加一个新的属性。</p><p>这两种方法推荐第二种，因为有时我们得到的属性是一个变量名，并不知道具体的名字，这时候就只能使用第二种方法</p><ul><li>访问方法直接使用 <strong>对象.函数名()</strong> 即可</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-3ba45dded8b3b755?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>遍历对象成员</li></ul><p>可以使用 for…in… 语句</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-8864c0dd3b8a25ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>删除对象成员</li></ul><p>使用 <strong>delete</strong> 关键字</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0ab0ffddc7b5e6b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="3-3-简单数据类型和复杂数据类型的区别"><a href="#3-3-简单数据类型和复杂数据类型的区别" class="headerlink" title="3.3 简单数据类型和复杂数据类型的区别"></a><strong>3.3 简单数据类型和复杂数据类型的区别</strong></h3><p>基本类型又叫做值类型，复杂类型又叫做引用类型</p><p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p><p>引用类型：复杂数据类型，在存储时，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p><p>终于写完了，下一篇常用内置对象走起。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天好像是情人节？所以最适合面向对象，JavaScript 也有对象，我们也可以随时面向对象，方便得很，那怎样才有对象呢？下面告诉你！&lt;/p&gt;
&lt;h2 id=&quot;1-数组&quot;&gt;&lt;a href=&quot;#1-数组&quot; class=&quot;headerlink&quot; title=&quot;1. 数组&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://sergiojune.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sergiojune.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>爬虫不得不学之 JavaScript 入门篇</title>
    <link href="http://sergiojune.com/2019/02/13/%E7%88%AC%E8%99%AB%E4%B8%8D%E5%BE%97%E4%B8%8D%E5%AD%A6%E4%B9%8B%20JavaScript%20%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://sergiojune.com/2019/02/13/爬虫不得不学之 JavaScript 入门篇/</id>
    <published>2019-02-13T09:24:44.761Z</published>
    <updated>2019-02-13T10:15:16.842Z</updated>
    
    <content type="html"><![CDATA[<p>现在的爬虫越来越难了，不再和之前的那样，随便抓个包就可以找到相关的 url ，然后 post 一下或者 get 一下数据就出来了。还有一个可能就是可能你以前用来学习的爬虫网站太简单了，还没有看见过那些猛的。上两周我就想弄弄知乎登陆，参数的加密算是把 js 代码扣出来了，但是只能在浏览器上运行，一换到 Python 执行就各种报错，你不会 JavaScript 就什么都调不了，所以二话不说，开启了新的大陆。那就开始吧！ </p><h2 id="1-JavaScript-介绍"><a href="#1-JavaScript-介绍" class="headerlink" title="1. JavaScript 介绍"></a>1. JavaScript 介绍</h2><p>JavaScript 是运行在 客户端的语言，和你们说的 Java 是很不一样的， Java 通常用于服务器端的。但是他们两者也有相似之处，比如 JavaScript 的命名规范和名称和 Java 相似。其他的好像就没有什么了，哈哈。</p><p>JavaScript 也是一门脚本语言，和 python 一样，都是解释性语言，即每运行一行代码就解释一行，只不过 JavaScript 的解释器在浏览器内部。</p><p><strong>JavaScript 最初被应用是为了处理与表单相关的验证，现在应用就更加广了，可以说是几乎无所不能，比如用来做服务端开发，命令行工具、桌面程序和游戏开发等。</strong></p><p>我在学了之后也跟着弄了两个小的页面游戏，怀念童年。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-24ea6d0ef79f410c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-117254e7a2e586d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="2-JavaScript组成"><a href="#2-JavaScript组成" class="headerlink" title="2.JavaScript组成"></a>2.JavaScript组成</h2><p><img src="http://upload-images.jianshu.io/upload_images/6474572-86db2e9f78c081cf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p>EcmaScript：JavaScript 的核心，定义了 JavaScript 的基本语法和数据类型，也是我们今天所学的内容。</p></li><li><p>DOM：document odject model， 文档对象模型，用于操作网页中的页面元素的，比如可以控制相关元素的增删改查。</p></li><li><p>BOM：browser object model,， 浏览器对象模型， 用于操作浏览器窗口，比如弹出框，控制页面滑动等。</p></li></ul><h2 id="3-JavaScript-变量"><a href="#3-JavaScript-变量" class="headerlink" title="3.JavaScript 变量"></a>3.JavaScript 变量</h2><p><strong>在了解变量之前，先要知道 JavaScript 代码写在那里：</strong>  </p><ol><li><p><strong>行内</strong>，即写在 html 的元素中，不建议</p></li><li><p><strong>嵌入</strong>，即写在 script标签内，这个练习时可以使用，但当代码量大的时候也不建议</p></li><li><p><strong>外部</strong>，即 js 代码都在另一个文件内，用链接的方式接入 html 文件即可，推荐使用这种方式。</p></li></ol><p>还有注释：</p><ol><li><p>单行注释： <strong>// 注释内容</strong></p></li><li><p>多行注释： <strong>/<em>  注释内容 </em>/</strong></p></li></ol><p><strong>3.1 变量的定义以及作用</strong></p><p>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据。 </p><p>使用变量我们可以更方便的获取或修改内存中的数据。</p><p><strong>3.2 定义变量</strong></p><p>使用 var 关键字来声明变量，和 python 差不多，都是弱类型的语言，只不过 python 不需要使用关键字来声明。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f56459cf1ace3c38?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>注：console.log()这个方法只是在控制台打印一下变量而已。</p><p><strong>3.3 变量的命名规则和规范</strong></p><p>1)：规则-必须遵守的，不遵守就会报错，就好比人类的法律</p><ul><li><p>由字母、数字、下划线和 $ 组成，但是不能以数字开头，如：12asd 这个名字就会报错</p></li><li><p>不能是关键字或保留字，比如 var、for等</p></li><li><p>严格区分大小写，就是说大写和小写都是不一样的变量</p></li></ul><p>2)：规范-建议遵守的，但不遵守也不会报错，比如人类的道德 </p><ul><li><p><strong>变量名必须有意义</strong>，因为这样别人才能看得懂，而且也利于维护，没有意义的就像我们需要破解相关参数时看到的 js 混淆，想想就头痛。</p></li><li><p><strong>遵守驼峰命名法</strong>，首字母小写，后面单词的首字母大写，如：userName</p></li></ul><p><strong>3.4 小案例</strong></p><p>了解完变量之后可以做个小案例：交换两个值</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4368776c0e0a41bc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><p>JavaScript 的数据类型分两种，一个为简单数据类型，另一个为复杂数据类型。</p><p>简单数据类型有 <strong>Number、String、Boolean、undefined 和 null。</strong>一共五种</p><p>复杂数据类型比如 <strong>object</strong>，这个以后遇到再说，慢慢来。</p><p><strong>4.1 Number</strong></p><p>Number 为数值固定的表示法，用来表示整数和浮点数的。它的字面量就是数值，那字面量是什么意思呢？字面量就是这个变量表示的值，</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0e71b99a14be4712?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>比如上面变量 a 的字面量就是 12，b 的字面量就是 45。</p><p>我们还可以使用 <strong>typeof</strong> 关键字来判断这个数据类型</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5ddb19092e21e184?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>除了使用上面的十进制来赋值，我们还可以使用八进制和十六进制</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-160a9a94d634ffa1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>八进制的数是以 <strong>0 </strong>开头的，而十六进制的是以<strong> 0x</strong> 开头的，其他的进制就不讨论了。</p><p>无论你写何种进制，它的存储还是以二进制来存储的，所以这样就弄成了浮点数的存储精确度，<strong>浮点数只能精确到17位小数</strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-2641cfe245c551d0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>可以看到 两个浮点数的相加不是很准确，所以不<strong>要在有浮点数的运算下做判断</strong>，有可能会有你想不到的结果，如</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ef2ac27c053b3164?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  浮点数除了直接表示我们还可以使用科学计数法，当然，整数也是一样可以使用的。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f64c3dcab6d15db6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Number 数据类型是有范围的，但是不需要我们刻意去计，记住它的关键字就可以了。 </p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-37be85eca021d68d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>最后再说一个关键字：<strong>NaN</strong>：not a number,这个表示不是数值，当有两个数据运算时，运算失败就会返回这个值。我们也可以判断一个数据类型是不是 NaN，使用 <strong>isNaN()</strong> 方法即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-2bd0d5c8345aeb67?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>4.2 String</strong></p><p>String 类型就是用单引号或双引号括起来的内容就是了，和 python 的字符串类型也是差不多的。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-52e3b79fce9efc54?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>length</strong> 属性是获取字符串的长度。</p><p>连接两个字符串可以使用<strong> +</strong> 进行连接， + 号两边不需要全是 String 类型也可以进行连接</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ea7fa5b06a85ed53?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>思考：如何打印出下列字符串</p><ol><li><p>我是一个”帅哥”</p></li><li><p>我喜欢”学‘python’”</p></li></ol><p>这里面有单引号和双引号，如果直接进行打印的话就会出错，这时候我们就需要把这些有意义的字符给转义符，转成普通的字符</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-052944797c6a7f0a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>根据上面的转义符，就可以写出下面语句了</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-a82bf4356bddd3ad?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>4.3 Boolean</strong></p><p>boolean 类型，字面量只有<strong> true</strong> 和 <strong>false</strong>，表示真假，即表示计算机的 1 和 0。</p><p>当我们描述只有两种结果的事物是可以使用这个。</p><p><strong>4.4 undefined 和 null</strong></p><ol><li><p>undefined 表示<strong>一个声明了没有赋值的变量</strong>，所以变量的默认值就是undefined。</p></li><li><p>null 只是表示为空，如果要想把该值设为 null， 只能手动赋值。</p></li></ol><h2 id="5-数据类型转换"><a href="#5-数据类型转换" class="headerlink" title="5. 数据类型转换"></a>5. 数据类型转换</h2><p><strong>5.1 其他类型转 String 类型</strong></p><ul><li>使用<strong> toString()</strong> 方法 </li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-73ad86653d13500a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>需要注意：undefined 和 null 类型不能使用这个方法</strong></p><ul><li>使用 <strong>String()</strong> 强转，这个对任何类型都适用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ee87e38fb0e6af72?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>使用 <strong>+ 连接符</strong> 连接空字符，这是最方便的,也是支持所有类型</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-4e50f8c5e010c7d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>5.2 其他类型转 Number 类型</strong></p><ul><li>使用 <strong>Number() </strong>，当转不了的时候会返回 NaN,说明不是数值，在将 Boolean 类型转 Number 时，<strong>true会转为 1， false 会转为 0</strong>。这个方法不支持将数字开头带有其它字符的字符串转为数值类型，如 “12df”</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-81604dbe60c50fc5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p>使用 <strong>parseInt()</strong> ，只能转为整数，而且<strong>转不了Boolean</strong>。但是<strong>可以转以数字开头而带有字符的字符串</strong>。这个就可以应用在比如需要将 “<strong>16px</strong>“ 转为数值，就可以使用这个。转不了时也会返回 NaN。</p></li><li><p>使用<strong> parseFloat()</strong> 可以转为浮点数，当字符串为整数时也可以转为整数。需要注意的是：<strong>当字符串中有两个小数点的时候，只会转第二个小数点之前的数字，后面的都当作字符串</strong></p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e1bd56d099b3c78e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><strong>使用 + 或 - 来将值取正或取负</strong>。这个的功能和 Number 差不多。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-f8b76750e269f895?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><strong>使用 - 来进行减法运算来转</strong>。这个使用运算符就会<strong>先把左右两边的类型先转为数值类型再运算</strong>，所以可以用来相减 0。<strong>至于 + 不行，是因为这个用来做字符串的拼接</strong>了。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-7e9331f5e3d566a0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>5.3 其他类型转 Boolean 类型</strong></p><p>这个使用<strong> Boolean()</strong> 来转就可以了，所有类型都可以转。<strong>转为 false 的情况为 null、undefined、NaN、0 和 空字符串</strong>，其他情况均为 true。</p><p>其实这个还可以使用<strong>隐式转换</strong>，就是不需要自己手动转，解释器会自动帮我们转，隐式转换通常用在判断语句的情况，隐式转换可以减少代码的书写，等说到判断语句再说，下面就有！</p><h2 id="6-操作符"><a href="#6-操作符" class="headerlink" title="6. 操作符"></a>6. 操作符</h2><p>操作符就是用来对数据类型进行操作的符号，每个语言的操作符都差不多，这里再说下可以更深刻一点！</p><p><strong>6.1 算术运算符</strong></p><p>有 <strong>+ - * /  %</strong> 五个，任何一个数 除 0 都为为无穷大，模 0 为 NaN</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-9993f73ffc110130?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>6.2 一元运算符</strong></p><p>一元运算符就是只需要一个操作数的运算符，有 <strong>++、– 和 !</strong></p><ul><li><p><strong>前置++</strong>：如 a++，变量在前，这个是<strong>先将变量的结果返回再对自身加 1</strong>，</p></li><li><p><strong>后置++</strong>：如 ++a，变量在后，这个是<strong>先将变量进行自身加 1，再把结果返回</strong></p></li></ul><p>还有 – 也是一样的，只是 它是自身减 1，在运算中需要注意变量在一元运算符的顺序。 </p><ul><li><strong>! 就是对操作数取反，而且返回的是 Boolean 类型</strong>  </li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-715d69571c17ca6b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>6.3 逻辑运算符</strong></p><p>逻辑运算符有 <strong>&amp;&amp; 、|| 和 !</strong>，! 因为只对一个操作数操作所以也属于一元运算符。</p><ul><li><p>&amp;&amp;：这个是与运算符，只有<strong>当两边都为 true 的时候才会返回 true</strong>，其他情况都返回 false。</p></li><li><p>||：这个是或运算符，<strong>只有当两边都为 false 的时候才返回 false</strong>， 其他情况都返回 true。</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-336fa48555e1b65b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>6.4 关系运算符</strong></p><p>关系运算符有<strong> &lt; &gt; &lt;= &gt;= == != === 和 !==</strong>。运算完都是返回 Boolean 类型的，这里就不细说了，都差不多的，只说下 == 和 === 的区别，还有 !== 和 != 的区别。<strong>== 只判断两值的字面量相等不相等，不会判断数据类型，而 === 会先去判断数据类型再判断字面量，</strong>!= 和 !== 的区别也是这样。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-694bfe8ed868a46f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>6.5 赋值运算符</strong></p><p>赋值运算符有 <strong>+= -= *= /= %= =</strong> 六个。</p><p><strong>+= 就是把左右两边的值相加起来再赋值给左边的值</strong>，其他的也一样，就不多说了。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-0f45fbf11d3eb8e2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>6.6 运算符优先级从高到低（运算顺序）</strong></p><ol><li><p>()</p></li><li><p>一元运算符</p></li><li><p>算术运算符，<strong>同级时先 * / 再 + -</strong></p></li><li><p>关系运算符：&gt; &gt;= &lt; &lt;=</p></li><li><p>相等运算符：== === != !==</p></li><li><p>逻辑运算符：<strong>同级时先 &amp;&amp; 再 ||</strong></p></li><li><p>赋值运算符 </p></li></ol><h2 id="7-流程结构"><a href="#7-流程结构" class="headerlink" title="7. 流程结构"></a>7. 流程结构</h2><p>JavaScript 的流程结构有三种，分别是顺序结构，分支结构和循环结构，这个也和 python 差不多的。</p><p>顺序结构就是代码是按顺序从上到下执行的，分支结构就是按照给定条件的是否成立而执行不同的语句，循环结构就是重复执行某一段代码。</p><p>顺序结构就不多说了，我们刚才运行的代码就是顺序结构的，现在先说下分支结构。</p><p><strong>7.1 分支结构</strong></p><p>使用分支结构可以使用 if 和 else 组成的语句，写法和 python 差不多。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-7be46fd74e6de701?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>单独 if 语句</p><p>说到判断，就有个<strong>隐式转换，就是 if 括号里面的值会将任意类型的值隐式转换成 Boolean 类型</strong>。如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-90a31f34d8ea4bf1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>另一种形式的分支语句：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-2dc1dbac30b3168b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>if-else 一起用</p><p>这个 if-else 合用还有个简单点的写法，叫做<strong>三元运算符</strong>，语法为</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-cffa5d68e34b7a46?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>当表达式1 为 true 的时候，就会把 表达式2 的值给返回，否则返回 表达式3 的值，这个有一个缺陷，就是必须要有结果返回</strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ee60bd8be6020d88?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>还有一种形式的分支语句：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-c228e2c32e058d7b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>if-else if-if 三个合用</p><p>上面的 三个合用我们也可以使用 <strong>switch </strong>语句来改写，这个是选择关键词。语法为</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ae0b3342222936d7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>改写后：</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-23d1382ff108bc37?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>因为 case 的值只能是一个值，不能是范围，所以用了个除法来解决，要不然需要写大量的 case，还需要注意一点是一定需要<strong>记得写 break，否则在匹配到相应的值之后它会一直往下运行不管 case 值是否对应，直到遇到 break 或者 全部运行完</strong>。</p><p><strong>7.2 循环结构</strong></p><p>JavaScript 的循环结构也有 <strong>while</strong> 和<strong> for</strong>语句，但他还有 <strong>do-while</strong>语句。</p><ul><li>for语句：一般在<strong>确定了循环的次数</strong>就会使用这个比较方便，语法为：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ab48efbdb4e3ac4c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>这个先去执行初始化表达式1， 然后去执行判断表达式2，符合条件就会执行循环体，循环体执行完之后就执行自增表达式3，再去判断，接下来就是重复刚才的动作，直到不满足判断表达式2</strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-ccb203e554a6e47b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>while 语句：在<strong>无法确定循环次数</strong>的时候就可以用这个，使用这个需要注意循环结束的条件，以免写了死循环。语法为：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-d072d3afeb7b63a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>满足循环条件之后就执行循环体，然后再去执行循环条件，接下来就是重复刚才的动作直到不满足条件</strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-a80cc7d4c81e6227?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>do-while 语句：这个也是在不知道循环次数的时候使用，但是<strong>当循环体无论如何都需要执行一次</strong>的话就可以选择使用这个。语法为：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/6474572-1275ef8e956c03ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>先去执行循环体，再去判断循环条件，接下来就是重复刚才的动作直到循环条件不满足</strong>。</p><p>在循环结构中还可以使用 break 和 continue 来对循环进行跳出的操作。<strong>break 就是跳出整个循环，就是循环结束，而 continue 是跳出本次循环，接着下一次的循环</strong>。</p><p>学习了循环之后，我们也可以尝试着自己打印一个三角形，或者 99 乘法表来满足一下自己。</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-5027daa7cbb4436d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-e300fcfdae6849a2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这两个的思路都是差不多的，只要你搞定了第一个三角形的思路，下面的乘法表自然就迎刃而解了，这里就不多说了。</p><p>下篇就开始进入复杂的数据类型了，即 object，准备好了吗？</p><p><img src="http://upload-images.jianshu.io/upload_images/6474572-34fd70c5e6da8947?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在的爬虫越来越难了，不再和之前的那样，随便抓个包就可以找到相关的 url ，然后 post 一下或者 get 一下数据就出来了。还有一个可能就是可能你以前用来学习的爬虫网站太简单了，还没有看见过那些猛的。上两周我就想弄弄知乎登陆，参数的加密算是把 js 代码扣出来了，但是
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://sergiojune.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sergiojune.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>小白也可以看会的破解抖音字体反爬</title>
    <link href="http://sergiojune.com/2019/01/21/%E5%B0%8F%E7%99%BD%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%BC%9A%E7%9A%84%E7%A0%B4%E8%A7%A3%E6%8A%96%E9%9F%B3%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
    <id>http://sergiojune.com/2019/01/21/小白也可以看会的破解抖音字体反爬/</id>
    <published>2019-01-21T06:02:01.440Z</published>
    <updated>2019-01-21T06:03:09.089Z</updated>
    
    <content type="html"><![CDATA[<p>现在的网站，处处都是反爬，我们这些爬虫的经常需要和他们斗智斗勇，就看谁更厉害。这不，就连字体也弄成了反爬，而且还不止一个网站，常见的就有猫眼和汽车之家。不过，字体反爬也没有用，毕竟我们会破！哈哈。</p><p>抖音的字体反爬是在一个分享个人主页的链接中，别的链接暂时没有测试，不过破了一个其他的也就破了。</p><p>分享主页可以这样获得：</p><p><strong>1). 点击迪丽热巴个人主页</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa06ce93717?w=550&amp;h=978&amp;f=jpeg&amp;s=127597" alt=""></p><p><strong>2).点击左上角</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0706aa540?w=550&amp;h=978&amp;f=jpeg&amp;s=24995" alt=""></p><p><strong>3).再点击左上角分享以链接方式复制</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0ae85c175?w=550&amp;h=978&amp;f=jpeg&amp;s=45390" alt=""></p><p>做完之后你就可以获得这样一条链接：<a href="http://v.douyin.com/NT5Nck/" target="_blank" rel="noopener">http://v.douyin.com/NT5Nck/</a></p><p>在浏览器打开可以看到：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa07984ff29?w=900&amp;h=452&amp;f=jpeg&amp;s=31536" alt=""></p><p>链接编程了这样：<a href="https://www.iesdouyin.com/share/user/88445518961?timestamp=1548046967" target="_blank" rel="noopener">https://www.iesdouyin.com/share/user/88445518961?timestamp=1548046967</a></p><p>根据经验很容易知道前面的参数就是用户的 id 号，后面的就是时间戳，可以去掉的。</p><p>有了这个页面之后怎么将个人主页的名称、粉丝、点赞量等爬下来呢？接下来就是教你这个，请继续往下看！</p><h3 id="1-分析破解反爬字体"><a href="#1-分析破解反爬字体" class="headerlink" title="1. 分析破解反爬字体"></a>1. 分析破解反爬字体</h3><p>打开开发者调试工具，很容易就可以看到数据所在的请求的链接</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa07991c814?w=900&amp;h=442&amp;f=jpeg&amp;s=38774" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa07089b165?w=1696&amp;h=352&amp;f=jpeg&amp;s=103222" alt=""></p><p>点击我们需要获取的粉丝数，你可以看到：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa091b4b13a?w=939&amp;h=833&amp;f=jpeg&amp;s=170563" alt=""></p><p>可以看到，字体都变成了正方形，很明显这个做了反爬。那我们再看看请求返回来的 html 信息。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0985c91a7?w=1673&amp;h=697&amp;f=jpeg&amp;s=916147" alt=""></p><p>可以看到一堆编码，而且都是数字变成了这样，所有抖音将这些数字的数据都做了字体进行映射，用了他们自己的字体，那我们可以看看开发者工具的 network 查看他所用的字体，一般都是 wolf 或者 ttf 结尾的，可以看到：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa098e592b2?w=1758&amp;h=306&amp;f=jpeg&amp;s=102161" alt=""></p><p><a href="https://s3.bytecdn.cn/ies/resource/falcon/douyin\_falcon/static/font/iconfont\_9eb9a50.woff" target="_blank" rel="noopener">https://s3.bytecdn.cn/ies/resource/falcon/douyin\_falcon/static/font/iconfont\_9eb9a50.woff</a></p><p>在浏览器输入上面地址就可以下载该字体了。</p><p>下载完之后我们可以用 Python 的一个工具包 fontTools 来查看字体映射。</p><p>如果你没有这个包的话，可在命令行输入下面代码进行下载工具包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fontTools</span><br></pre></td></tr></table></figure><p>使用 <strong>fontTools</strong> 将字体文件转为 XML 文件，下面为代码：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa09dd206f9?w=705&amp;h=135&amp;f=png&amp;s=15648" alt=""></p><p>转换之后查看文件，你就可以看到之间的映射了，如下：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0a0c41706?w=1070&amp;h=780&amp;f=jpeg&amp;s=259091" alt=""></p><p>code 为我们在请求中显示的编码，name为映射，到我们需要找的是数字，num_ 代表的又是哪些数字呢？，如果你再找找，你会发现这个：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0ba8cffa4?w=889&amp;h=368&amp;f=jpeg&amp;s=88556" alt=""></p><p>是不是感觉已经找到了，恭喜你，你被坑了，这个并不是，如果你第一次遇到的话，估计都会被它坑一次，这个并不是刚才的什么数字映射，只是一些 id 名字罢了。</p><p>这时就需要我们另借助一个字体软件了：FontCreator, 软件百度官网下载安装即可。</p><p>用这个软件打开字体，可以看到新大陆：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0bc4b919b?w=1218&amp;h=391&amp;f=png&amp;s=27909" alt=""></p><p>这个就是我们需要找的映射，配合上面在 XML 文件中找的映射，一起用，这个就破解了。</p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>用 Python 代码只需要把它们之间的映射搞清楚就行了，所以我们可以使用字典来保存这些数据。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0ce77669a?w=515&amp;h=458&amp;f=png&amp;s=20906" alt=""></p><p>这个就是在软件上看到的映射关系，再来弄弄在 XML 中的编码对应关系</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0cbc9fc13?w=883&amp;h=285&amp;f=png&amp;s=26151" alt=""></p><p>通过一行一行地读取 XML 文件的内容，找出映射并存储在相应的字典中，这就可以了，大功告成。</p><h3 id="3-其他数据的获取"><a href="#3-其他数据的获取" class="headerlink" title="3.其他数据的获取"></a>3.其他数据的获取</h3><p>我打算爬的是抖音的用户数据，先找了 1000 个抖音大号来爬取，接着会通过他们的粉丝列表再来爬取别的用户，这样就差不多能够把抖音的大多数用户获取了，具体怎样爬取粉丝列表，下篇文章告诉你！期待的就点个「好看」支持下？</p><p>下面是 1000 个抖音大号的部分爬取代码：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/21/1686efa0c5c926cc?w=1233&amp;h=770&amp;f=jpeg&amp;s=186059" alt=""></p><p>上面的就是我需要存储的内容。</p><p>由于篇幅问题，其他的就不放出来了，想要源码的关注公众号进行获取</p><p>「以下内容，本人仅供学习交流，切勿用于商业用途」</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在的网站，处处都是反爬，我们这些爬虫的经常需要和他们斗智斗勇，就看谁更厉害。这不，就连字体也弄成了反爬，而且还不止一个网站，常见的就有猫眼和汽车之家。不过，字体反爬也没有用，毕竟我们会破！哈哈。&lt;/p&gt;
&lt;p&gt;抖音的字体反爬是在一个分享个人主页的链接中，别的链接暂时没有测
      
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="字体反爬" scheme="http://sergiojune.com/tags/%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>adb安装以及一些简单的操作</title>
    <link href="http://sergiojune.com/2019/01/20/adb%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://sergiojune.com/2019/01/20/adb安装以及一些简单的操作/</id>
    <published>2019-01-20T10:07:23.684Z</published>
    <updated>2019-01-20T10:11:48.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装adb"><a href="#1-安装adb" class="headerlink" title="1.安装adb"></a>1.安装adb</h3><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><p>在安装 Android SDK 之前首先需要安装 jdk 版本 8，因为只支持这个版本</p><p>jdk下载地址：<a href="https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html</a></p><p>根据自己的系统选择版本下载安装即可。</p><p><strong>配置环境变量</strong></p><p>这里需要配置三个<strong>系统</strong>环境变量</p><h5 id="1-Path环境变量"><a href="#1-Path环境变量" class="headerlink" title="1.Path环境变量"></a>1.Path环境变量</h5><p>变量名：Path</p><p>变量值：C:\ProgramData\Oracle\Java\javapath;%java_home%\bin;%java_home%\jre\bin</p><p><strong>C:\ProgramData\Oracle\Java\javapath</strong>这个是你自己的<strong>javapath</strong>的路径</p><p><strong>注意：如果你是win10 操作系统的话，需要将上面的值分成三条，每一个分号代表一条，添加到Path变量中</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a6861787c509?w=677&amp;h=664&amp;f=png&amp;s=63656" alt=""></p><h5 id="2-JAVA-HOME环境变量"><a href="#2-JAVA-HOME环境变量" class="headerlink" title="2.JAVA_HOME环境变量"></a>2.JAVA_HOME环境变量</h5><p>变量名：JAVA_HOME</p><p>变量值：C:\java\jdk（你自己的jdk安装路径）</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a6b98c5433a1?w=839&amp;h=217&amp;f=png&amp;s=15043" alt=""></p><h5 id="3-ClassPath环境变量"><a href="#3-ClassPath环境变量" class="headerlink" title="3.ClassPath环境变量"></a>3.ClassPath环境变量</h5><p>变量名：ClassPath</p><p>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p><p><strong>注意前面有一个实心点的</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a6c9e2f6b1c1?w=839&amp;h=217&amp;f=png&amp;s=15208" alt=""></p><h4 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h4><p><a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="noopener">http://tools.android-studio.org/index.php/sdk</a><br>直接选择自己的系统版本进行下载即可</p><h5 id="下载完之后还需要配置好系统环境变量"><a href="#下载完之后还需要配置好系统环境变量" class="headerlink" title="下载完之后还需要配置好系统环境变量"></a>下载完之后还需要配置好系统环境变量</h5><p>变量名：ANDROID_HOME    </p><p>变量值：C:\SDK（SDK安装地址）</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a6fd9f4e8659?w=839&amp;h=217&amp;f=png&amp;s=13920" alt=""></p><p>变量名：PATH<br>变量值：;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a70f8f0c3df1?w=677&amp;h=664&amp;f=png&amp;s=60894" alt=""></p><p>你是win 10 操作系统就和我这样在 Path 上添加即可，上面的变量每一个分号代表一个值</p><h4 id="打开SDK-Manager来安装工具"><a href="#打开SDK-Manager来安装工具" class="headerlink" title="打开SDK Manager来安装工具"></a>打开SDK Manager来安装工具</h4><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a74468873278?w=974&amp;h=263&amp;f=png&amp;s=36855" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a74af8c3991d?w=451&amp;h=40&amp;f=png&amp;s=3908" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a74d7018b4a6?w=209&amp;h=40&amp;f=png&amp;s=1672" alt=""></p><p>点击右下角的安装按钮就行安装即可，如果下载过慢可能需要科学上网。</p><h3 id="2-使用-adb"><a href="#2-使用-adb" class="headerlink" title="2.使用 adb"></a>2.使用 adb</h3><h4 id="1-启动-adb-服务："><a href="#1-启动-adb-服务：" class="headerlink" title="1)启动 adb 服务："></a>1)启动 adb 服务：</h4><p><code>adb start-server</code></p><p>在对手机进行 adb 调试的时候，需要先将手机打开开发者模式，并且需要USB调试</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a7fb13ae8595?w=554&amp;h=1010&amp;f=png&amp;s=242348" alt=""></p><p>只有这样才可以进行调试。</p><h4 id="2-查看-adb-版本："><a href="#2-查看-adb-版本：" class="headerlink" title="2)查看 adb 版本："></a>2)查看 adb 版本：</h4><p><code>adb version</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a8085df1d638?w=474&amp;h=115&amp;f=png&amp;s=11682" alt=""></p><h4 id="3-查看当前连接的安卓设备"><a href="#3-查看当前连接的安卓设备" class="headerlink" title="3)查看当前连接的安卓设备"></a>3)查看当前连接的安卓设备</h4><p><code>adb devices</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a81b67c2deae?w=706&amp;h=120&amp;f=png&amp;s=12687" alt=""><br><code>adb server version (36) doesn&#39;t match this client (40); killing...</code></p><p>这里面有个错误，这是因为我们电脑上装的 adb 版本和手机模拟器上的 adb 版本不一致，所以我们需要更改下模拟器的 adb 版本。</p><p><strong>1.找到adb安装地址</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a83edda40ca9?w=1408&amp;h=742&amp;f=png&amp;s=136711" alt=""></p><p><strong>2.在模拟器的安装地址内找到 adb</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a86050c3bc83?w=1408&amp;h=742&amp;f=png&amp;s=150166" alt=""></p><p><strong>3.将电脑的那三个adb 文件 覆盖到模拟器上的三个 adb 文件</strong><br>为了防止有不可避免的错误，可以先备份那三个被覆盖的文件，再把文件进行覆盖即可。</p><p>再在命令行进入到该目录进行查看版本<br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a8aef09d0c2a?w=493&amp;h=244&amp;f=png&amp;s=24429" alt=""><br>可以看到版本和之前的版本都一样了，都是 1.0.40.</p><p>我们还需要更改一个，</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a8c24dad18ae?w=998&amp;h=503&amp;f=png&amp;s=79955" alt=""></p><p>也是将他更改为 adb，只不过需要把文件名给更改，弄完之后就可以了。再输入查看连接的设备数就没问题了。<br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a8f2b7b98169?w=425&amp;h=138&amp;f=png&amp;s=7208" alt=""></p><p>这里没有连接设备，我们重启下模拟器就可以了。不是模拟器的话把数据线拔了重新插进去就可以了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a908affb850e?w=363&amp;h=242&amp;f=png&amp;s=14798" alt=""></p><p>这里就可以看到，有一台设备连接上来了，设备名为<strong>127.0.0.1：62001</strong>，这个只是个名字，并不是什么ip地址。</p><p><strong>如果你多开的话，第二台模拟器的名字就是 127.0.0.1:62025, 第三台就是在端口加一即可，往后的都是这样了</strong><br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a948ae23a33b?w=355&amp;h=135&amp;f=png&amp;s=7359" alt=""></p><p>如果你的是真实的手机的话，他的手机名称是一串包含数字和英文的字符串。</p><h4 id="4-进入连接手机的底层操作系统"><a href="#4-进入连接手机的底层操作系统" class="headerlink" title="4)进入连接手机的底层操作系统"></a>4)进入连接手机的底层操作系统</h4><p><code>adb -s 手机名 shell</code></p><p>如：<br><code>adb -s 127.0.0.1:62025 shell</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a97c0fdd011e?w=456&amp;h=127&amp;f=png&amp;s=7061" alt=""></p><p>这样子进入了，输入 exit 即可退出</p><h4 id="5-使用adb-安装-apk"><a href="#5-使用adb-安装-apk" class="headerlink" title="5)使用adb 安装 apk"></a>5)使用adb 安装 apk</h4><p><code>adb -s 手机名 install apk位置</code></p><p>如：<br><code>adb -s 127.0.0.1:62001 install F:\kaoyanbang.apk</code><br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a9c773fd5091?w=1719&amp;h=164&amp;f=png&amp;s=157317" alt=""></p><h4 id="6-使用-adb-卸载-apk"><a href="#6-使用-adb-卸载-apk" class="headerlink" title="6)使用 adb 卸载 apk"></a>6)使用 adb 卸载 apk</h4><p>卸载 apk 需要用到 apk 的包名，需要查看 apk 包名</p><h5 id="1-进入-Android-底层系统"><a href="#1-进入-Android-底层系统" class="headerlink" title="1.进入 Android 底层系统"></a>1.进入 Android 底层系统</h5><p><code>adb -s 127.0.0.1:62001 shell</code></p><h5 id="2-进入-data-app-目录"><a href="#2-进入-data-app-目录" class="headerlink" title="2.进入 data/app 目录"></a>2.进入 data/app 目录</h5><p><code>cd /data/app/</code></p><h5 id="3-查看当前文件夹内容"><a href="#3-查看当前文件夹内容" class="headerlink" title="3. 查看当前文件夹内容"></a>3. 查看当前文件夹内容</h5><p><code>ls</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686aa09cbdda326?w=660&amp;h=189&amp;f=png&amp;s=22091" alt=""></p><p>可以看到，下划线的那个就是我们刚才安装的 apk，那个就是他的包名。，复制报名进行退出</p><p>输入下面命令进行删除：<br><code>adb -s 127.0.0.1:62001 uninstall 包名</code></p><p>如：<br><code>adb -s 127.0.0.1:62001 uninstall com.tal.kaoyan</code><br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686aa3e4db9497e?w=695&amp;h=46&amp;f=png&amp;s=5908" alt=""></p><h4 id="7-手动连接手机"><a href="#7-手动连接手机" class="headerlink" title="7.手动连接手机"></a>7.手动连接手机</h4><p><code>adb connect 手机名</code></p><p>如果在查看设备没有连接上的话，就可以使用这个方法进行连接</p><h4 id="8-查看手机上所有的已安装软件的包名"><a href="#8-查看手机上所有的已安装软件的包名" class="headerlink" title="8.查看手机上所有的已安装软件的包名"></a>8.查看手机上所有的已安装软件的包名</h4><p>这个命令只能在只连接一台手机上使用，要不报错<br><code>adb -s 手机名 shell pm list package</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686aab84f255f8f?w=1198&amp;h=549&amp;f=png&amp;s=88111" alt=""></p><h4 id="8-从电脑端复制文件到手机端"><a href="#8-从电脑端复制文件到手机端" class="headerlink" title="8.从电脑端复制文件到手机端"></a>8.从电脑端复制文件到手机端</h4><p><code>adb -s 手机名 push 电脑端文件路径 手机端存储路径</code></p><p>如：<br><code>adb -s 127.0.0.1:62001 push F:\新建文本文档.txt /storage/emulated/legacy/Download/</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab05a82e544b?w=1011&amp;h=58&amp;f=png&amp;s=14751" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab09869a89f5?w=554&amp;h=1010&amp;f=png&amp;s=36578" alt=""></p><h4 id="9-从手机端移动文件到电脑端"><a href="#9-从手机端移动文件到电脑端" class="headerlink" title="9. 从手机端移动文件到电脑端"></a>9. 从手机端移动文件到电脑端</h4><p><code>adb -s 手机名 pull 手机端位置 电脑端位置</code></p><p>如：<br><code>adb -s 127.0.0.1:62001 pull /storage/emulated/legacy/Download/pic.jpg F:\WeGame</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab5a58cb309e?w=1005&amp;h=74&amp;f=png&amp;s=14928" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab62625c8f49?w=1275&amp;h=742&amp;f=png&amp;s=49682" alt=""></p><p><strong>注意：在移动到电脑端的时候，不能移动到根目录</strong></p><h4 id="10-使用-adb-截图"><a href="#10-使用-adb-截图" class="headerlink" title="10.使用 adb 截图"></a>10.使用 adb 截图</h4><p><code>adb -s 手机名 shell screencap 存储位置</code></p><p>如：<br><code>adb -s 127.0.0.1:62001 shell screencap /storage/emulated/legacy/Download/pic.jpg</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab7d81526990?w=988&amp;h=72&amp;f=png&amp;s=12213" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ab81c24da452?w=554&amp;h=1010&amp;f=png&amp;s=64094" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装adb&quot;&gt;&lt;a href=&quot;#1-安装adb&quot; class=&quot;headerlink&quot; title=&quot;1.安装adb&quot;&gt;&lt;/a&gt;1.安装adb&lt;/h3&gt;&lt;h4 id=&quot;安装jdk&quot;&gt;&lt;a href=&quot;#安装jdk&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="adb" scheme="http://sergiojune.com/categories/adb/"/>
    
    
      <category term="adb" scheme="http://sergiojune.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>安装docker及其简单操作</title>
    <link href="http://sergiojune.com/2019/01/20/%E5%AE%89%E8%A3%85docker%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://sergiojune.com/2019/01/20/安装docker及其简单的操作/</id>
    <published>2019-01-20T07:59:03.407Z</published>
    <updated>2019-01-20T08:14:10.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h3><p><a href="https://download.docker.com/win/stable/DockerToolbox.exe" target="_blank" rel="noopener">https://download.docker.com/win/stable/DockerToolbox.exe</a></p><p>点击上面链接直接就可以下载了，下载之后默认安装就可以了。</p><h3 id="2-打开Docker-Quickstart-Terminal"><a href="#2-打开Docker-Quickstart-Terminal" class="headerlink" title="2.打开Docker Quickstart Terminal"></a>2.打开Docker Quickstart Terminal</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a36fafbf71ef?w=102&amp;h=112&amp;f=png&amp;s=23075" alt=""></p><p>就是打开这个软件。</p><p><strong>注意：如果你之前安装了git的话，里面的目标需要自己手动配置下，需要手动找到给git的安装地址给更改</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a38d8b3edd26?w=572&amp;h=798&amp;f=png&amp;s=45341" alt=""></p><p>自己手动改下前面git的安装地址即可。</p><p>还有一个坑：就是点击之后，会下载一个东西：<strong>boot2docker.iso</strong>，这个需要科学上网。或者你可以直接在你安装的docker的地址复制这个文件到它指定的目录文件也可以。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a3adb14db3d2?w=1193&amp;h=141&amp;f=png&amp;s=34153" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a3b1c7038aa6?w=872&amp;h=480&amp;f=png&amp;s=55189" alt=""></p><p>把下面的文件复制到上上图中的指定地址也可以的。</p><p>复制之后再打开就可以了。<br><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a3e66d5b4427?w=1223&amp;h=639&amp;f=png&amp;s=36675" alt=""></p><h3 id="3-使用docker"><a href="#3-使用docker" class="headerlink" title="3.使用docker"></a>3.使用docker</h3><p>1）查看版本<br><code>docker version</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a3ffbf3921dd?w=1223&amp;h=639&amp;f=png&amp;s=88664" alt=""></p><p>2)运行 hello world<br><code>docker run hello-world</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a422de4b3378?w=1223&amp;h=639&amp;f=png&amp;s=95685" alt=""><br>这个会先在本地上查找有没有 hello-world 这个镜像，没有的话，就会在 docker hub 上下载到本地，然后在运行这个镜像。</p><p>我们还可以根据上面的提示运行一个 ubuntu 系统。<br><code>docker run -it ubuntu bash</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a448ce6f6283?w=1223&amp;h=639&amp;f=png&amp;s=71084" alt=""><br>这样子我们就进入这个 Ubuntu 系统内部了</p><p>退出这个系统输入<strong>exit</strong>即可</p><p>3)查看当前docker所运行的容器<br><code>docker ps -a</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a4cd311513e0?w=1540&amp;h=158&amp;f=png&amp;s=35049" alt=""></p><p>可以看到上面的容器的id、镜像、命令、状态和端口和容器名称（这个如果不指定名称的话会随机生成）</p><p>4)查看当前已下载的镜像<br><code>docker images</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a4dc3840617a?w=1068&amp;h=133&amp;f=png&amp;s=24887" alt=""></p><p>5)删除镜像<br><code>docker rmi ubuntu</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a4fad1e9c7f8?w=1715&amp;h=78&amp;f=png&amp;s=19117" alt=""><br><code>Error response from daemon: conflict: unable to remove repository reference &quot;ubuntu&quot; (must force) - container 8b7a4c6c7a10 is using its referenced image 1d9c17228a9e</code><br>这里看到会报错，因为还有一个地方用到这个镜像，需要先删除<strong>8b7a4c6c7a10</strong></p><p>删除<strong>8b7a4c6c7a10</strong><br><code>docker rm 8b7a4c6c7a10</code></p><p>再删除镜像<br><code>docker rmi ubuntu</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686a522310b1344?w=1241&amp;h=439&amp;f=png&amp;s=92213" alt=""><br>这样就删除成功了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-下载地址&quot;&gt;&lt;a href=&quot;#1-下载地址&quot; class=&quot;headerlink&quot; title=&quot;1.下载地址&quot;&gt;&lt;/a&gt;1.下载地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://download.docker.com/win/stable/Docker
      
    
    </summary>
    
      <category term="docker" scheme="http://sergiojune.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://sergiojune.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装mitmproxy以及遇到的坑和简单用法</title>
    <link href="http://sergiojune.com/2019/01/20/%E5%AE%89%E8%A3%85mitmproxy%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E5%92%8C%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <id>http://sergiojune.com/2019/01/20/安装mitmproxy以及遇到的坑和简单用法/</id>
    <published>2019-01-20T06:18:24.772Z</published>
    <updated>2019-01-20T06:19:15.957Z</updated>
    
    <content type="html"><![CDATA[<p>mitmproxy 是一款工具，也可以说是 python 的一个包，在命令行操作的工具。</p><p>MITM 即中间人攻击（Man-in-the-middle attack）</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26f9ef7f71?w=1064&amp;h=439&amp;f=jpeg&amp;s=30825" alt=""></p><p>使用这个工具可以在命令行上进行抓包，还可以对所抓到的包进行脚本处理，非常有用。</p><h3 id="安装-mitmproxy"><a href="#安装-mitmproxy" class="headerlink" title="安装 mitmproxy"></a>安装 mitmproxy</h3><p>安装这个我们必须先安装了 pip。 pip 在安装了 python之后自带的，如果你安装了 python 就可以忽略了，如何安装这里就不说了，只说安装 mitmproxy</p><p>打开命令行，输入 <strong>pip install mitmproxy</strong>  即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26f87ed164?w=1223&amp;h=639&amp;f=png&amp;s=32938" alt=""></p><p>按下回车即可下载</p><p>但是到最后下载失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Microsoft Visual C++ 14.0 is required. Get it with “Microsoft Visual C++ Build Tools”: http://landinghub.visualstudio.com/visual-cpp-build-tools</span><br></pre></td></tr></table></figure><p>是因为安装这个包的 window 系统需要首先安装 Microsoft Visual C++ V14.0以上 才行。</p><p>可以在<a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/zh-hans/downloads/</a> 直接下载即可，安装之后需要把 c++ de 库之类的东西都安装了，然后再在命令行进行安装 mitmproxy即可。</p><p>安装完之后查看 mitmproxy版本</p><p>命令行输入 <strong>mitmproxy –version</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26fb8f5401?w=1223&amp;h=639&amp;f=png&amp;s=30226" alt=""></p><p>显示错误，这是因为 window操作系统不支持使用 mitmproxy 这个命令，我们可以使用 mitmdump 或 mitmweb 代替。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26fac72494?w=1223&amp;h=639&amp;f=jpeg&amp;s=90081" alt=""></p><p>这样就成功了。</p><h2 id="如何使用-mitmproxy抓包"><a href="#如何使用-mitmproxy抓包" class="headerlink" title="如何使用 mitmproxy抓包"></a>如何使用 mitmproxy抓包</h2><p>开启抓包：<strong>mitmdump</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26fb265424?w=1223&amp;h=639&amp;f=jpeg&amp;s=101860" alt=""></p><p>这样子就是开始抓包了，监听了所有的地址，端口是 8080，如果需要改端口号，可以按 ctrl + c 退出抓包，然后输入下列命令：</p><p><strong>mitmdump -p 8889</strong></p><p>这样子就把端口号改成 8889 了</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e26f8e82cd3?w=1223&amp;h=639&amp;f=jpeg&amp;s=117131" alt=""></p><p>如果需要抓手机的包的话，就需要在你连接的 wifi 修改代理</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e271d8f11e2?w=554&amp;h=1010&amp;f=jpeg&amp;s=58624" alt=""></p><p>上面的主机名字是 你电脑抓包的 ip 地址，端口号是刚才设置的端口号。设置完了打开浏览器查看。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e271c60062b?w=554&amp;h=1010&amp;f=jpeg&amp;s=34190" alt=""></p><p>发现需证书有问题，我们还需要安装 mitmproxy 提供的证书，要不抓包失败。</p><p>安装证书：浏览器输入 <strong>mitm.it</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e272eba5a6a?w=580&amp;h=965&amp;f=jpeg&amp;s=54381" alt=""></p><p>然后根据你的手机系统进行安装即可。</p><p>然后就可以进行抓包了。在浏览器输入 <strong>baidu.com</strong> 就可以看到下面内容了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e271e210533?w=1223&amp;h=639&amp;f=jpeg&amp;s=368233" alt=""></p><p>电脑端的也是这样差不多，都是设置代理后安装证书，这里就不多说了。</p><h2 id="抓包之后的操作"><a href="#抓包之后的操作" class="headerlink" title="抓包之后的操作"></a>抓包之后的操作</h2><p>由于在 window上操作，只能使用 mitmdump 和 mitmweb这两个命令，mitmdump 命令是没有界面，只能进行默默地抓包，不能进行数据包的查看和过滤。而 mitmweb 和在一个网页上进行抓包的调试。所以下面我们用 mitmweb 来进行调试。</p><h4 id="1-开始抓包"><a href="#1-开始抓包" class="headerlink" title="1.开始抓包"></a><strong>1.开始抓包</strong></h4><p><strong>mitmweb -p 8889</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e2722c3ddf5?w=1920&amp;h=843&amp;f=jpeg&amp;s=284948" alt=""></p><p>在你输入 baidu.com 的时候就会看到这些包了。</p><p>查看包的请求信息和响应信息只需要点击相对应的包即可。其他的就不多说了。</p><p>在 mitmproxy 上运行 python脚本</p><p>mitmproxy 的强大之处就在于它能够运行 python 脚本来处理相关的请求，现在就来看看如何处理吧。</p><p><strong>mitmdump -p 889 -s mitm.py</strong></p><p>这个就是在抓包的同时运行了 mitm.py 的脚本了，代码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 必须这样写 def request(flow):  print(flow.request.headers)  # 打印请求头</span><br></pre></td></tr></table></figure><p>这个是打印抓到的请求头，<strong>方法名和参数的名称是固定的</strong>，写错了就运行不了这个脚本。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e272ec9b454?w=845&amp;h=83&amp;f=png&amp;s=12223" alt=""></p><p>这样子就开始了，然后在手机上打开网页。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e2749b004c0?w=1920&amp;h=1030&amp;f=jpeg&amp;s=1153155" alt=""></p><p>这样子就把他们的请求头给输出了。</p><p>但是输出并不明显，我们可以使用里面的一个日志模块来输出，这样子就会显示出不同的颜色了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e2740d7c008?w=1035&amp;h=240&amp;f=png&amp;s=28432" alt=""></p><p>命令行上显示这样：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e274e66b826?w=1920&amp;h=1030&amp;f=jpeg&amp;s=1031126" alt=""></p><p>这样子就清楚多了。</p><p>除了上面的请求头，我们还可以访问他们的请求方法，请求路径等。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e274b9e1835?w=1034&amp;h=276&amp;f=jpeg&amp;s=64649" alt=""></p><p>响应的请求也可以获取：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/20/16869e2752f1c972?w=793&amp;h=148&amp;f=png&amp;s=18753" alt=""></p><p>同样，这里的<strong>方法名和参数也是固定</strong>的，不写这个会捕捉不到。</p><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mitmproxy 是一款工具，也可以说是 python 的一个包，在命令行操作的工具。&lt;/p&gt;
&lt;p&gt;MITM 即中间人攻击（Man-in-the-middle attack）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/
      
    
    </summary>
    
      <category term="抓包" scheme="http://sergiojune.com/categories/%E6%8A%93%E5%8C%85/"/>
    
    
      <category term="mitmproxy" scheme="http://sergiojune.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>为了一窥国足输韩国之后人们的评论，我爬了懂球帝APP</title>
    <link href="http://sergiojune.com/2019/01/17/%E4%B8%BA%E4%BA%86%E4%B8%80%E7%AA%A5%E5%9B%BD%E8%B6%B3%E8%BE%93%E9%9F%A9%E5%9B%BD%E4%B9%8B%E5%90%8E%E4%BA%BA%E4%BB%AC%E7%9A%84%E8%AF%84%E8%AE%BA%EF%BC%8C%E6%88%91%E7%88%AC%E4%BA%86%E6%87%82%E7%90%83%E5%B8%9DAPP/"/>
    <id>http://sergiojune.com/2019/01/17/为了一窥国足输韩国之后人们的评论，我爬了懂球帝APP/</id>
    <published>2019-01-17T09:45:38.189Z</published>
    <updated>2019-01-17T09:50:33.386Z</updated>
    
    <content type="html"><![CDATA[<p>如果你是个足球迷的话，估计或多或少都会看一下昨晚中国踢韩国的比赛，因为不管他们踢得怎样，我们还是深爱着他们，那句话说得好，“国足虐我千百遍，我待国足如初恋”。更何况他们两场都踢赢了，所以面对第三场实力有点强的韩国队也是希望能赢的，毕竟我们也在十二强赛上赢过他们！  </p><p>如果你不是个足球迷，但你也可以看看，可以学习下如何去抓APP的数据。好了，废话不多说，开始抓取！</p><h3 id="1-抓包分析请求"><a href="#1-抓包分析请求" class="headerlink" title="1.抓包分析请求"></a>1.抓包分析请求</h3><p>手机抓包我们可以用 Fiddler 软件来抓取，如果不懂怎样抓的话，可以看看这篇文章<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247484504&amp;idx=1&amp;sn=576c84039bb066ab91a28f2c9ef48b21&amp;chksm=fb4a7ef4cc3df7e215f1ada6af91969216a738ba03b4d9e94e371a6b3d0eededdbe21c50a879&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">抓包软件&nbsp;Fiddler&nbsp;了解一下？</a></p><p>配置好之后，开始抓包。</p><p>首先找到需要爬取的文章</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c60f999c0d?w=1080&amp;h=2248&amp;f=jpeg&amp;s=174924" alt=""></p><p>懂球帝app截图</p><p>文章链接为：<a href="https://m.dongqiudi.com/article_share/896482.html" target="_blank" rel="noopener">https://m.dongqiudi.com/article_share/896482.html</a></p><p>在配置好抓包之后，点击下方的评论，可以看到</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c60fbba7dc?w=1080&amp;h=1920&amp;f=jpeg&amp;s=206923" alt=""></p><p>评论截图</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c60fc79637?w=884&amp;h=787&amp;f=jpeg&amp;s=127802" alt=""></p><p>抓包截图</p><p>很容易就找到文章评论的请求，就是下面这个  </p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c61079f531?w=1080&amp;h=866&amp;f=jpeg&amp;s=154457" alt=""></p><p>可以看到请求的链接为：<a href="https://api.dongqiudi.com/v2/article/896482/comment?sort=down&amp;version=177" target="_blank" rel="noopener">https://api.dongqiudi.com/v2/article/896482/comment?sort=down&amp;version=177</a> ，</p><p>请求方法为GET，接下来就好办了，我们再看看滑下去查看更多的评论的请求。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c611553783?w=1078&amp;h=486&amp;f=jpeg&amp;s=30488" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c6136f8295?w=1078&amp;h=486&amp;f=jpeg&amp;s=30517" alt="">  </p><p>可以看到，向下翻页多了两个参数，不过容易知道，next 参数就是一个时间戳，而 pn 参数就是页数吧，从 0 开始的。  </p><p>但是怎样判断所有评论已经爬完了呢？我们可以看看数据的详情，下面将 json 数据格式化，在下图可以看到在 data 里面有下一页的数据，那这就容易了，哈哈</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c62d36d6f6?w=918&amp;h=687&amp;f=jpeg&amp;s=79617" alt=""></p><p>分析了，接下来就是代码部分了。</p><h3 id="2-代码部分"><a href="#2-代码部分" class="headerlink" title="2.代码部分"></a>2.代码部分</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c62e091fc0?w=1080&amp;h=523&amp;f=jpeg&amp;s=31114" alt=""></p><p>这是主体部分，先从第一个评论链接中爬取评论以及找出下一页的评论地址进而继续爬取。这里是把数据库存进 mongodb 中。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c63029a93e?w=1080&amp;h=402&amp;f=jpeg&amp;s=30989" alt=""></p><p>主要的爬取逻辑，可以看出来是比较简单的，因为没有涉及到什么加密参数之类的，但是有一个问题，每一次进行请求的时候，有时候是会返回带有相同的评论的，所以我们也需要在数据库简单地进行去重。</p><p>下面是入库和去重的代码部分</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c631e19105?w=869&amp;h=447&amp;f=jpeg&amp;s=33556" alt=""></p><p>剩下的就没有了。</p><h3 id="3-查看所得的数据"><a href="#3-查看所得的数据" class="headerlink" title="3.查看所得的数据"></a>3.查看所得的数据</h3><p>由于数据分析还不熟悉，所以暂时只制作词云图。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c636dae779?w=1058&amp;h=496&amp;f=jpeg&amp;s=47380" alt=""></p><p>需要先将数据写到文本上</p><p>词云图是：  </p><p><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685b2c638f18834?w=701&amp;h=556&amp;f=jpeg&amp;s=24116" alt=""></p><p>可以看出，昨晚国足输一场，也被很多人喷了，但是还是有很多人是一直支持的，永远都为国足加油，里面也说到了，中国和韩国是有一定差距的，而且还有点大，输了也正常不过了，没必要喷，再说我觉得昨晚的比赛已经比第一场的比赛好很多(第二次没看)，还是有进步的，我对国足未来淘汰赛也是充满期望的，我相信能走得更远！</p><p>下一场 踢泰国， 20号，有人看吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你是个足球迷的话，估计或多或少都会看一下昨晚中国踢韩国的比赛，因为不管他们踢得怎样，我们还是深爱着他们，那句话说得好，“国足虐我千百遍，我待国足如初恋”。更何况他们两场都踢赢了，所以面对第三场实力有点强的韩国队也是希望能赢的，毕竟我们也在十二强赛上赢过他们！  &lt;/p&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="足球" scheme="http://sergiojune.com/tags/%E8%B6%B3%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>学习用python操作mysql</title>
    <link href="http://sergiojune.com/2019/01/14/%E5%AD%A6%E4%B9%A0%E7%94%A8python%E6%93%8D%E4%BD%9Cmysql/"/>
    <id>http://sergiojune.com/2019/01/14/学习用python操作mysql/</id>
    <published>2019-01-14T07:57:01.219Z</published>
    <updated>2019-01-14T08:11:19.736Z</updated>
    
    <content type="html"><![CDATA[<p style="letter-spacing: 2px;">首先祝大家新年快乐哈！学生的估计明天也要上课了，工作的估计早就去上班了，我也快要上课了，哈哈，新年这段时间一直没有写过文章，一直忙于跑亲戚和学习，感觉有点对不起关注我的粉丝。所以，今天决定抽空写一篇技术文章来给大家看看，继上篇写了入门mysql之后，还没有学习如何用python来操作数据库，那我今天就带大家来学习如何用python操操作数据库。<br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">还有文末有福利，这算是给大家的新年礼物(记得点赞哦)</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><section class="editor"><section style="margin:10px auto;"><section style="width: 100%; font-size: 18px; height: 40px; line-height: 40px; border-bottom-width: 2px; border-bottom-style: solid; border-bottom-color: rgb(30, 28, 28); text-align: center; box-sizing: border-box;" data-width="100%">进入正题</section><section style="width: 100%; margin-top: 1px; border-top-style: solid; border-top-width: 1px; border-top-color: rgb(30, 28, 28); box-sizing: border-box;" data-width="100%"></section></section></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">工欲善其事，必先利其器。所以第一步，我们先下载第三方库。在这里，我用到的是pymysql库。</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">下载库：在命令行输入</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="hljs nginx" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><span class="hljs-attribute" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">pip</span> install pymysql<br></code></pre></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">下载后可检验一下是否成功下载。直接在命令行进入python然后导库即可</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="hljs ruby" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><span class="hljs-symbol" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">C:</span>\Users\June&gt;python<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span>Python <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3.6</span>.<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span> <span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">|Anaconda, Inc.|</span> (default, Oct <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2017</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">03</span><span class="hljs-symbol" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">:</span><span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span><span class="hljs-symbol" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">:</span><span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">45</span>) [MSC v.<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1900</span> <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">64</span> bit (AMD64)] on win32<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>Type <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">“help”</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">“copyright”</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">“credits”</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">or</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">“license”</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> more information.<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">4</span><span class="hljs-meta" style="font-size: inherit; line-height: inherit; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">&gt;&gt;</span>&gt; import pymysql<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span><span class="hljs-meta" style="font-size: inherit; line-height: inherit; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">&gt;&gt;</span>&gt;<br></code></pre></section><p style="letter-spacing: 2px;">看到这个画面就说明下载成功了，接下来学习如何操作数据库了！！！</p><p style="letter-spacing: 2px;"><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">1</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; font-size: 18px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p><span style="font-family: 微软雅黑; font-size: 16px;"><span style="letter-spacing: 2px; line-height: 25.6px; white-space: pre-wrap;">连接数据库</span></span></p></section></section></section></section></section><p><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="hljs coffeescript" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">import</span> pymysql<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 连接数据库</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>db = pymysql.connect(host=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘127.0.0.1’</span>,user=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘root’</span>,passwd=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘your password’</span>,db=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘news’</span>,port=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3306</span>,charset=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘utf8’</span>)<br></code></pre></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">以上的参数是必填的，</p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="letter-spacing: 2px;"><strong>host</strong>: 这个是ip地址，因为我这里是本地的，所以填127.0.0.1，也可以填localhost。</p></li><li><p style="letter-spacing: 2px;"><strong>user</strong>：用户名，如果你也是本地的，就填root好了</p></li><li><p style="letter-spacing: 2px;"><strong>passwd</strong>：这个是密码，填上你自己设的密码就可以了</p></li><li><p style="letter-spacing: 2px;"><strong>db</strong>：这个是数据库名，我这里选的是news数据库</p></li><li><p style="letter-spacing: 2px;"><strong>port</strong>：这个是端口，本地的一般都是3306</p></li><li><p style="letter-spacing: 2px;"><strong>charset</strong>：这个是编码方式，要和你数据库的编码方式一致，要不会连接失败</p></li></ul><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><strong>连接上了，怎么验证呢？这里我们可以选择查一条数据</strong></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="hljs python" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 2</span> db = pymysql.connect(host=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘127.0.0.1’</span>,user=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘root’</span>,passwd=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘your password’</span>,db=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘news’</span>,port=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3306</span>,charset=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘utf8’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 3</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 检验数据库是否连接成功</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 4</span> cursor = db.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 5</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 这个是执行sql语句，返回的是影响的条数</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 6</span> data = cursor.execute(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘SELECT <em> FROM <code>new</code>‘</em></span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 7</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 得到一条数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 8</span> one = cursor.fetchone()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 9</span> print(data)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span> print(one)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> pymysql.Error <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘操作数据库失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">14</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">finally</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 如果连接成功就要关闭数据库</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">16</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> db:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">17</span> db.close()<br></code></pre></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">代码解读：因为在连接数据库中，有时会发生连接失败等异常，所以这里就进行捕捉异常，这里的异常都是在 <strong>pymsql.Error </strong>里面。上面的代码看不懂也没关系，因为我接下来会说，如果运行后有结果证明连接成功。</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><strong>在用完后，一定要记得关闭数据库连接，防止资源泄露问题。</strong></p><p style="letter-spacing: 2px;"><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">2</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p style=""><span style="font-family:微软雅黑">对数据进行查询</span></p></section></section></section></section></section><p><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">import</span> pymysql<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 2</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 3</span> conn = pymysql.connect(host=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘127.0.0.1’</span>,user=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘root’</span>,passwd=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘password’</span>,db=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘news’</span>,charset=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘utf8’</span>,port=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3306</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 4</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 这个是光标，用来操作数据库语句</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 5</span> cursor = conn.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 6</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 执行sql语句</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 7</span> cursor.execute(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘SELECT  FROM <code>new</code>‘</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 8</span> print(cursor.fetchone())<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 9</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 关闭光标</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span> cursor.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> pymysql.Error <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘操作数据库失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">14</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">finally</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> conn:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">16</span> conn.close()<br></code></pre></section><p style="letter-spacing: 2px;">代码解读：</p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="letter-spacing: 2px;"><strong>cursor()</strong>:这个是光标，用来执行mysql语句的，用完后也是需要关闭的</p></li><li><p style="letter-spacing: 2px;"><strong>excute</strong><strong>()</strong>：这个是执行语句，执行参数的mysql语句</p></li><li><p style="letter-spacing: 2px;"><strong>fetchone()</strong>：这个是查看执行语句后的一条数据</p></li><li><p style="letter-spacing: 2px;"><strong>fetchall()</strong>：这个是查看所有数据</p></li></ul><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">在查询数据后，返回的是一整条数据，有没有可以按字典形式来查询的呢？来试试！</p><p style="letter-spacing: 2px;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>print(cursor.fetchone()[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘name’</span>])<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>Traceback (most recent call last):<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">4</span> File <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">“E:/anaconda/python_project/mysql_test/test2.py”</span>, line <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">8</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> &lt;module&gt;<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span> print(cursor.fetchone()[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘name’</span>])<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">6</span>TypeError: tuple indices must be integers <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">or</span> slices, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">not</span> str<br></code></pre></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">查了之后，编译器想都不想就给了我这个错误，说这是个元组，不能这样操作。</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">虽然python没有提供，但是我们可以手动转成字典来查询啊</p><p style="letter-spacing: 2px;">cursor这里有个属性：<strong>description</strong>。获取的是数据库每个栏位情况，如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>print(cursor.description)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>((<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">253</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">253</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">50</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">50</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">253</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2000</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2000</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">19</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">19</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">253</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">True</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">253</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">True</span>), (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">False</span>)<br></code></pre></section><p><br></p><p>所以，我们利用这个属性手动生成字典</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 将一条数据转成字典方便查找</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span>new = dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],[x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.fetchone()]))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>print(new)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>{<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘NBA’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘考辛斯跟腱撕裂赛季报销 浓眉詹皇发声祝福’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘他遭遇左脚跟腱撕裂，将缺席赛季剩下的比赛。这无疑对考辛斯和鹈鹕队都是一个重大的打击’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3560</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>: datetime.datetime(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2018</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span>), <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘xiaoylin’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘腾讯体育’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>}<br></code></pre></section><p>这里利用zip函数和列表生成式来一行代码就生成成功了</p><p><br></p><p>用字典来查询，现在就可以了</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>print(new[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>])<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>考辛斯跟腱撕裂赛季报销 浓眉詹皇发声祝福<br></code></pre></section><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">但是，上面的只是一条数据的，如果是多条的呢？再按上面的方法就行不通了。这时就需要用到map函数了</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">new2dict</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(new)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],[x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> new]))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>news_list = list(map(new2dict,cursor.fetchall()))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">4</span>print(news_list)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">6</span>[{<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘NBA’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘考辛斯跟腱撕裂赛季报销 浓眉詹皇发声祝福’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘他遭遇左脚跟腱撕裂，将缺席赛季剩下的比赛。这无疑对考辛斯和鹈鹕队都是一个重大的打击’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3560</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>: datetime.datetime(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2018</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span>), <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘xiaoylin’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘腾讯体育’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>}, {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘NBA’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘火箭挖21分大哈登得背锅 连遭浓眉大帽太尴尬’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘火箭在客场以113-115惜败于鹈鹕，4连胜终结。詹姆斯-哈登出战34分钟16投5中，其中三分球9投只有1中，罚球14罚12中，拿到23分、11助攻、5篮板但也有4次失误，其在场正负值为尴尬的-12分’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">7520</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>: datetime.datetime(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2018</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>), <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘youngcao’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘腾讯体育’</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>}, {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">4</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘英超’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘足总杯-曼联4-0英乙球队晋级 桑神首秀造两球’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘2017-18赛季英格兰足总杯第4轮，曼联客场4比0击败英乙球队约维尔，顺利晋级下一轮。桑切斯迎来曼联首秀，并制造了两个入球’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">6560</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>: datetime.datetime(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2018</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">49</span>), <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘ricazhang’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘腾讯体育’</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>}, {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘id’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘英超’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘这才配红魔7号！桑神首秀大腿级表演 回击嘘声质疑’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘在今天凌晨对阵约维尔的首秀也值得期待。虽然在登场的72分钟时间里没有进球，但送出1次助攻且有有6次威胁传球的数据还是十分亮眼’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘view_count’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2760</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘release_time’</span>: datetime.datetime(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">2018</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">6</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span>), <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘author’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘yaxinhao’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘from’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘腾讯体育’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘is_valibale’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span>}]<br></code></pre></section><p style="letter-spacing: 2px;">这里很巧妙的利用了map函数，因为多条数据就可以进行迭代了，需要操作每条数据，这样就可以想到map函数</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><strong>接下来我们再用面向对象的方法来用python进行查询数据库</strong></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">import</span> pymysql<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 2</span><span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">class</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">MysqlSearch</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(object)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 3</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">get_conn</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 4</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘’’连接mysql数据库’’’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 5</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 6</span> self.conn = pymysql.connect(host=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘127.0.0.1’</span>,user=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘root’</span>,passwd=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘your password’</span>,port=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3306</span>,charset=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘utf8’</span>,db=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘news’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 7</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> pymysql.Error <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 8</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 9</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘连接数据库失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">close_conn</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘’’关闭数据库’’’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">14</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> self.conn:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> self.conn.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">16</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> pymysql.Error <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">17</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">18</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘关闭数据库失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">19</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">get_one</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">21</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘’’查询一条数据’’’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">22</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">23</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 这个是连接数据库</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">24</span> self.get_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">25</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 查询语句</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">26</span> sql = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘SELECT <em> FROM <code>new</code> WHERE <code>type</code>=%s’</em></span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 这个光标用来执行sql语句</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">28</span> cursor = self.conn.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">29</span> cursor.execute(sql,(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘英超’</span>,))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">30</span> new = cursor.fetchone()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">31</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 返回一个字典，让用户可以按数据类型来获取数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">32</span> new_dict = dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],new))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">33</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 关闭cursor</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">34</span> cursor.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">35</span> self.close_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">36</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> new_dict<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">37</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> AttributeError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">38</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">39</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">40</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">get_all</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">41</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘’’获取所有结果’’’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">42</span> sql = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘SELECT  FROM <code>new</code> ‘</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">43</span> self.get_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">44</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">45</span> cursor = self.conn.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">46</span> cursor.execute(sql)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">47</span> news = cursor.fetchall()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">48</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 将数据转为字典，让用户根据键来查数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">49</span> news_list =list(map(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">lambda</span> x:dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],[d <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> d <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> x])),news))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">50</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 这样也行,连续用两个列表生成式</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">51</span> news_list = [dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],row)) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> row <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> news]<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">52</span> cursor.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">53</span> self.close_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">54</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> news_list<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">55</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> AttributeError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">56</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">57</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">58</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">59</span><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">main</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">()</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">60</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 获取一条数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">61</span> news = MysqlSearch()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">62</span> new = news.get_one()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">63</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> new:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">64</span> print(new)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">65</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">else</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">66</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘操作失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">67</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">68</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 获取多条数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">69</span> news = MysqlSearch()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">70</span> rest = news.get_all()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">71</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> rest:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">72</span> print(rest)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">73</span> print(rest[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">7</span>][<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>],rest[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">7</span>][<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>])<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">74</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘类型：{0},标题：{1}’</span>.format(rest[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>][<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>],rest[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span>][<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>]))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">75</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> row <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> rest:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">76</span> print(row)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">77</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">else</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">78</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘没有获取到数据’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">79</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">80</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> <strong>name</strong> == <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘<strong>main</strong>‘</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">81</span> main()<br></code></pre></section><p style="letter-spacing: 2px;">这样就可以通过实例的方法来进行查询数据库了</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">我们还可以根据页数来进行查询指定的数据数</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 1</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">get_more</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self,page,page_size)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 2</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘’’查多少页的多少条数据’’’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 3</span> offset = (page<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">-1</span>)<em>page_size<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 4</span> sql = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘SELECT </span></em> FROM <code>new</code> LIMIT %s,%s’<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 5</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 6</span> self.get_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 7</span> cursor = self.conn.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 8</span> cursor.execute(sql,(offset,page_size,))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 9</span> news = [dict(zip([x[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span>] <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.description],new)) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> new <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> cursor.fetchall()]<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span> cursor.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span> self.close_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> news<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> AttributeError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">14</span> print(e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">None</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">16</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">17</span><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">main</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">()</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">18</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">#获取某页的数据</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">19</span> news = MysqlSearch()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span> new = news.get_more(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">3</span>,<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">5</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">21</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> new:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">22</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">for</span> row <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">in</span> new:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">23</span> print(row)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">24</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">else</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">25</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘获取数据失败’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">26</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> <strong>name</strong> == <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘<strong>main</strong>‘</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">28</span> main()<br></code></pre></section><p style="letter-spacing: 2px;">利用的是mysql的<strong><span style="line-height: inherit;">limit</span></strong><span style="line-height: inherit;">关键字，还有其他的，比如进行排序分组的感兴趣的可以自己尝试下</span></p><p style="letter-spacing: 2px;"><span style="line-height: inherit;"><br></span></p><p style="letter-spacing: 2px;"><span style="line-height: inherit;"></span></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">3</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; font-size: 18px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p>增加数据到数据库</p></section></section></section></section></section><p style="letter-spacing: 2px;"><span style="line-height: inherit;"></span><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important; background: rgb(40, 43, 46);"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 1</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">add_one</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">(self)</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 2</span> sql = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘INSERT INTO <code>new</code>(<code>title</code>,<code>content</code>,<code>type</code>,<code>view_count</code>,<code>release_time</code>) VALUE(%s,%s,%s,%s,%s)’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 3</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 4</span> self.get_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 5</span> cursor = self.conn.cursor()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 6</span> cursor.execute(sql, (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘title’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘content’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘type’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘1111’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘2018-02-01’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 7</span> cursor.execute(sql, (<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘标题’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘内容’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘类型’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘0000’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘2018-02-01’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 8</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 一定需要提交事务，要不不会显示，只会占位在数据库</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"> 9</span> self.conn.commit()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">10</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">1</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">11</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> AttributeError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">12</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘Error:’</span>, e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">13</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">14</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">except</span> TypeError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">15</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘Error:’</span>, e)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">16</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 发生错误还提交就是把执行正确的语句提交上去</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">17</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># self.conn.commit()</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">18</span> <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"># 下面这个方法是发生异常就全部不能提交,但语句执行成功的就会占位</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">19</span> self.conn.rollback()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">20</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">return</span> <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">0</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">21</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">finally</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">22</span> cursor.close()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">23</span> self.close_conn()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">24</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">25</span> <span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">main</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">()</span>:</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">26</span> news = OperateSQL()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">27</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> news.add_one():<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">28</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘增加数据成功’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">29</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">else</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">30</span> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘发生异常，请检查！！！’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">31</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">32</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">if</span> <strong>name</strong> == <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">‘<strong>main</strong>‘</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;">33</span> main()<br></code></pre></section><p style="letter-spacing: 2px;">因为是增加数据，所以需要提交事务，这就需要用到<strong>cursor.commit()</strong>来进行提交，在增加数据后，如果不提交，数据库就不会显示。</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">还有修改数据和删除数据就不贴出来了，只是把上面的sql变量的语句改成修改或者删除的语句就可以了，如果你还不会，建议练习下</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><section class="editor"><p><strong>END</strong></p></section><p style="letter-spacing: 2px;">代码我放在github了，网站为<a href="https://github.com/SergioJune/gongzhonghao_code，有兴趣的可以去看看，如果可以的话希望给个star哈！" _src="https://github.com/SergioJune/gongzhonghao_code，有兴趣的可以去看看，如果可以的话希望给个star哈！" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code，有兴趣的可以去看看，如果可以的话希望给个star哈！</a></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">这篇文章只适合入门的，如果需要学习更多的话可以去查看pymysql的文档<a href="http://pymysql.readthedocs.io/en/latest/" target="_blank" rel="noopener">http://pymysql.readthedocs.io/en/latest/</a> 。</p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px; text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.329412) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802109804.png" height="auto" border="0" alt="1802109804.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802109804.png"></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px; text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p style="letter-spacing: 2px;"><span style="font-size: 14px;"><br></span></p><p style="letter-spacing: 2px; text-align: center;"><span style="font-size: 14px;">一个专注于python的公众号</span></p>]]></content>
    
    <summary type="html">
    
      还没有学习如何用python来操作数据库，那我今天就带大家来学习如何用python操操作数据库。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
      <category term="数据库" scheme="http://sergiojune.com/categories/python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://sergiojune.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>谈谈如何抓取ajax动态网站</title>
    <link href="http://sergiojune.com/2019/01/14/%E8%B0%88%E8%B0%88%E5%A6%82%E4%BD%95%E6%8A%93%E5%8F%96ajax%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99/"/>
    <id>http://sergiojune.com/2019/01/14/谈谈如何抓取ajax动态网站/</id>
    <published>2019-01-14T07:56:55.592Z</published>
    <updated>2019-01-14T08:13:26.634Z</updated>
    
    <content type="html"><![CDATA[<p data-mpa-powered-by="yiban.io" style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">什么是ajax呢，简单来说，就是加载一个网页完毕之后，有些信息你你还是看不到，需要你点击某个按钮才能看到数据，或者有些网页是有很多页数据的，而你在点击下一页的时候，网页的url地址没有变化，但是内容变了，这些都可以说是ajax。如果还听不懂，我给你看看百度百科的解释吧，下面就是。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><blockquote style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><p style="word-break: normal !important;">Ajax 即“Asynchronous&nbsp;Javascript&nbsp;And&nbsp;XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><p style="word-break: normal !important;">Ajax = 异步&nbsp;JavaScript&nbsp;和&nbsp;XML（标准通用标记语言的子集）。</p><p style="word-break: normal !important;">Ajax 是一种用于创建快速动态网页的技术。</p><p style="word-break: normal !important;">Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。&nbsp;[</p><p style="word-break: normal !important;">通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p style="word-break: normal !important;">传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p></blockquote><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">下面说下例子，我抓取过的ajax网页最难的就是网易云音乐的评论，感兴趣的可以看看<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483673&amp;idx=1&amp;sn=6c89eb9474d2076afb6405a9fd972e4f&amp;chksm=fb4a7bb5cc3df2a3ca3235ebe8bddf635839e5fd5a1b998b08dae521d449ee4388ae6ed7bbda&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483673&amp;idx=1&amp;sn=6c89eb9474d2076afb6405a9fd972e4f&amp;chksm=fb4a7bb5cc3df2a3ca3235ebe8bddf635839e5fd5a1b998b08dae521d449ee4388ae6ed7bbda&amp;scene=21#wechat_redirect" style="word-break: normal !important;">利用python爬取网易云音乐，并把数据存入mysql</a></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这里的评论就是ajax加载的，其他的那个抓今日头条妹子图片的也算是ajax加载的，只不过我把它简单化了。还有很多，就不说了，说下我今天要说的ajax网站吧！</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 18px; word-break: normal !important;"><strong style="word-break: normal !important;"><a href="http://www.kfc.com.cn/kfccda/storelist/index.aspx" target="_blank" rel="noopener">http://www.kfc.com.cn/kfccda/storelist/index.aspx</a></strong></span></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 16px; word-break: normal !important;">这个是肯德基的门面信息</span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KOo6GA2uibDZJLTTkia8yelFORKAPu2xq7VtMa9LdgljuWLMt6VJUrk2ww/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KOo6GA2uibDZJLTTkia8yelFORKAPu2xq7VtMa9LdgljuWLMt6VJUrk2ww/640"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 16px; word-break: normal !important;">这里有很多页数据，每一页的数据都是ajax加载的。如果你直接用python请求上面那个url的话，估计什么数据都拿不到，不信的话可以试试哈。这时候，我们照常打开开发者工具。先把所有请求清楚，把持续日志打上勾，然后点击下一页，你会看到</span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KO8ujDSZnYNN9ziaFKfU6sY8sfmtC8675bgRCIFiavOl5JNlVsFib8I4PRA/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KO8ujDSZnYNN9ziaFKfU6sY8sfmtC8675bgRCIFiavOl5JNlVsFib8I4PRA/640"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 16px; word-break: normal !important;"></span>上面那个请求就是ajax请求的网页，里面就会有我们需要的数据，我们看看是什么样的请求</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KO4EvNAuDAp1aeOgpEkQiccUpGH4LULXLibgzqvjNxCZ4PxR0NFMaSjmqw/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibUCcSJxOmJHdMtqcKAJ9KO4EvNAuDAp1aeOgpEkQiccUpGH4LULXLibgzqvjNxCZ4PxR0NFMaSjmqw/640"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">是个post请求，请求成功状态码为200，请求url上面也有了，下面的from data就是我们需要post的数据，很容易就可以猜到pageIndex就是页数，所以我们可以改变这个值来进行翻页。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个网页就分析完了，这样就是解决ajax动态网页了，是不是觉得很简单，其实不是的，只是这个网页比较简单的，因为表单(from data)的数据并没有进行加密，如果进行加密的话估计你的找js文件看看参数是怎样加密的了，这就是我之前写的网易云音乐评论的爬取。看这些混淆的js寻找加密方法的话有时会让你很头痛，所以经常有人会选择用selenium这些来进行爬取，但是用这些会使爬虫的性能降低，所以这个方法在工作里是不允许的。所以必须学会怎样应对这些ajax。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">贴下代码</p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-default" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(40, 44, 52); color: rgb(171, 178, 191); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 39px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">import</span>&nbsp;requests<br style="word-break: normal !important;">page =&nbsp;<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">1</span><br style="word-break: normal !important;"><span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">while</span>&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">True</span>:<br style="word-break: normal !important;">&nbsp; &nbsp;url =&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 409px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<a href="http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#39;" target="_blank" rel="noopener">http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#39;</a></span><br style="word-break: normal !important;">&nbsp; &nbsp;data = {<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘cname’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 38px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘广州’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘pid’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 73px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘pageIndex’</span>: page,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘pageSize’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘10’</span><br style="word-break: normal !important;">&nbsp; &nbsp;}<br style="word-break: normal !important;">&nbsp; &nbsp;response = requests.post(url, data=data)<br style="word-break: normal !important;">&nbsp; &nbsp;print(response.json())<br style="word-break: normal !important;">&nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">if</span>&nbsp;response.json().get(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 53px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘Table1’</span>,&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>):<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;page +=&nbsp;<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">1</span><br style="word-break: normal !important;">&nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">else</span>:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">break</span></code></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">可以看到去掉from data，不用十行代码就可以把数据都爬下来了，所以说这个网站适合练手，大家可以去试试。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 20px; word-break: normal !important;"><strong style="word-break: normal !important;">写在最后</strong></span></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">下篇文章我会写下复杂点的ajax请求，这个网站</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><strong style="word-break: normal !important;"><a href="http://drugs.dxy.cn/" target="_blank" rel="noopener">http://drugs.dxy.cn/</a><span style="font-size: 20px; word-break: normal !important;"><br style="word-break: normal !important;"></span></strong></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">不知道有多少人想看，想看的话点个赞吧！或者你可以自己先试试哈</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">推荐文章</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483804&amp;idx=1&amp;sn=899c55927facc551c23712921fc631ca&amp;chksm=fb4a7b30cc3df2268d2be3a93ee53839c419dc7427aecbebcbf678c57cefae27167c3be7630b&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483804&amp;idx=1&amp;sn=899c55927facc551c23712921fc631ca&amp;chksm=fb4a7b30cc3df2268d2be3a93ee53839c419dc7427aecbebcbf678c57cefae27167c3be7630b&amp;scene=21#wechat_redirect" style="word-break: normal !important;">如何爬取asp动态网页？搞定可恶的动态参数，这一文告诉你！</a></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483673&amp;idx=1&amp;sn=6c89eb9474d2076afb6405a9fd972e4f&amp;chksm=fb4a7bb5cc3df2a3ca3235ebe8bddf635839e5fd5a1b998b08dae521d449ee4388ae6ed7bbda&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483673&amp;idx=1&amp;sn=6c89eb9474d2076afb6405a9fd972e4f&amp;chksm=fb4a7bb5cc3df2a3ca3235ebe8bddf635839e5fd5a1b998b08dae521d449ee4388ae6ed7bbda&amp;scene=21#wechat_redirect" style="word-break: normal !important;">利用python爬取网易云音乐，并把数据存入mysql</a><br style="word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; color: rgb(51, 51, 51); word-break: normal !important; text-align: center;"><img data-copyright="0" data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640" width="26%" style="word-break: normal !important; visibility: visible !important; width: 173.672px !important;" _src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640"></p><p style="padding-right: 5px; padding-left: 5px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; color: rgb(51, 51, 51); word-break: normal !important; text-align: center;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="padding-right: 5px; padding-left: 5px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; color: rgb(51, 51, 51); word-break: normal !important; text-align: center;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><p><br></p>]]></content>
    
    <summary type="html">
    
      什么是ajax呢，简单来说，就是加载一个网页完毕之后，有些信息你你还是看不到，需要你点击某个按钮才能看到数据，或者有些网页是有很多页数据的，而你在点击下一页的时候，网页的url地址没有变化，但是内容变了，这些都可以说是ajax。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>我爬取了37000条球迷评论，知道了这场比赛的重要信息</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%88%91%E7%88%AC%E5%8F%96%E4%BA%8637000%E6%9D%A1%E7%90%83%E8%BF%B7%E8%AF%84%E8%AE%BA%EF%BC%8C%E7%9F%A5%E9%81%93%E4%BA%86%E8%BF%99%E5%9C%BA%E6%AF%94%E8%B5%9B%E7%9A%84%E9%87%8D%E8%A6%81%E4%BF%A1%E6%81%AF/"/>
    <id>http://sergiojune.com/2019/01/14/我爬取了37000条球迷评论，知道了这场比赛的重要信息/</id>
    <published>2019-01-14T07:56:55.494Z</published>
    <updated>2019-01-14T08:13:44.482Z</updated>
    
    <content type="html"><![CDATA[<section><h1 style="font-weight: bold; font-size: 16px; line-height: 1.6em;"></h1><section class="mpa-template" data-mpa-template-id="1198548" data-mpa-color="null" data-mpa-category="fav" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="word-break: normal !important;"><p style="margin-right: auto; margin-left: auto; padding-right: 5px; padding-left: 5px; max-width: 600px; word-wrap: normal; border-width: 1px; border-style: solid; border-color: rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="color: rgb(255, 0, 0); word-break: normal !important;">这是日常学python的第18篇原创文章</span><br style="word-break: normal !important;"></p></section></section><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><strong style="word-break: normal !important;">这次用python爬虫爬点好玩的东西</strong></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">这两天看恰好有nba决赛，是球迷的你肯定不会错过的，更何况今年的西部决赛是火箭对战勇士，今年的火箭是很强的，因为没到关键时候总会有人站出来。当然，勇士也是挺强的，毕竟不能小看库里杜兰特等四大巨头。</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">东部的决赛我就不太知道了，一直以为是凯尔特人会苦战骑士，谁知道缺了两大主力的凯尔特人还是很强，而且还打了骑士2：0，看来这次的骑士会是凶多吉少了，不知道凯尔特人会不会成功复仇，让我们拭目以待吧！</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">有直播就肯定有评论，所以我想爬取下球迷评论，看看他们都在聊什么！</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><strong style="word-break: normal !important;"><span style="font-size: 20px; word-break: normal !important;">准备工作</span></strong></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">需要用到的库：</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">&nbsp; &nbsp; requests：用于网络请求</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">&nbsp;&nbsp;&nbsp;&nbsp;jieba：用于分词<br style="word-break: normal !important;"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">&nbsp;&nbsp;&nbsp;&nbsp;wordcloud：制作词云图<br style="word-break: normal !important;"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">&nbsp;&nbsp;&nbsp;&nbsp;numpy：制作背景图片<br style="word-break: normal !important;"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">词云背景图片：</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-copyright="0" data-cropselx1="0" data-cropselx2="558" data-cropsely1="0" data-cropsely2="321" data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbU6xXyL3fiaYsJXoKbTqsicicarpTVrAdRiaGdlxiazzOQNWicDvuo3EOQ8PFA/640" style="height: 625px; width: 558px; word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbU6xXyL3fiaYsJXoKbTqsicicarpTVrAdRiaGdlxiazzOQNWicDvuo3EOQ8PFA/640"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">上面的库都是可以直接用pip进行下载的，但是wordcloud会报错，报错如下：</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-copyright="0" data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbURS7Iyc18YMjJZgHyFTnoI8v7DUFD2UvOvvQj1R64spx1icfn4rgqLbw/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbURS7Iyc18YMjJZgHyFTnoI8v7DUFD2UvOvvQj1R64spx1icfn4rgqLbw/640"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">我们需要去官网下载whl文件进行手动安装</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">官网：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">然后找到对应自己安装的python版本进行下载</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUbCpXibED3H4WWdpuGRNNa5HWmHE5wGV7Z6PWXwxqMCHiau3QDO5ic7r5w/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUbCpXibED3H4WWdpuGRNNa5HWmHE5wGV7Z6PWXwxqMCHiau3QDO5ic7r5w/640"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">最后在命令行下安装即可</p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;">pip install “文件路径+whl文件名”<br></pre></section><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><strong style="word-break: normal !important;">接下来寻找目标网页</strong></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">文字直播地址：<a href="https://www.zhibo8.cc/zhibo/nba/2018/0517123898.htm?redirect=zhibo" target="_blank" rel="noopener">https://www.zhibo8.cc/zhibo/nba/2018/0517123898.htm?redirect=zhibo</a></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">在这个网页通过抓包（按下f12）课知道下面这个链接是返回评论信息，而且是个json</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUMac5KzIeNF3FlabmBKKoDDs9cSNdzQGWrMjibjVqbJTIkzyNW1uvSjQ/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUMac5KzIeNF3FlabmBKKoDDs9cSNdzQGWrMjibjVqbJTIkzyNW1uvSjQ/640"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUaBxv3LdlfjPicjPmaEEicXGmx4XUicAVVHZficjjeRRmjOlPjptVCuGYag/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUaBxv3LdlfjPicjPmaEEicXGmx4XUicAVVHZficjjeRRmjOlPjptVCuGYag/640"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">链接为：<span style="color: rgb(34, 34, 34); word-break: normal !important;"><a href="https://cache.zhibo8.cc/json/" target="_blank" rel="noopener">https://cache.zhibo8.cc/json/</a><strong style="word-break: normal !important;">2018/nba/0517123898_384</strong>.htm?key=0.6512348313080727</span></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">通过多次分析知道上面加粗的是直播间的信息，后面的下划线之后的是评论的页数，最后的key参数是个随机数，带不带上进行请求都没有关系</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">用代码来获取评论信息</p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-sublime" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(35, 36, 31); color: rgb(248, 248, 242); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-sublime-function" style="background: rgba(0, 0, 0, 0); display: inline; width: 185px; text-decoration-style: solid; text-decoration-color: rgb(248, 248, 242); word-break: normal !important;"><span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">def</span>&nbsp;<span class="hljs-sublime-title" style="color: rgb(166, 226, 46); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(166, 226, 46); word-break: normal !important;"><strong>get_json</strong></span><span class="hljs-sublime-params" style="background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(248, 248, 242); word-break: normal !important;">(self, index)</span>:</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;url =&nbsp;<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 528px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘<a href="https://cache.zhibo8.cc/json/2018/nba/0517123898_%d.htm?key=0.1355540028791382&#39;" target="_blank" rel="noopener">https://cache.zhibo8.cc/json/2018/nba/0517123898_%d.htm?key=0.1355540028791382&#39;</a></span>&nbsp;% index<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;response = requests.get(url)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">if</span>&nbsp;response.status_code ==&nbsp;<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 19px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">200</span>:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">for</span>&nbsp;item&nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 14px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">in</span>&nbsp;response.json():<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 62px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 写入文件</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.write_file(item[<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 59px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘content’</span>])<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.num +=&nbsp;<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 6px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">1</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">return</span>&nbsp;<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">1</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">else</span>:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">return</span>&nbsp;<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">0</span></code></pre></section><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">评论信息有了，接着弄张词云图</p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-sublime" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(35, 36, 31); color: rgb(248, 248, 242); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-sublime-function" style="background: rgba(0, 0, 0, 0); display: inline; width: 171px; text-decoration-style: solid; text-decoration-color: rgb(248, 248, 242); word-break: normal !important;"><span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">def</span>&nbsp;<span class="hljs-sublime-title" style="color: rgb(166, 226, 46); background: rgba(0, 0, 0, 0); display: inline; width: 99px; text-decoration-style: solid; text-decoration-color: rgb(166, 226, 46); word-break: normal !important;"><strong>get_wordcloud</strong></span><span class="hljs-sublime-params" style="background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(248, 248, 242); word-break: normal !important;">(self)</span>:</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">with</span>&nbsp;open(<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 92px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘comments.txt’</span>,&nbsp;<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘r’</span>, encoding=<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 47px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘utf-8’</span>)&nbsp;<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">as</span>&nbsp;comments:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;text = comments.read() &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 62px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 加载数据</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;words =&nbsp;<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘ ‘</span>.join(jieba.cut(text, cut_all=<span class="hljs-sublime-keyword" style="color: rgb(249, 38, 114); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(249, 38, 114); word-break: normal !important;">True</span>)) &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 121px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 采用结巴全分词模式</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;image = np.array(Image.open(<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘1.jpg’</span>)) &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 61px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 背景图片</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 73px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 初始化词云</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wc = WordCloud(font_path=<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 198px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">r’C:\Windows\Fonts\simkai.ttf’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; background_color=<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘white’</span>, mask=image,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_font_size=<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">100</span>, max_words=<span class="hljs-sublime-number" style="color: rgb(174, 129, 255); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(174, 129, 255); word-break: normal !important;">2000</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wc.generate(words) &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 61px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 生成词云</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wc.to_file(<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 59px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘img.png’</span>) &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 61px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 生成图片</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;image_file = Image.open(<span class="hljs-sublime-string" style="color: rgb(230, 219, 116); background: rgba(0, 0, 0, 0); display: inline; width: 60px; text-decoration-style: solid; text-decoration-color: rgb(230, 219, 116); word-break: normal !important;">‘img.png’</span>) &nbsp;<span class="hljs-sublime-comment" style="color: rgb(117, 113, 94); background: rgba(0, 0, 0, 0); display: inline; width: 62px; text-decoration-style: solid; text-decoration-color: rgb(117, 113, 94); word-break: normal !important;"># 打开图片</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;image_file.show()</code></pre></section><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">好了，代码完成，看下效果：</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-copyright="0" data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUicbxJ0gFljMa2bKLJRic6zib2wFglvAyDxuXlWnhhnemDtdsN0icK1eIQg/640" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUicbxJ0gFljMa2bKLJRic6zib2wFglvAyDxuXlWnhhnemDtdsN0icK1eIQg/640"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">利用词云图一眼就可以看出球迷都在评论什么了，因为我爬取的是火箭主场对战勇士的第二场比赛，肯定讨论最多的就是勇士火箭了，紧接的就是杜兰特了，死亡之神，这场的杜兰特超神拿了38分还是输给了火箭，自然而然就是讨论他最多了。还有就是这场站出来的塔克，三分6中5，还破了个人季后赛的最高得分，讨论他也是很正常的事。还有一个很显眼的就是第三节，很多人都认为勇士是“勇三疯”，以为这场比赛勇士会在第三节爆发吧？其实这赛季的火箭第三节也是很强的，并不比勇士弱。</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">完整代码已经上传到我的github上了，如果需要的话可以自行查看，如果觉得程序不错的话希望可以给个star哈！</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">github：<a href="https://github.com/SergioJune/gongzhonghao_code" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code</a></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><span style="font-size: 20px; word-break: normal !important;"><strong style="word-break: normal !important;">写在最后</strong></span></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">如果这篇文章对你用的话，希望不要吝啬你的点赞哈！点赞和转发就是对我的最大支持，这样才有动力输出质量高的原创文章。</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">「球迷的话点个赞？我看看有多少个是球迷」</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">推荐文章：</p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;">&lt;a href=”<a href="http://mp.weixin.qq.com/s" target="_blank" rel="noopener">http://mp.weixin.qq.com/s</a>?biz=MzU0NzY0NzQyNw==&amp;mid=2247483774&amp;idx=1&amp;sn=769c06f2cf532b645d9cb9ba63b52b81&amp;chksm=fb4a7bd2cc3df2c47851c244db40b5cddccf2e21381d7742e39b9db2bdee0f12b83f870814bf&amp;scene=21#wechat_redirect” target=”_blank” _href=”<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483774&amp;idx=1&amp;sn=769c06f2cf532b645d9cb9ba63b52b81&amp;chksm=fb4a7bd2cc3df2c47851c244db40b5cddccf2e21381d7742e39b9db2bdee0f12b83f870814bf&amp;scene=21#wechat_redirect&quot;" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483774&amp;idx=1&amp;sn=769c06f2cf532b645d9cb9ba63b52b81&amp;chksm=fb4a7bd2cc3df2c47851c244db40b5cddccf2e21381d7742e39b9db2bdee0f12b83f870814bf&amp;scene=21#wechat_redirect&quot;</a> style=”word-break: normal !important;”&gt;使用requests+BeautifulSoup的简单爬虫练习<br style="word-break: normal !important;"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" style="word-break: normal !important;">python爬虫常用库之requests详解</a><br style="word-break: normal !important;"></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="margin-right: 2em; margin-left: 2em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1.5px; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><img data-copyright="0" data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640" style="width: 145.078px; word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640"></p><p style="padding-right: 5px; padding-left: 5px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; color: rgb(51, 51, 51); text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="padding-right: 5px; padding-left: 5px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; color: rgb(51, 51, 51); text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><p><br></p>​</section>]]></content>
    
    <summary type="html">
    
      这两天看恰好有nba决赛，是球迷的你肯定不会错过的，更何况今年的西部决赛是火箭对战勇士，今年的火箭是很强的，因为没到关键时候总会有人站出来。当然，勇士也是挺强的，毕竟不能小看库里杜兰特等四大巨头。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>老司机带你用python来爬取妹子图</title>
    <link href="http://sergiojune.com/2019/01/14/%E8%80%81%E5%8F%B8%E6%9C%BA%E5%B8%A6%E4%BD%A0%E7%94%A8python%E6%9D%A5%E7%88%AC%E5%8F%96%E5%A6%B9%E5%AD%90%E5%9B%BE/"/>
    <id>http://sergiojune.com/2019/01/14/老司机带你用python来爬取妹子图/</id>
    <published>2019-01-14T07:56:44.981Z</published>
    <updated>2019-01-14T08:20:30.458Z</updated>
    
    <content type="html"><![CDATA[<p><section class="_editor" data-mpa-powered-by="yiban.io" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><p class="_brush" style="margin-right: auto; margin-left: auto; max-width: 600px; word-wrap: normal; border-width: 1px; border-style: solid; border-color: rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; text-align: center; word-break: normal !important;"><span style="color: rgb(255, 0, 0); word-break: normal !important;">这是日常学python的第14篇原创文章</span></p></section></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">我前几篇文章都是说一些python爬虫库的用法，还没有说怎样利用好这些知识玩一些好玩的东西。那我今天带大家玩好玩又刺激的，嘻嘻！对了，requests库和正则表达式很重要的，一定要学会！一定要学会！！一定要学会！！！我现在的爬虫基本都是用这两样东西来爬的。所以学不学你看着办吧。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">来到今天的重点，我今天发现一个网站很好爬的，非常适合新手，我没有设置请求头什么的爬了很多遍很没有封我ip和给我返回403之类的，所以他对我们第一次玩爬虫的人来说很友好。这个网站就是<strong style="word-break: normal !important;">今日头条</strong>。最重要的是这里面有很多美女图片，我们可以把它们爬下来！！！是不是想想都要流鼻血啊？</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">文章首发于公众号「日常学python」</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">我们今天要爬的就是他的图集，先看看网站。搜索美女，然后点击图集，可以看到下面这些内容<img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvr1BxvCQiau0ehK8aenHF6ye4vhJEpY1icVyhAl8wl9B4ia5eMY06XiaM3Dw/0?wx_fmt=png" data-ratio="0.628482972136223" data-w="969" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvr1BxvCQiau0ehK8aenHF6ye4vhJEpY1icVyhAl8wl9B4ia5eMY06XiaM3Dw/0?wx_fmt=png"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">我们要做的就是把上面的图片给爬下来。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">那开始分析网站。按下f12，然后点击network，刷新下你可以看到这些<img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrrQEdXOhlznSLQLll2FKFgDAb9Kxjr86U5G7YIdibrc1jVajdibqGnFNg/0?wx_fmt=png" data-ratio="0.2916666666666667" data-w="1752" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrrQEdXOhlznSLQLll2FKFgDAb9Kxjr86U5G7YIdibrc1jVajdibqGnFNg/0?wx_fmt=png"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">进行寻找哪个请求返回这些图片的，在网页上可以看到图片会随着你下拉网页而进行显示更多的图片，这是动态加载的，所以可以轻松知道这个可以在xhr文件中找到，果然，你看<img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrm2ndblibZKric4PHFuG6l4McF80iaO8EMg4UScx1M0liaQsNxMPEvCgPfw/0?wx_fmt=png" data-ratio="0.1457725947521866" data-w="686" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrm2ndblibZKric4PHFuG6l4McF80iaO8EMg4UScx1M0liaQsNxMPEvCgPfw/0?wx_fmt=png"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">不断往下拉，不断地发送请求，点击这个请求看看是返回什么数据<img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrk4uibZTrW2byE363HWSxIbX0yVJWtRicME9DcQwhEPngBicO9BPlicu2Iw/0?wx_fmt=png" data-ratio="0.362874251497006" data-w="835" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrk4uibZTrW2byE363HWSxIbX0yVJWtRicME9DcQwhEPngBicO9BPlicu2Iw/0?wx_fmt=png"><img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvr8VkFeVicguqEBEOicGkdrzhsSicx60TRoQlk3ns7mLUfJoH8VNGX4fa9g/0?wx_fmt=png" data-ratio="0.21882640586797067" data-w="818" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvr8VkFeVicguqEBEOicGkdrzhsSicx60TRoQlk3ns7mLUfJoH8VNGX4fa9g/0?wx_fmt=png"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">可以看到这是个json，里面有图片的url，这个就是我们要找的东西，那我们可以用json库来解析，还有这个网站是get请求，这样就可以用requests库来发送然后解析下就可以了，非常简单。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">那么分析就到这里，直接上代码</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> requests, os<br style="word-break: normal !important;">path_a = os.path.abspath(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.’</span>)<br style="word-break: normal !important;">kw = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">while</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp;kw = input(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘请输入你要获取的图片(若想结束请输入1)’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> kw == <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘1’</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘已退出，你下载的图片已保存在’</span>+path_a+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘,请查看！’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">break</span><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> range(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1000</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">20</span>):<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;url = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://www.toutiao.com/search_content/?offset=&#39;" target="_blank" rel="noopener">https://www.toutiao.com/search_content/?offset=&#39;</a></span>+str(x)+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘&amp;format=json&amp;keyword=%s&amp;autoload=true&amp;count=20&amp;cur_tab=3&amp;from=gallery’</span> % kw<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;response = requests.get(url)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;data = response.json()[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘data’</span>]<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">not</span> data:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘下载’</span>+kw+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘图片完毕，请换个关键词继续’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">break</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;n = <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span> &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 记录文章数</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> atlas <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> data:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 创建目录</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;title = atlas[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘title’</span>]<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(atlas)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">try</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> title <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">not</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> os.listdir(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.’</span>): &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 防止文件名已经存在</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;os.mkdir(title)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> OSError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘文件名出错，创建目录失败，重新创建一个随机名字’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;title = kw + <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘文件名出错’</span>+str(x)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> title <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">not</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> os.listdir(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.’</span>):<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;os.mkdir(title)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;k = <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span> &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 记录下载的图片数</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path = os.path.join(path_a, title)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 转进图片目录</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;os.chdir(path)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> image <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> atlas[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘image_list’</span>]: &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个链接获取的图片是小张的，看着不够爽，所以下面替换成大的图片</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;image_url = image[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘url’</span>].replace(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘list’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘large’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 改个链接获取大的图片</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;atlas = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http:’</span>+image_url).content<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">with</span> open(str(k)+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.jpg’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘wb’</span>) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> f: &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 把图片写入文件内</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f.write(atlas)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘下载完第%d个文章的%d幅图完成’</span> % (x+n, k))<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;k += <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;n += <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 转出图片目录</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;os.chdir(path_a)<br style="word-break: normal !important;"></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">这个只用了requests库基本就能完成了，os库是用来操作文件目录的，这里就不详细说了。可以看到，代码量非常少，除开注释就大概四十行吧，是不是比其他语言简洁多了？是不是requests库很好用？这里可以充分体现了人生苦短，我用python的真理。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">而且，他还可换关键字继续搜，你想搜什么照片都可以。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">下篇文章写个requests库和正则来爬内容的文章，让你们感受下正则的强大！</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">最后给你们看下结果<img data-s="300,640" data-type="png" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrzqhB19fjFC3pbTF4fuumOUpLrha9mX2dTnwqwQlLKCdwpblpy2L7Bg/0?wx_fmt=png" data-ratio="0.6289104638619202" data-w="927" style="word-break: normal !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWichEKjwpicG8pJJ8ghegTVvrzqhB19fjFC3pbTF4fuumOUpLrha9mX2dTnwqwQlLKCdwpblpy2L7Bg/0?wx_fmt=png"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">不说那么多了，我要去买营养快线了。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">上述文章如有错误欢迎在留言区指出，如果这篇文章对你有用，点个赞，转个发如何？</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><section style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="word-break: normal !important;"><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><section style="padding-right: 15px; padding-left: 15px; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483725&amp;idx=1&amp;sn=82eccd84b4f23745427e1c6e963e1b37&amp;chksm=fb4a7be1cc3df2f7ec707f24ff7952b7558ea4cbb79b9bb533a5297977c808327728d3f23106&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483725&amp;idx=1&amp;sn=82eccd84b4f23745427e1c6e963e1b37&amp;chksm=fb4a7be1cc3df2f7ec707f24ff7952b7558ea4cbb79b9bb533a5297977c808327728d3f23106&amp;scene=21#wechat_redirect" style="word-break: normal !important;">爬虫必学知识之正则表达式上篇</a><span style="color: rgb(79, 129, 189); word-break: normal !important;"></span></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" style="word-break: normal !important;">python爬虫常用库之requests详解</a></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect">爬虫必学知识之正则表达式下篇</a></span></p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><br></p></section></section></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><img border="0" data-ratio="1.023076923076923" data-type="png" data-w="130" height="auto" title="undefined" _width="111.297px" src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640" data-fail="0" style="margin-bottom: 1.4px; border-radius: 5px; border-width: 1px; border-style: dashed; border-color: rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; word-break: normal !important; visibility: visible !important; width: 111.297px !important;" _src="https://mmbiz.qlogo.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640"><br style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><p><br></p><p></p>]]></content>
    
    <summary type="html">
    
      我前几篇文章都是说一些python爬虫库的用法，还没有说怎样利用好这些知识玩一些好玩的东西。那我今天带大家玩好玩又刺激的，嘻嘻！对了，requests库和正则表达式很重要的，一定要学会！一定要学会！！一定要学会！！！我现在的爬虫基本都是用这两样东西来爬的。所以学不学你看着办吧。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>教你用python登陆豆瓣并爬取影评</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%95%99%E4%BD%A0%E7%94%A8python%E7%99%BB%E9%99%86%E8%B1%86%E7%93%A3%E5%B9%B6%E7%88%AC%E5%8F%96%E5%BD%B1%E8%AF%84/"/>
    <id>http://sergiojune.com/2019/01/14/教你用python登陆豆瓣并爬取影评/</id>
    <published>2019-01-14T07:56:44.957Z</published>
    <updated>2019-01-14T08:21:11.370Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section editor="bj.96weixin.com" style="margin:0 auto;padding:0;box-sizing:border-box"><section class="yead_bgc wx-bg" style="border-style: solid; -webkit-border-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13JzTTXXg3mC439fK28gxRK85c5jJicI6ia4ibEOx5DTicoiciamOZc6hcaLFy9S1AfhJzm8kUAHJnv4jtQ/0&quot;) 15 5 5 fill stretch; color: rgb(51, 51, 51); border-width: 10px 4px 4px; padding: 0px; box-sizing: border-box; background-color: rgb(51, 184, 108);"><section style="width: 100%; font-size: 14px; margin: 0px; line-height: 30px; padding: 0px 5px; box-sizing: border-box;" data-width="100%"><p style="padding:0;margin:0;text-align:justify">在上篇文章爬取豆瓣电影top250后，想想既然爬了电影，干脆就连影评也爬了，这样可以看看人们评价的电影，再加上刚出不久的移动迷官3好像挺热的，干脆就爬他吧，爬完看看好不好看！</p></section></section></section><p><br></p></section><section class="editor"><section style="margin:10px auto;"><section style="width: 100%; font-size: 18px; height: 40px; line-height: 40px; border-bottom-width: 2px; border-bottom-style: solid; border-bottom-color: rgb(30, 28, 28); text-align: center; box-sizing: border-box;" data-width="100%">进入主题</section><section style="width: 100%; margin-top: 1px; border-top-style: solid; border-top-width: 1px; border-top-color: rgb(30, 28, 28); box-sizing: border-box;" data-width="100%"></section></section></section><p><br></p><p><strong>1.去找目标网页并找到所要找的数据</strong><br></p><p><br></p><p>一进去网页就条件反射打开开发者工具，很容易就看到了这个<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067651.png" title="1802067651.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067651.png" alt=""></p><p><br></p><p>鼠标所点的就是我接下来要爬的网站，先看看他的response和请求头之类的信息，他的请求方式时get，response是一个网页结构，这就好办了，我们就可以用正则来匹配出所要的数据，正则还是个很好用的东西，请大家务必要学会啊。那接下来就动手敲代码咯！</p><p><br></p><p>2.<strong>用re+requests获取数据</strong></p><p><br></p><p>获取信息<br></p><p><strong><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067256.png" title="1802067256.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067256.png" alt=""></strong></p><p>先把数据写入txt文件中（打开的文件要指定编码为utf-8，要不会出现编码问题，因为window的默认编码方式是gbk，而你的编码为utf-8）<br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802062970.png" title="1802062970.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802062970.png" alt=""></p><p>正则表达式和网址<br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802063224.png" title="1802063224.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802063224.png" alt=""></p><p><br></p><p>一点击运行，只运行了两页，就出了问题，因为这个评论不止两页</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802061824.png" title="1802061824.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802061824.png" alt=""></p><p><br></p><p>调试了下，在获取完第二页的时候他返回了个不存在的网页，导致我的正则表达式捕捉不到数据，出现了个空的page，所以就只下载了两页，这应该是被反爬了，继续回网页看看需要加什么请求头，然而我把全部的请求头的信息都加了，还是没用，这就触及到我的盲区了（尴尬脸），但是我可以百度啊，百度一看，看见有人说模拟登陆就可以了，那好，我就来模拟登陆一波！！！</p><p><br></p><p><strong>3.模拟登陆豆瓣</strong></p><p><br></p><p>首先需要看看登陆需要什么参数，这个参数是在豆瓣的登陆网址，先打开登陆，打开开发者工具(要不会看不到后面这个所需要的网页)，填好信息点击登陆，然后点击这个login网页，往下拉就会看到From Data 这个框，这个就是登陆所要的参数<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802069594.png" title="1802069594.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802069594.png" alt=""></p><p><br></p><p>直接把他们复制过来即可</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067548.png" title="1802067548.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067548.png" alt=""></p><p><br></p><p>然后就用post把信息发到服务器完成登陆，但是这有个问题，怎么保存登陆信息呢？这就需要用到<strong>Session()</strong>来保留了，但是注意，只需要建立一个会话信息就可以了，不是每个都用这个方法，我初学时就是犯这个错误以至于我搞了很久还没有登陆成功。代码如下</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802066457.png" title="1802066457.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802066457.png" alt=""></p><p>然后用这个post上去，注意！注意！注意！post的网址是登陆网址，不是你要爬的网址，我刚学时也是被这个坑了很久(怎么感觉我很多问题)，还有其他用requests的都需要替换成<strong>self.ssession()</strong></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067203.png" title="1802067203.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802067203.png" alt=""></p><p>​</p><p>最后这样<br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802068961.png" title="1802068961.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802068961.png" alt=""></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802066811.png" title="1802066811.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802066811.png" alt=""></p><p>大功告成，由于只能获取500条这是因为豆瓣只开放了500条评论信息，多一条都不肯给</p><p><br></p><p><strong>4.登陆多了需要填验证码</strong></p><p><br></p><p>由于我多次登陆注销，然后我就需要填验证码了，然而这还是难不到我，还是分析网页找出验证码图片然后下载下来自己填写，还没有那些大佬那么厉害可以用人工智能来填写，代码如下<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802064517.png" title="1802064517.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802064517.png" alt=""></p><p><br></p><p>还有将数据保留到数据库，我就不贴了，代码和上篇文章的差不多</p><p><br></p><section class="editor"><p><img src="https://mmbiz.qlogo.cn/mmbiz/QKDxrVYehicdAibIVUpquF6TQUwXFg6dYCrLBEiasLaVyObib9LjK08qQ7IzkYKROO93uxoEnMSl8zRCWiaY7JwgZWg/0?wx_fmt=jpeg" style="margin: 0px; padding: 0px; max-width: 100%;"></p></section><p>通过这个我学会了使用session来保存会话信息来登陆简单网页，还可以填写验证码，自己还是觉得有点高大上的，嘻嘻。由于本人还没学数据分析，就只能到这里，而生成词云也有点不会，直接复制粘贴来无趣，所以就先不写了，等大神你来写吧！</p><p><br></p><p>最后非常感谢你看完了我的文章，如果觉得有用可以点赞，转发哈！若需要完整代码在微信公众号<strong>日常学python</strong>后台回复<strong>影评</strong>即可，若需要python相关的电子书也可以回复<strong>pdf</strong>获得，日后还会有更多福利发给你</p><p><br></p><p><br></p><p style="text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p><br></p><p style="text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.329412) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802054148.png" height="auto" border="0" alt="1802054148.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802054148.png"></p><p style="text-align: center;"><span style="font-size: 14px;">一个专注于python的公众号</span></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      在上篇文章爬取豆瓣电影top250后，想想既然爬了电影，干脆就连影评也爬了，这样可以看看人们评价的电影，再加上刚出不久的移动迷官3好像挺热的，干脆就爬他吧，爬完看看好不好看！
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>反爬虫与反反爬虫</title>
    <link href="http://sergiojune.com/2019/01/14/%E5%8F%8D%E7%88%AC%E8%99%AB%E4%B8%8E%E5%8F%8D%E5%8F%8D%E7%88%AC%E8%99%AB/"/>
    <id>http://sergiojune.com/2019/01/14/反爬虫与反反爬虫/</id>
    <published>2019-01-14T07:56:44.942Z</published>
    <updated>2019-01-14T08:21:56.058Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section editor="bj.96weixin.com" style="margin:0 auto;padding:0;box-sizing:border-box"><section class="yead_bgc wx-bg" style="border-style: solid; -webkit-border-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13JzTTXXg3mC439fK28gxRK85c5jJicI6ia4ibEOx5DTicoiciamOZc6hcaLFy9S1AfhJzm8kUAHJnv4jtQ/0&quot;) 15 5 5 fill stretch; color: rgb(51, 51, 51); border-width: 10px 4px 4px; padding: 0px; box-sizing: border-box; background-color: rgb(51, 184, 108);"><section style="width: 100%; font-size: 14px; margin: 0px; line-height: 30px; padding: 0px 5px; box-sizing: border-box;" data-width="100%"><p style="padding:0;margin:0;text-align:justify">喜欢爬虫的伙伴都知道，在爬网站的内容的时候并不是一爬就可以了，有时候就会遇到一些网站的反爬虫，折回让你爬不到数据，给你返回一些404，403或者500的状态码，这有时候会让人苦不堪言，就如我昨天发的爬网易云音乐评论，在你爬的数据较多时，网站认为你是一个机器，就不让你爬了，网易云就给我返回了一个<strong>{“code”:-460,”msg”:”Cheating”}，</strong>你不看下他的返回内容还不知道自己被反爬虫，不过不用担心，既然网页有反爬虫，可我们也有反反爬虫，今天就给大家说说反爬虫与反反爬虫。</p></section></section></section><p><br></p></section><section class="editor"><section style="border: 0px; margin: 0px auto; padding: 0px; text-align: center; box-sizing: border-box;"><section style="padding: 5px 10px; line-height: 30px; text-align: center; font-size: 14px; border: 3px solid rgb(51, 184, 108); display: inline-block; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="padding: 0px; color: rgb(255, 255, 255); height: 30px; width: 30px; line-height: 30px; text-align: center; font-size: 14px; display: inline-block; border-radius: 100%; box-sizing: border-box; background-color: rgb(51, 184, 108);"><p>1</p></section><section style="padding: 0px 0px 0px 10px; color: rgb(51, 184, 108); line-height: 30px; text-align: center; font-size: 14px; border: 0px; display: inline-block; box-sizing: border-box;"><p>网页的反爬虫</p></section></section><section style="padding: 0px; margin: 0px auto; color: rgb(255, 255, 255); width: 0px; height: 0.4rem; text-align: center; border-width: 0.4rem 0.6rem 0px; border-style: solid; border-color: rgb(51, 184, 108) rgb(255, 255, 255) rgb(255, 255, 255); box-sizing: border-box;"></section></section></section><p><br></p><p><strong>1.通过网页的请求头</strong><br></p><p>首先我们先看看网易云音乐评论的请求头<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802099052.png" title="1802099052.png" alt=""><strong><br></strong></p><p><br></p><p><strong>User-Agent：</strong>这个是保存用户访问该网站的浏览器的信息，我上面这个表示的是我通过window的浏览器来访问这个网站的，如果你是用python来直接请求这个网站的时候，这个的信息会带有python的字眼，所以网站管理员可以通过这个来进行反爬虫。</p><p><br></p><p><strong>Referer：</strong>当浏览器发送请求时，一般都会带上这个，这个可以让网站管理者知道我是通过哪个链接访问到这个网站的，上面就说明我是从网易云音乐的主页来访问到这个页面的，若你是用python来直接请求是，就没有访问来源，那么管理者就轻而易举地判断你是机器在操作。</p><p><br></p><p><strong><span style="color: rgb(63, 63, 63); font-family: 'microsoft yahei'; line-height: 27.2px;">authorization</span></strong>:有的网站还会有这个请求头，这个是在用户在访问该网站的时候就会分配一个id给用户，然后在后台验证该id有没有访问权限从而来进行发爬虫。<br></p><p><br></p><p><strong>2.用户访问网站的ip</strong></p><p>当你这个ip在不断地访问一个网站来获取数据时，网页后台也会判断你是一个机器。就比如我昨天爬的网易云音乐评论，我刚开始爬的一首《海阔天空》时，因为评论较少，所以我容易就得到所有数据，但是当我选择爬一首较多评论的《等你下课》时，在我爬到800多页的时候我就爬不了，这是因为你这个ip的用户在不断地访问这个网站，他已经把你视为机器，所以就爬不了，暂时把你的ip给封了。<strong><br></strong></p><p><br></p><section class="editor"><section style="border: 0px; margin: 0px auto; padding: 0px; text-align: center; box-sizing: border-box;"><section style="padding: 5px 10px; line-height: 30px; text-align: center; font-size: 14px; border: 3px solid rgb(51, 184, 108); display: inline-block; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="padding: 0px; color: rgb(255, 255, 255); height: 30px; width: 30px; line-height: 30px; text-align: center; font-size: 14px; display: inline-block; border-radius: 100%; box-sizing: border-box; background-color: rgb(51, 184, 108);"><p>2</p></section><section style="padding: 0px 0px 0px 10px; color: rgb(51, 184, 108); line-height: 30px; text-align: center; font-size: 14px; border: 0px; display: inline-block; box-sizing: border-box;"><p>我们的反反爬虫</p></section></section><section style="padding: 0px; margin: 0px auto; color: rgb(255, 255, 255); width: 0px; height: 0.4rem; text-align: center; border-width: 0.4rem 0.6rem 0px; border-style: solid; border-color: rgb(51, 184, 108) rgb(255, 255, 255) rgb(255, 255, 255); box-sizing: border-box;"></section></section></section><p><br></p><p><strong>1.添加请求头</strong></p><p>既然在请求网页的时候需要请求头，那么我们只需要在post或者get的时候把我们的请求头加上就可以了，怎样加？可以使用<strong>requests</strong>库来添加，在post，get或者其他方法是加上<strong>headers</strong>参数就可以了，而请求头不需要复制所有的信息，只需要上面的三个之中一个就可以，至于哪个自己判断，或者直接添加所有也可以，这样我们就可以继续爬了。</p><p><br></p><p><strong>2.使用代理ip</strong></p><p>若是网站把你的ip给封了，你添加什么的请求头也都没有用了，那我们就只有等他解封我们才可以继续爬吗？我可以十分自信告诉你：<strong>不需要</strong>，我们可以使用代理ip来继续爬，我们可以爬取网络上的免费ip来爬，至于免费的代理ip质量怎样你们应该知道，有必要可以买些不免费的，这样好点，我们平时的练习用免费的代理ip就可以了，可以自己爬取一些免费代理ip建成ip池，然后爬的时候就把ip随机取出来，我偷偷告诉你：小编明天的文章就是教你怎样搭建自己的代理ip池。</p><p><br></p><section class="editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="96wx-bdlc 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section class="96wx-bdbc" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right-width: 15px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96wx-bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; box-sizing: border-box; background-color: rgb(245, 189, 209);"><span style="color:inherit; font-size:12px">END</span></section><section class="96wx-bdlc" style="margin: 0px; padding: 0px; border-left-width: 15px; border-left-style: solid; border-left-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; height: 0px; width: 0px; float: left; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; box-sizing: border-box;"></section></section></section></section></section><p>结束语：上面的只是个人在爬一些网站时候遇到的一些反爬虫，这只是很简单的，还有那些动态网站的反爬虫自己还没有接触，等到以后接触了，再一 一补充。最后给大家在爬虫上的建议，就是爬取速度不要太快，最好每几个就隔几秒，不要给服务器造成太大的压力，也可以在爬虫的时候选择一些访问量少点的时间段，这是对服务器好，也是对你自己好！</p><section class="editor"><p><br></p></section><p style="text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p><br></p><p style="text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.329412) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802054148.png" height="auto" border="0" alt="1802054148.png"></p><p style="text-align: center;"><span style="font-size: 14px;">一个专注于python的公众号</span></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      喜欢爬虫的伙伴都知道，在爬网站的内容的时候并不是一爬就可以了，有时候就会遇到一些网站的反爬虫，折回让你爬不到数据，给你返回一些404，403或者500的状态码，这有时候会让人苦不堪言，就如我昨天发的爬网易云音乐评论，在你爬的数据较多时，网站认为你是一个机器，就不让你爬了，网易云就给我返回了一个
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的代理ip池</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%90%86ip%E6%B1%A0/"/>
    <id>http://sergiojune.com/2019/01/14/搭建自己的代理ip池/</id>
    <published>2019-01-14T07:56:44.868Z</published>
    <updated>2019-01-14T08:14:33.896Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section editor="bj.96weixin.com" style="margin:0 auto;padding:0;box-sizing:border-box"><section class="yead_bgc wx-bg" style="border-style: solid; -webkit-border-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13JzTTXXg3mC439fK28gxRK85c5jJicI6ia4ibEOx5DTicoiciamOZc6hcaLFy9S1AfhJzm8kUAHJnv4jtQ/0&quot;) 15 5 5 fill stretch; color: rgb(51, 51, 51); border-width: 10px 4px 4px; padding: 0px; box-sizing: border-box; background-color: rgb(51, 184, 108);"><section style="width: 100%; font-size: 14px; margin: 0px; line-height: 30px; padding: 0px 5px; box-sizing: border-box;" data-width="100%"><p style="padding:0;margin:0;text-align:justify">​继上一篇说了反爬虫之后，我说今天这篇文章会搭建一个属于自己的代理ip池，所以，为了不食言，就写了这篇文章，那好废话不多说，进入正题<br></p></section></section></section><p><br></p></section><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;"><span style="color: #FFFFFF;vertical-align:middle;" class="autonum">1</span></p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; font-size: 18px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p><span style="font-family: 微软雅黑; font-size: 16px;">目标网站</span></p></section></section></section></section></section><p>爬取代理ip，这也需要找网页，这就得看看哪个网页提供这些代理ip了，本人知道了几个免费提供代理ip的网站，如下：</p><p><br></p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>无忧代理ip</p></li><li><p>芝麻代理ip</p></li><li><p>西刺代理ip</p></li><li><p>云连代理ip</p></li></ul><p><br></p><p>我选择了爬取西刺代理的网站。</p><p><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">2</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p><span style="font-family:微软雅黑">分析网站结构</span></p></section></section></section></section></section><p>我们需要获取的高匿代理，按下F12打开开发者工具<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802106756.png" title="1802106756.png" alt=""></p><p><br></p><p>上面我们要获取的数据是ip地址，端口和类型这三个就可以了，可以看到，这些数据都在一个<strong>tr</strong>标签里，但是有两个不同的tr标签，这样可以用正则表达式，利用相隔的html结构先把整个内容匹配下来，再把重要信息匹配下来，最后就把他弄成这个样子<strong>{‘https’: ‘<a href="https://ip:端口&#39;}" target="_blank" rel="noopener">https://ip:端口&#39;}</a></strong><span style="line-height: 25.6px;">存入列表即可，最后就随机获取一个ip，然后可以先判断是否有用，再拿来做你此时项目的代理ip，<strong>判断是否用的方法就是随便拿一个百度获取别的网站，加上代理ip发送get请求，看看status_code()的返回码是不是200，</strong>即可，就如下面这样<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802107109.png" title="1802107109.png" alt=""></span></p><p><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">3</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p style=""><span style="font-family:微软雅黑">代码部分</span></p></section></section></section></section></section><p><span style="line-height: 25.6px;"></span><strong>1.匹配数据，并挑选数据存入列表</strong><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802105349.png" title="1802105349.png" alt=""></p><p><br></p><p><strong>2.随机获取ip，并写好ip格式</strong></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802105063.png" title="1802105063.png" alt=""></p><p><br></p><p>我这里是把他存入列表，现抓现用，是因为我现在的爬虫项目都是很小的，只需要这些就可以了。</p><p><br></p><section class="editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="96wx-bdlc 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section class="96wx-bdbc" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right-width: 15px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96wx-bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; box-sizing: border-box; background-color: rgb(245, 189, 209);"><span style="color:inherit; font-size:12px">END</span></section><section class="96wx-bdlc" style="margin: 0px; padding: 0px; border-left-width: 15px; border-left-style: solid; border-left-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; height: 0px; width: 0px; float: left; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; box-sizing: border-box;"></section></section></section></section></section><p>以上就是我简单搭建的代理ip池了，等到以后慢慢完善，你可以把他们存入你的数据库，然后要用的时候，就随机拿出来，先看看有没有用，没用的话就删除，有用就拿来用即可。</p><p><br></p><p style="text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p style="text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.329412) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802109804.png" height="auto" border="0" alt="1802109804.png"></p><p style="text-align: center;"><span style="font-size: 14px;">一个专注于python的公众号</span></p></section>]]></content>
    
    <summary type="html">
    
      会搭建一个属于自己的代理ip池
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>利用python爬取豆瓣电影Top250，并把数据放入MySQL数据库</title>
    <link href="http://sergiojune.com/2019/01/14/python%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1Top250/"/>
    <id>http://sergiojune.com/2019/01/14/python爬取豆瓣电影Top250/</id>
    <published>2019-01-14T07:56:44.844Z</published>
    <updated>2019-01-14T08:14:51.347Z</updated>
    
    <content type="html"><![CDATA[<section class="editor" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section style="margin:10px auto;text-align:center"><section style="margin: 0px auto; text-align: center; padding: 0px 10px; box-sizing: border-box;"><p><br></p><span style="display:inline-block;float:left;transform-origin:right bottom;margin-left:-28px;margin-bottom:8px;transform: rotate(-65deg);-webkit-transform: rotate(-65deg);-moz-transform: rotate(-65deg);-ms-transform: rotate(-65deg);-o-transform: rotate(-65deg);"><em class="yead_bgc" style="display:block;width:40px;height:1px;background-color:#33b86c;margin-left:8px"></em></span><section style="display:inline-block;overflow:hidden;width:100%" data-width="100%"><span class="yead_bgc" style="display:inline-block;height:3px;width:80%;float:left;background-color:#33b86c" data-width="80%"></span><section style="margin: 0px auto; font-size: 14px; line-height: 30px; clear: both; padding: 10px; text-align: left; color: rgb(51, 51, 51); box-sizing: border-box;"><p style="padding:0;margin:0"><br></p><p style="padding:0;margin:0">在<span style="line-height: 25.6px; white-space: pre-wrap;">学习了python基础后，一心想着快速入门爬虫，因为我就是为爬虫而学的python,所以就找了这个豆瓣电影来爬取。好了，废话不多说，进入正题</span></p></section><span class="yead_bgc" style="display:inline-block;height:3px;width:80%;float:right;background-color:#33b86c" data-width="80%"></span></section><span style="display:inline-block;float:right;transform-origin:right top;margin-right:17px;margin-top:10px;transform: rotate(120deg);-webkit-transform: rotate(120deg);-moz-transform: rotate(120deg);-ms-transform: rotate(120deg);-o-transform: rotate(120deg);"><em class="yead_bgc" style="display:block;width:20px;height:1px;background-color:#33b86c"></em><em class="yead_bgc" style="display:block;width:40px;height:1px;background-color:#33b86c;margin-left:8px;margin-top:5px"><br></em></span></section></section></section><p><strong>1.找到网页并分析网页结构</strong><br></p><p><br></p><p>首先进入<a href="https://movie.douban.com/top250" target="_blank" title="豆瓣电影Top250">豆瓣电影Top250</a>这个网页，按下f12打开开发者工具，如下图</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802039651.png" title="1802039651.png" alt=""></p><p><br></p><p>然后开始分析网页，点击开发者工具左上角的有个箭头的东西去找你需要找的数据，在这里我发现每个电影的信息都是在&lt;li&gt;的标签内，所以可以用正则表达式来先提取每一个电影，然后在分别提取每个电影中的数据。每个电影现在的数据都可以获取了，但是这个url只有25个电影，怎样获取下一页的呢？这里我们可以在每个页面获取下一页的链接，然后通过循环来继续获取下一页的电影数据即可</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802039785.png" title="1802039785.png" alt=""></p><p>我们可以先用开发者工具的箭头点一下后页，然后就显示右边的箭头数据出来，这里我们也可以用正则表达式来获取下一页的链接，然后接下来的工作就是循环了，好了分析结束，开始敲代码吧！</p><p><br></p><p><strong>2.用面向对象的方法进行爬取数据</strong></p><p><br></p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>先用requests对网页进行请求，获取网页的html结构，在这里，为了防止网页的反爬虫技术，我加了个请求头</p><p>（记得使用requests库之前先导入，没有的可以在命令行通过 <strong>pip install requests</strong> 进行下载）</p><p><strong><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802035432.png" title="1802035432.png" alt=""></strong></p><p><br></p><p>请求头在开发者工具中查看，如下图所示</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802037188.png" title="1802037188.png" alt="" style="z-index: -1; cursor: pointer; line-height: 25.6px; white-space: pre-wrap;"></p><p><br></p></li><li><p>接下用正则表达式进行获取数据</p><p><br></p><p>先匹配每一个电影和每一页数据（使用正则表达式的库是re）</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802033229.png" title="1802033229.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802034633.png" title="1802034633.png" alt=""></p><p><br></p><p>接下来获取每个电影的数据<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802036920.png" title="1802036920.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802034583.png" title="1802034583.png" alt=""></p><p><br></p><p>注意：获取到上面的数据，有的是空的，所以还需要进行判断是否为空，为了好看，我用了三元表达式进行判断，完成之后把他们存入字典<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802038436.png" title="1802038436.png" alt=""></p><p><br></p></li><li><p>接下来就是进行循环取下一页的数据了<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802039430.png" title="1802039430.png" alt=""></p><p><br></p></li></ul><p>3.如果你有点数据库基础的话，还可以把他们存入数据库，在这里我把这些数据存入MySQL数据库，代码如下，需要自己先建好数据库好表格</p><p><br></p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>这是操作数据库的类（使用的库为pymysql）<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802034586.png" title="1802034586.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802036544.png" title="1802036544.png" alt=""></p><p><br></p></li><li><p>然后回到爬虫类进行把数据存入数据库</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802033864.png" title="1802033864.png" alt=""><br></p></li></ul><p><br></p><p>4.<strong>成功后你就会在数据库中查到以下数据<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802032445.png" title="1802032445.png" alt=""></strong><br></p><p><br></p><section class="editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="96wx-bdlc 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section class="96wx-bdbc" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right-width: 15px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96wx-bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; box-sizing: border-box; background-color: rgb(245, 189, 209);"><span style="color:inherit; font-size:12px">END</span></section><section class="96wx-bdlc" style="margin: 0px; padding: 0px; border-left-width: 15px; border-left-style: solid; border-left-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; height: 0px; width: 0px; float: left; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; box-sizing: border-box;"></section></section></section></section></section><p>最后，非常感谢你看完了这篇文章，喜欢的话，或者有什么问题的话欢迎去我的微信公众号<strong>日常学python</strong>后台回复我，我会认真回答的。</p><p><br></p><section class="editor">ps:如果需要完整代码的话可以在微信公众号<strong>日常学python</strong>后台回复top250即可，或者想要什么学习资源也可以后台找我哦</section><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      学习了python基础后，一心想着快速入门爬虫，因为我就是为爬虫而学的python,所以就找了这个豆瓣电影来爬取。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫常用库之requests详解</title>
    <link href="http://sergiojune.com/2019/01/14/python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B9%8Brequests%E8%AF%A6%E8%A7%A3/"/>
    <id>http://sergiojune.com/2019/01/14/python爬虫常用库之requests详解/</id>
    <published>2019-01-14T07:56:44.795Z</published>
    <updated>2019-01-14T08:15:42.659Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><p>在使用了urllib库之后，感觉很麻烦，比如获取个cookie都需要分几步，代码又多，这和python的风格好像有点不太像哈，那有没有更加容易点的请求库呢？答案是有的，那就是第三方库<strong>requests</strong>,这个库的作者是大名鼎鼎的<strong>kennethreitz</strong>，创作这个库的原因就是想让python开发者更加容易地发起请求，处理请求。里面还有个名字：<strong>HTTP for Humans</strong>,顾名思义，就是用来请求http的。想看源代码的可以在github上搜索他的名字就可以看到了。</p><p><br></p><p>接下来介绍下怎样用这个库吧！</p><p><br></p><p>因为这是第三方库，所以我们需要下载，需要在命令行输入<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">pip install requests<br></code></pre></section><p>如果你装的是anacoda可以忽略这条</p><p><br></p><p>安装好了就来进行使用吧</p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">1</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">进行简单的操作</span></section></section></section><p>发送一个get请求<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 发送请求<br>import requests</span><br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/get&#39;" target="_blank" rel="noopener">http://httpbin.org/get&#39;</a></span>)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取返回的html信息</span><br>print(response.text)<br></code></pre></section><p>这样就发送了一个get请求，并且还打印了返回的内容，这个不再需要知道网页是哪个编码的，不过有时会出现编码问题，但是你也可以指定编码类型，如：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">response.encoding = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span><br></code></pre></section><p>指定完成后就可以正常编码了，前提你得知道网页的编码类型。</p><p><br></p><p>出了上面这些，我们还可以获取下面的信息<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">print(response.headers)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 请求状态码</span><br>print(response.status_code)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取网页的二进制内容</span><br>print(response.content)<br>print(response.url) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取请求的url</span><br>print(response.cookies) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取cookie</span><br></code></pre></section><p>是不是觉得很容易，一行代码就可以了。不再需要几步代码什么的了。</p><p><br></p><p>接下来被发爬的话带上个请求头来进行请求</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 还可以添加请求头进行请求</span><br>headers = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘User-Agent’</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36’</span>}<br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/get'," _src="http://httpbin.org/get'," target="_blank" rel="noopener">http://httpbin.org/get’,</a> headers=headers </span>)<br>print(response.headers)<br>print(response.text)<br></code></pre></section><p>加个请求头也就是加个关键字参数而已</p><p><br></p><p>还可以进行带参数的get请求<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 进行带参数的get请求</span><br>data = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘name’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘june’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘password’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">123456</span>}<br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/get&#39;" target="_blank" rel="noopener">http://httpbin.org/get&#39;</a></span>, params=data)<br>print(response.text)<br></code></pre></section><p><br></p><p><br></p><p>那如果需要登陆呢？post请求怎样发？告诉你，照样很简单<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 进行post请求</span><br>data = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘name’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘june’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘password’</span>: <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">123456</span>}<br>response = requests.post(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/post&#39;" target="_blank" rel="noopener">http://httpbin.org/post&#39;</a></span>, data=data, headers=headers)<br>print(response.text)<br></code></pre></section><p>是不是很简单，也是加个data关键字参数，把要提交的登陆参数进行post上去。</p><p><br></p><p>那除了上面的两个请求，还能进行别的请求吗？我可以非常开心地告诉你，可以的。比如，你要发个put请求，如这样</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">requests.put()<br>requests.delete()<br></code></pre></section><p>这个就是发送put请求和delete请求的，其他的请求也是这样发送，就不一 一说了。</p><p><br></p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">2</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">进行复杂点的请求</span></section></section></section><p><br></p><p>在登陆的时候我们有时候需要输入验证码，那怎样输呢？爬虫的看不了网页，最简单的做法就是把这个验证码的图片下载下来然后手动输入，那么我们怎样下载呢？我们可以向这个图片的url发送请求，然后把返回内容以二进制方法存入文件里面就可以了。<br></p><p><br></p><p>代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 从网上读取二进制数据，比如图片</span><br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://www.baidu.com/img/bd_logo1.png&#39;" target="_blank" rel="noopener">https://www.baidu.com/img/bd_logo1.png&#39;</a></span>, headers=headers)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个是直接获取字节码，这个是要保存的文件</span><br>print(response.content)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个是获取解码后的返回内容，这个是乱码</span><br>print(response.text)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 用文件来把图片下载下来</span><br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">with</span> open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘baidu.png’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘wb’</span>) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> f: <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 注意写的方式是以二进制方式写入</span><br> f.write(response.content)<br> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘下载完毕’</span>)<br></code></pre></section><p><br></p><p>还是很简单，不得不说，这个库太好用了。<br></p><p><br></p><p>当我们需要上传文件的时候，比如图片，我们还可以用post方法把他发送出去<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 上传文件</span><br>files = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘picture’</span>: open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘baidu.png’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘rb’</span>)}<br>response = requests.post(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/post&#39;" target="_blank" rel="noopener">http://httpbin.org/post&#39;</a></span>, files=files)<br>print(response.text)<br></code></pre></section><p><br></p><p>获取cookie并简单处理一下<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取cookie</span><br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://www.baidu.com&#39;" target="_blank" rel="noopener">https://www.baidu.com&#39;</a></span>)<br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> k, v <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> response.cookies.items():<br> print(k, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘=’</span>, v)<br></code></pre></section><p><br></p><p>当网页返回内容是json格式是，我们不需要用json库来解析，我们可以直接利用requests的方法进行解析，两者的效果是一样的</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 解析json</span><br>j = response.json() <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 可以用json库来解析，结果一样</span><br></code></pre></section><p><br></p><p><br></p><p>在urllib库时保存登陆信息需要把cookie保存下来，但是在requests库里面，我们只需要用<strong>requests.session()</strong>来保存信息就可以了。<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 用会话来保持登陆信息</span><br>session = requests.session()<br>response = session.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/cookies/set/number/123456&#39;" target="_blank" rel="noopener">http://httpbin.org/cookies/set/number/123456&#39;</a></span>)<br>print(response.text)<br></code></pre></section><p><br></p><p><strong>这样就可以保存登陆了，不需要为cookie操心了，但是每次获取一个session就可以了，然后用来请求或者其他操作。不需要每次请求或者操作都创建一个sesion出来，这样是保存不了登陆信息的</strong></p><p><br></p><p><br></p><p>当一个网站不安全，需要你用证书验证的，比如这个网站</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:15.0pt;"><a href="https://www.12306.cn" target="_blank" rel="noopener">https://www.12306.cn</a><br></pre><p><br></p><p><strong><img src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803131549.png" title="1803131549.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803131549.png" alt=""></strong></p><p><br></p><p>这时要访问里面的网站内容，我们就需要进行验证，代码如下</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 证书验证</span><br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://www.12306.cn&#39;" target="_blank" rel="noopener">https://www.12306.cn&#39;</a></span>, verify=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">False</span>) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 不加这个关键字参数的话会出现验证错误问题，因为这个网站的协议不被信任</span><br></code></pre></section><p>这样就可以进行访问了，但是会有一条警告<strong><br></strong></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">E:\anaconda\lib\site-packages\urllib3\connectionpool.py:<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">858</span>: InsecureRequestWarning: Unverified HTTPS request <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">is</span> being made. Adding certificate verification <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">is</span> strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html" target="_blank" rel="noopener">https://urllib3.readthedocs.io/en/latest/advanced-usage.html</a><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#ssl-warnings</span><br> InsecureRequestWarning)<br></code></pre></section><p>觉得不美观的，我们还可以在请求时加个cert关键字参数，值为可信任的证书，为一个元组，写上账号和密码之类的，这里就不演示了</p><p><br></p><p>遇到需要认证的网站，我们也可以这样<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">from requests.auth import HTTPBasicAuth<br># 设置认证</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># requests.get(‘需要认证的网址’, auth=HTTPBasicAuth(‘user’, ‘passwd’)) # 由于找不到需要认证的网址，所以先写个主体</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 还可以这样认证</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># requests.get(‘需要认证的网址’, auth=(‘user’, ‘passwd’)) # 这样就简单点</span><br></code></pre></section><p>由于我找不到需要认证的网站，所以就不演示了。</p><p><br></p><p>requests还可以用代理ip来进行请求网站来防止ip被封以至于自己爬不了的尴尬。使用代理ip也比urllib库简单得多，代码如下：<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 设置代理</span><br>proxies = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://122.114.31.177:808&#39;" target="_blank" rel="noopener">http://122.114.31.177:808&#39;</a></span>,<br>   <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘https’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://119.28.223.103:8088&#39;" target="_blank" rel="noopener">https://119.28.223.103:8088&#39;</a></span>}<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 在请求时添加上列代理</span><br>response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/get&#39;" target="_blank" rel="noopener">http://httpbin.org/get&#39;</a></span>, proxies=proxies)<br>print(response.text)<br></code></pre></section><p>上面的字典格式需要一 一对应，然后在请求时加上个关键字参数proxies就可以了。</p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">3</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">请求异常处理</span></section></section></section><p><br></p><p>在程序运行时，遇到错误时程序就会被强行停止，如果想要继续运行，就需要进行捕捉异常来让程序继续运行。<strong><br></strong></p><p><br></p><p>在requests库中有个处理异常的库requests.exceptions</p><p><br></p><p>这里简单地处理下请求超时的处理情况</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> requests<br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> requests.exceptions <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> ReadTimeout, ConnectTimeout, HTTPError, ConnectionError, RequestException<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 捕捉异常</span><br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">try</span>:<br> response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://httpbin.org/get&#39;" target="_blank" rel="noopener">http://httpbin.org/get&#39;</a></span>, timeout=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0.1</span>) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 规定时间内未响应就抛出异常</span><br> print(response.text)<br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> ReadTimeout <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘请求超时’</span>)<br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> ConnectionError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘连接失败’</span>)<br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> RequestException <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br> print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘请求失败’</span>)<br></code></pre></section><p><br></p><p>这里捕捉了三个异常，因为ReadTimeout是ConnectionError的子类，所以先捕捉ReadTimeout,再捕捉父类的。而ConnectionError 和 RequestException 同理</p><p><br></p><p>更多的异常处理可以查看文档哈。</p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">4</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">最后</span></section></section></section><p>以上均是我在学习时的笔记和个人在运用时遇到的一些坑都简单地记载了上去，希望对你有用哈，如果想看更多的用法可以去官方文档查看。还有代码我放在了github上，要的话可以上去查看。</p><p><br></p><p>GitHub：<a href="https://github.com/SergioJune/gongzhonghao_code/tree/master/python3_spider" _src="https://github.com/SergioJune/gongzhonghao_code/tree/master/python3_spider" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code/tree/master/python3_spider</a></p><p>官方文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html" _src="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/index.html</a></p><p>学习参考资料：<a href="https://edu.hellobi.com/course/157" target="_blank" rel="noopener">https://edu.hellobi.com/course/157</a>  </p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      创作这个库的原因就是想让python开发者更加容易地发起请求，处理请求。里面还有个名字：&lt;strong&gt;HTTP for Humans&lt;/strong&gt;,顾名思义，就是用来请求http的。想看源代码的可以在github上搜索他的名字就可以看到了。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://sergiojune.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫常用库之BeautifulSoup详解</title>
    <link href="http://sergiojune.com/2019/01/14/python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B9%8BBeautifulSoup%E8%AF%A6%E8%A7%A3/"/>
    <id>http://sergiojune.com/2019/01/14/python爬虫常用库之BeautifulSoup详解/</id>
    <published>2019-01-14T07:56:44.755Z</published>
    <updated>2019-01-14T08:16:09.843Z</updated>
    
    <content type="html"><![CDATA[<section class="_editor" data-mpa-powered-by="yiban.io" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><p style="margin-right: auto; margin-left: auto; padding-right: 5px; padding-left: 5px; max-width: 600px; word-wrap: normal; border-width: 1px; border-style: solid; border-color: rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="color: rgb(255, 0, 0); word-break: normal !important;">这是日常学python的第16篇原创文章</span><br style="word-break: normal !important;"></p></section><section class="_editor" data-width="100%" style="margin-right: auto; margin-left: auto; max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; width: 100%; word-break: normal !important;"><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">经过了前面几篇文章的学习，估计你已经会爬不少中小型网站了。但是有人说，前面的正则很难唉，学不好。正则的确很难，有人说过：如果一个问题用正则解决，那么就变成了两个问题。所以说学不会是很正常的，不怕，除了正则，我们还可以用另外一个强大的库来解析html。所以，今天的主题就是来学习这个强大的库–<strong style="word-break: normal !important;">BeautifulSoup</strong>，不过正则还是需要多多练习下的。</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">因为是第三方库所以我们需要下载，在命令行敲下以下代码进行下载<br style="word-break: normal !important;"></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">pip install beautifulsoup4<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">安装第三方解析库<br style="word-break: normal !important;"></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">pip install lxml<br style="word-break: normal !important;"></p></pre></section><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">pip install html5lib<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">如果不知道有什么用请往下看</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">1.相关解析库的介绍</strong></p><p style="word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibdSEM4LzQ6XUOYybwibjibtEJQjJWgdwMzRdFN24ar8Yz8Nbc9y6Jn4iaezXHY4YWZEUZn90KWU5OSw/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibdSEM4LzQ6XUOYybwibjibtEJQjJWgdwMzRdFN24ar8Yz8Nbc9y6Jn4iaezXHY4YWZEUZn90KWU5OSw/0?wx_fmt=png"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里官方推荐解析库为lxml,因为它的效率高。下面都是用lxml解析库来进行解析的。</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">2.详细语法介绍</strong></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">本文是进行解析豆瓣图书首页<a href="https://book.douban.com/" _src="https://book.douban.com/" _href="https://book.douban.com/" style="word-break: normal !important;" target="_blank" rel="noopener">https://book.douban.com/</a></p><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">1)创建bs对象</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> bs4 <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> BeautifulSoup<br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> requests<br style="word-break: normal !important;">response = requests.get(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://book.douban.com/&#39;" target="_blank" rel="noopener">https://book.douban.com/&#39;</a></span>).text<br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># print(response)</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 创建bs对象</span><br style="word-break: normal !important;">soup = BeautifulSoup(response, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘lxml’</span>) &nbsp;# 使用到了lxml解析库<br style="word-break: normal !important;"></p></pre></section><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">2)获取相关标签</p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">标签：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">data-moreurl-dict</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘{“from”:”top-nav-click-main”,”uid”:”0”}’</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a></span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">target</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“_blank”</span>&gt;</span>豆瓣<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">上面的<strong style="word-break: normal !important;">a</strong>就是一个标签名字，最简单的就是&lt;a&gt;&lt;/a&gt;这样，可以简单理解为&lt;&gt;里面的第一个单词就是标签名</p><p style="word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签</span><br style="word-break: normal !important;">print(soup.li) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个只是获取第一个li标签</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">&lt;li <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=””&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">data</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">moreurl</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">dict</span>=’{“<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">from</span>“:</span><span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“top-nav-click-main”</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“uid”</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“0”</span>}<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ href=”<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a> target=”_blank”&gt;豆瓣&lt;/a&gt;<br style="word-break: normal !important;">&lt;/li&gt;<br style="word-break: normal !important;"></span></p></pre></section><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">3)获取标签的名字和内容</p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">标签的名字和内容：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> &gt;</span>豆瓣<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">如上面所说，a就是标签名字，而两个标签之中所夹杂的内容就是我们所说的内容，如上，<strong style="word-break: normal !important;">豆瓣</strong>就是该标签的内容</p><p style="word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签名字</span><br style="word-break: normal !important;">print(soup.li.name)<br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签内容</span><br style="word-break: normal !important;">print(soup.li.string) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个只能是这个标签没有子标签才能正确获取，否则会返回None</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">li<br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">None</span><br style="word-break: normal !important;"></p></pre></section><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">由于这个<strong style="word-break: normal !important;">li标签</strong>里面还有个子标签，所以它的文本内容为None</p><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">下面这个就可以获取它的文本内容</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签内的标签</span><br style="word-break: normal !important;">print(soup.li.a)<br style="word-break: normal !important;">print(soup.li.a.string) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个标签没有子标签所以可以获取到内容</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">&lt;a data-moreurl-dict=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘{“from”:”top-nav-click-main”,”uid”:”0”}’</span> href=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a></span> target=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“_blank”</span>&gt;豆瓣&lt;/a&gt;<br style="word-break: normal !important;">豆瓣<br style="word-break: normal !important;"></p></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">4)获取标签属性，有两种方法</p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">标签属性：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a></span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">target</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“_blank”</span>&gt;</span>豆瓣<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">可以简单理解为属性就是<strong style="word-break: normal !important;">在标签名字旁边而且在前一个&lt;&gt;符号里面的，还有是有等号来进行体现的。</strong>所以上面的<strong style="word-break: normal !important;">href</strong>就是标签属性名字，<strong style="word-break: normal !important;">等号右边的就是属性的值</strong>，上面的值是个网址</p><p style="word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签属性</span><br style="word-break: normal !important;">print(soup.li.a[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘href’</span>]) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 第一种</span><br style="word-break: normal !important;">print(soup.li.a.attrs[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘href’</span>]) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 第二种</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;"><a href="https://www.douban.com" target="_blank" rel="noopener">https://www.douban.com</a><br style="word-break: normal !important;"><a href="https://www.douban.com" target="_blank" rel="noopener">https://www.douban.com</a><br style="word-break: normal !important;"></p></pre></section><p style="word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">5)获取标签内的子标签</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">子标签：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span>豆瓣<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">比如我们现在获取的<strong style="word-break: normal !important;">li标签</strong>，所以<strong style="word-break: normal !important;">a标签</strong>就是<strong style="word-break: normal !important;">li标签</strong>的<strong style="word-break: normal !important;">子标签</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签内的标签</span><br style="word-break: normal !important;">print(soup.li.a)<br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">&lt;a data-moreurl-dict=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘{“from”:”top-nav-click-main”,”uid”:”0”}’</span> href=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a></span> target=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“_blank”</span>&gt;豆瓣&lt;/a&gt;<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">6)获取所有子节点</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">子节点：这个和子标签是差不多的，只不过这里是获取一个标签下的所有子标签，上面的只是获取最接近该标签的子标签</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取子节点</span><br style="word-break: normal !important;">print(soup.div.contents) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回一个列表 第一种方法</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> n, tag <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> enumerate(soup.div.contents):<br style="word-break: normal !important;"> &nbsp; &nbsp;print(n, tag)<br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\n’</span>, &lt;div <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">bd</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">div</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">top</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">nav</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">info</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">nav</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">login</span>“ <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">https</span>:</span>//<a href="http://www.douban.com/accounts/login?source=book" target="_blank" rel="noopener">www.douban.com/accounts/login?source=book</a><span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“ rel=”</span>nofollow<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“&gt;登录&lt;/a&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;">0 <br style="word-break: normal !important;"><br style="word-break: normal !important;">1 &lt;div class=”</span>bd<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“&gt;<br style="word-break: normal !important;">&lt;div class=”</span>top-nav-info<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这个是获取div下的所有子节点，<strong style="word-break: normal !important;">.content</strong>就是获取子节点的属性</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">7)第二种方法获取所有子节点</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 第二种方法</span><br style="word-break: normal !important;">print(soup.div.children) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回的是一个迭代器</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> n, tag <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> enumerate(soup.div.children):<br style="word-break: normal !important;"> &nbsp; &nbsp;print(n, tag)<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;"><br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这个是用<strong style="word-break: normal !important;">.children</strong>获取所有的子节点，这个方法返回的是一个迭代器</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">8)获取标签的子孙节点，就是所有后代<br style="word-break: normal !important;"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">子孙节点：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">ul</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span>豆瓣<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">ul</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">从上面知道，<strong style="word-break: normal !important;">li标签</strong>是<strong style="word-break: normal !important;">ul标签</strong>的<strong style="word-break: normal !important;">子标签</strong>，<strong style="word-break: normal !important;">a标签</strong>是<strong style="word-break: normal !important;">li标签</strong>的<strong style="word-break: normal !important;">子标签</strong>，若此时我们获取的是<strong style="word-break: normal !important;">ul标签</strong>，所以<strong style="word-break: normal !important;">li标签和a标签都是ul标签的子孙节点</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签的子孙节点</span><br style="word-break: normal !important;">print(soup.div.descendants) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回的是一个迭代器</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> n, tag <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> enumerate(soup.div.descendants):<br style="word-break: normal !important;"> &nbsp; &nbsp;print(n, tag)<br style="word-break: normal !important;"># 结果<br style="word-break: normal !important;">…<br style="word-break: normal !important;">&lt;generator object descendants at <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0x00000212C1A1E308</span>&gt;<br style="word-break: normal !important;"><span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0</span> <br style="word-break: normal !important;"><br style="word-break: normal !important;"><span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span> &lt;div <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">bd</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">div</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">top</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">nav</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">info</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">nav</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">login</span>“ <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">https</span>:</span>//<a href="http://www.douban.com/accounts/login?source=book" target="_blank" rel="noopener">www.douban.com/accounts/login?source=book</a><span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“ rel=”</span>nofollow<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“&gt;登录&lt;/a&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里用到了<strong style="word-break: normal !important;">.descendants属性</strong>，获取的是div标签的子孙节点，而且返回结果是一个迭代器</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">9)获取父节点和所有祖先节点</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">既然有了子节点和子孙节点，反过来也是有父节点和祖先节点的，所以都很容易理解的</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取父节点</span><br style="word-break: normal !important;">print(soup.li.parent) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回整个父节点</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取祖先节点</span><br style="word-break: normal !important;">print(soup.li.parents) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回的是一个生成器</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> n, tag <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> enumerate(soup.li.parents):<br style="word-break: normal !important;"> &nbsp; &nbsp;print(n, tag)<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">.parent</strong>属性是获取父节点，返回来的是整个父节点，里面包含该子节点。<strong style="word-break: normal !important;">.parents</strong>就是获取所有的祖先节点，返回的是一个生成器</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">10)获取兄弟节点<br style="word-break: normal !important;"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">兄弟节点：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">ul</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span>豆瓣1<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span>豆瓣2<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span>豆瓣3<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">li</span>&gt;</span><br style="word-break: normal !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">ul</span>&gt;</span><br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">比如上面的html代码，里面的li标签都是ul标签的子节点，而li标签都是处于同级的，所以上面的li标签都是各自的兄弟。这就是兄弟节点。</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取兄弟节点</span><br style="word-break: normal !important;">print(soup.li.next_siblings) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取该标签的所有同级节点，不包括本身 &nbsp;返回的是一个生成器</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> soup.li.next_siblings:<br style="word-break: normal !important;"> &nbsp; &nbsp;print(x)<br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">&lt;generator object next_siblings at <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0x000002A04501F308</span>&gt;<br style="word-break: normal !important;">&lt;li <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">on</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">data</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">moreurl</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">dict</span>=’{“<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">from</span>“:</span><span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“top-nav-click-book”</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“uid”</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“0”</span>}<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ href=”<a href="https://book.douban.com&quot;&gt;读书&lt;/a" target="_blank" rel="noopener">https://book.douban.com&quot;&gt;读书&lt;/a</a>&gt;<br style="word-break: normal !important;">&lt;/li&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">.next_siblings属性是获取该标签的所有在他后面的兄弟节点，不包括他本身。同时返回结果也是一个迭代器</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">同理，既然有获取他的下一个所有兄弟标签，也有获取他前面的所有兄弟标签</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">soup.li.previous_siblings<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">如果只是获取一个即可，可以选择把上面的属性后面的<strong style="word-break: normal !important;">s字母去掉</strong>即可，如下</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">soup.li.previous_sibling &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取前一个兄弟节点</span><br style="word-break: normal !important;">soup.li.next_sibling &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取后一个兄弟节点</span><br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">3.bs库的更高级的用法</strong><br style="word-break: normal !important;"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">在前面我们可以获取标签的名字、属性、内容和所有的祖孙标签。但是当我们需要获取任意一个指定属性的标签还是有点困难的，所以，此时有了下面这个方法：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">soup.find_all( name , attrs , recursive , text , **kwargs )<br style="word-break: normal !important;"></p></pre></section><ul class=" list-paddingleft-2" style="width: 530.094px; word-break: normal !important; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">name：</strong>需要获取的标签名</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">attrs：</strong>接收一个字典，为属性的键值，或者直接用关键字参数来替代也可以，下面</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">recursive：</strong>设置是否搜索直接子节点</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">text：</strong>对应的字符串内容</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">limit：</strong>设置搜索的数量</p></li></ul><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">1)先使用name参数来进行搜索</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 先使用name参数</span><br style="word-break: normal !important;">print(soup.find_all(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘li’</span>)) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 返回一个列表，所有的li标签名字</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">[&lt;li <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=””&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">data</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">moreurl</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">dict</span>=’{“<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">from</span>“:</span><span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“top-nav-click-main”</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“uid”</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“0”</span>}<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ href=”<a href="https://www.douban.com&quot;" target="_blank" rel="noopener">https://www.douban.com&quot;</a> target=”_blank”&gt;豆瓣&lt;/a&gt;<br style="word-break: normal !important;">&lt;/li&gt;, &lt;li class=”on”&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里获取了所有标签名字为<strong style="word-break: normal !important;">li</strong>的标签</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">2)使用name和attrs参数<br style="word-break: normal !important;"></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 使用name和attrs参数</span><br style="word-break: normal !important;">print(soup.find_all(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘div’</span>, {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘class’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘more-meta’</span>})) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个对上个进行了筛选,属性参数填的是一个字典类型的</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">[&lt;div <span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">more</span>-<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">meta</span>“&gt;<br style="word-break: normal !important;">&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">h4</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">title</span>“&gt;<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;刺<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">h4</span>&gt;<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></span></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里搜索了具有属性为<strong style="word-break: normal !important;">class=’more-meta’的div标签</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">3)根据关键字参数来搜索<br style="word-break: normal !important;"></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 对相关属性进行进行查找也可以这样</span><br style="word-break: normal !important;">print(soup.find_all(class_=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘more-meta’</span>)) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 使用关键字参数，因为class是python关键字，所以关键字参数时需要加多一个下划线来进行区别</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br style="word-break: normal !important;">和上面的结果一样<br style="word-break: normal !important;">…<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里注意，我们找的是<strong style="word-break: normal !important;">class属性为more-meta的标签</strong>，用了关键字参数，但是python里面有class关键字，所以为了不使语法出错，所以需要在<strong style="word-break: normal !important;">class加个下划线</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">其他参数的就不再介绍了，可以自行去官网查看</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">4)find()方法</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">此方法与find_all()方法一样，只不过这个方法只是查找一个标签而已，后者是查找所有符合条件的标签。</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">还有很多类似的方法，用法都差不多，就不再一一演示了，需要的可以去官网查看</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">5)select()方法</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这个方法是使用css选择器来进行筛选标签的。<br style="word-break: normal !important;"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">css选择器：就是根据标签的名字，id和class属性来选择标签。</p><ul class=" list-paddingleft-2" style="width: 530.094px; word-break: normal !important; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">通过标签名</strong>：直接写该标签名，如<strong style="word-break: normal !important;">&nbsp;li a</strong>&nbsp; ,这个就是找li标签下的a标签</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">通过class属性</strong>：用. 符号加class属性值，如&nbsp;<strong style="word-break: normal !important;">.title .time</strong>&nbsp;这个就是找class值为title下的class值为time的标签</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">通过id属性</strong>：用# 加id属性值来进行查找，如&nbsp;<strong style="word-break: normal !important;">#img #width&nbsp;</strong>这个就是找id值为img下的id值为width的标签</p></li><li><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">上面三者可以混合使用，如&nbsp;<strong style="word-break: normal !important;">ul .title #width</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p></li></ul><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">如果还不太会的话，可以直接在浏览器上按下f12来查看</p><p style="word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibdSEM4LzQ6XUOYybwibjibtEw9BPssozfQwBMEmhzcdgbrkH8EpulrfwLIiczIhfCIsiceu3HoY6HsZA/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibdSEM4LzQ6XUOYybwibjibtEw9BPssozfQwBMEmhzcdgbrkH8EpulrfwLIiczIhfCIsiceu3HoY6HsZA/0?wx_fmt=png"></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><span style="word-break: normal !important;">位置在</span>箭头所指的位置就是选择器的表达</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">代码如下</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 还可以用标签选择器来进行筛选元素, 返回的都是一个列表</span><br style="word-break: normal !important;">print(soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ul li div’</span>)) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个是根据标签名进行筛选</span><br style="word-break: normal !important;">print(soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.info .title’</span>)) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个是根据class来进行筛选</span><br style="word-break: normal !important;">print(soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘#footer #icp’</span>)) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个是根据id来进行筛选</span><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 上面的可以进行混合使用</span><br style="word-break: normal !important;">print(soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ul li .cover a img’</span>))<br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">这里的获取属性和文本内容</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><p style="margin-right: 2px; margin-left: 2px; padding: 0.5em 5px; line-height: 18px; font-size: 14px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); letter-spacing: 2px; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取属性</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> attr <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ul li .cover a img’</span>):<br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># print(attr.attrs[‘alt’])</span><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 也可以这样</span><br style="word-break: normal !important;"> &nbsp; &nbsp;print(attr[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘alt’</span>])<br style="word-break: normal !important;"><br style="word-break: normal !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取标签的内容</span><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> tag <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘li’</span>):<br style="word-break: normal !important;"> &nbsp; &nbsp;print(tag.get_text()) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 里面可以包含子标签，会将子标签的内容连同输出</span><br style="word-break: normal !important;"></p></pre></section><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><strong style="word-break: normal !important;">.get_tex()方法和前面的.string属性有点不一样哈，这里的他会获取该标签的所有文本内容，不管有没有子标签</strong></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><span style="font-size: 18px; word-break: normal !important;"><strong style="word-break: normal !important;">写在最后</strong></span></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">以上的这些都是个人在学习过程中做的一点笔记。还有点不足，如果有错误的话欢迎大佬指出哈。如果想要查看更多相关用法可以去官方文档查看：<a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" _src="http://beautifulsoup.readthedocs.io/zh_CN/latest/" _href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" style="word-break: normal !important;" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io/zh_CN/latest/</a></p><p style="word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;">学习参考资料：<a href="https://edu.hellobi.com/course/157" target="_blank" rel="noopener">https://edu.hellobi.com/course/157</a></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">如果这篇文章对你有用，点个赞，转个发如何？</p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">还有，祝大家今天愚人节快乐</p><section style="word-break: normal !important;"><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><br></p><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><p style="word-break: normal !important;"><br></p><section style="padding-right: 15px; padding-left: 15px; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect">爬取《The Hitchhiker’s Guide to Python!》python进阶书并制成pdf</a><span style="color: rgb(79, 129, 189); word-break: normal !important;"></span></span></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" style="word-break: normal !important;">python爬虫常用库之requests详解</a></span></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect">老司机带你用python来爬取妹子图</a></span></p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><br></p></section></section><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><img border="0" height="auto" title="undefined" width="111.297px" _width="111.297px" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640" data-fail="0" style="margin-bottom: 1.4px; border-radius: 5px; border-width: 1px; border-style: dashed; border-color: rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; word-break: normal !important; visibility: visible !important; width: 111.297px !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640"><br style="word-break: normal !important;"></p><p style="text-align: center; word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p></section><section class="_editor"><p><br></p></section>]]></content>
    
    <summary type="html">
    
      经过了前面几篇文章的学习，估计你已经会爬不少中小型网站了。但是有人说，前面的正则很难唉，学不好。正则的确很难，有人说过：如果一个问题用正则解决，那么就变成了两个问题。所以说学不会是很正常的，不怕，除了正则，我们还可以用另外一个强大的库来解析html。所以，今天的主题就是来学习这个强大的库
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="http://sergiojune.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>利用python爬取网易云音乐评论，并把数据存入mysql</title>
    <link href="http://sergiojune.com/2019/01/14/python3.x%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E8%AF%84%E8%AE%BA/"/>
    <id>http://sergiojune.com/2019/01/14/python3.x爬取网易云音乐评论/</id>
    <published>2019-01-14T07:56:44.729Z</published>
    <updated>2019-01-14T08:16:31.661Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section editor="bj.96weixin.com" style="margin:0 auto;padding:0;box-sizing:border-box"><section class="yead_bgc wx-bg" style="border-style: solid; -webkit-border-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13JzTTXXg3mC439fK28gxRK85c5jJicI6ia4ibEOx5DTicoiciamOZc6hcaLFy9S1AfhJzm8kUAHJnv4jtQ/0&quot;) 15 5 5 fill stretch; color: rgb(51, 51, 51); border-width: 10px 4px 4px; padding: 0px; box-sizing: border-box; background-color: rgb(51, 184, 108);"><section style="width: 100%; font-size: 14px; margin: 0px; line-height: 30px; padding: 0px 5px; box-sizing: border-box;" data-width="100%"><p style="padding:0;margin:0;text-align:justify">在简单学习了python爬虫后，又想继续折腾，进而找到了这个网易云音乐，因为本人平时就是用它听的歌，也喜欢看歌里的评论，所以就爬网易云音乐评论吧，那么开始吧！</p></section></section></section><p><br></p><section class="editor"><section class="editor"><section style="width:100%; text-align:center;" data-width="100%"><section style="display: inline-block; border-width: 5px; border-style: solid; -webkit-border-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/uN1LIav7oJ94OAxhxMZuj75SnON56cqmO9jNia9DuXHjVlkiasaiaJIbrtDbmTq6hK2es1BeyapTqz6viaZhgxkxZQ/0?wx_fmt=png&quot;) 5 fill; box-sizing: border-box;"><section style="padding: 2px 10px; text-align: center; color: rgb(225, 201, 255); font-size: 16px; box-sizing: border-box;"><strong>正式进入主题</strong></section></section></section></section></section><p><br></p><p>首先还是去找目标网页并开始分析网页结构，如下</p></section><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802044488.png" title="1802044488.png" alt=""></p><p><br></p><p>上面的三个箭头都是所要找的数据，分别是评论用户，评论和点赞数，都可以用正则表达式找出来，接下来继续找怎样找到下一页的数据，还是用开发者工具，但是当点击下一页的时候，网页的url没有变，说明网页是动态加载，所以就不能在当前网页找数据了，应该在他的<strong>xhr</strong>文件里找，所以点入<strong>network</strong>看看，然后也点击下一页一看，果然有想要的</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802044234.png" title="1802044234.png" alt=""></p><p>看到这里，就兴奋地去敲代码了</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041841.png" title="1802041841.png" alt=""></p><p><br></p><p>一点击运行，结果什么东西都没有，但是他的状态码是200，明显请求成功啊，却没有东西返回，再去network仔细看看这个网页，看到他是个post请求，也看到了需要post两个参数params和ensSecKey</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802043912.png" title="1802043912.png" alt="">一看到这个，密密麻麻的数字和字母，就猜应该是被加密了，不过可以复制下来看看有没有用。接下来看下他的Response，咦，这是个json，不是html结构的，所以需要用到Json库来进行解析</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802045600.png" title="1802045600.png" alt=""></p><p>现在开始敲代码吧，先把上面的两个参数复制过来看看。</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802049865.png" title="1802049865.png" alt=""></p><p>现在把每条评论的评论用户和点赞数和评论获取出来</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041977.png" title="1802041977.png" alt=""></p><p>可以看到，利用json.loads()方法把数据转成python格式里的字典后就可以把想要的数据取出来了，但是，下一页怎样取？总不能每次都复制粘贴那两个参数吧？那唯一的方法就是不爬了。。怎么可能？我的继续，那我就要进行破解这两个参数了，那好继续看<strong>network，</strong>因为要加密，肯定要用js进行加密的</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041200.png" title="1802041200.png" alt=""></p><p>看到刚才那个网站的发起者core.js,,然后把它文件下载下来慢慢研究</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041185.png" title="1802041185.png" alt=""></p><p>保存后在经过美化，然后进行查找那个encSecKey参数（ps:JSj’e’tong’yang’de美化网址为<a href="http://www.css88.com/tool/js_beautify/），然后找到这个" _src="http://www.css88.com/tool/js_beautify/），然后找到这个" target="_blank" rel="noopener">http://www.css88.com/tool/js_beautify/），然后找到这个</a></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802042238.png" title="1802042238.png" alt=""></p><p>看到window.asrsea()方法有四个参数，先不去管这个函数，先看看他的四个参数是什什，这里没必要去研究那四个参数怎样来的，只需要知道他是什么，那么我们可以加点代码上去让他显示出来，从而利用fiddler来进行调试</p><p>加入代码如下<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041943.png" title="1802041943.png" alt=""></p><p>可以分别获取上面的每一个参数，也把那个params获取看看，然后在fiddler上操作如下</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802043715.png" title="1802043715.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802041150.png" title="1802041150.png" alt=""></p><p>完成上面的设置后刷新网页就可以在console上面找到参数信息，如果没有的话这是因为你之前浏览该网页的时候它被缓存了下来，所以要清除缓存文件（在清除浏览器记录里面有）</p><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802042410.png" title="1802042410.png" alt=""></p><p>那个rid有本歌曲的id，明显是与评论有关的，我试着连翻几页后，发现那个offset就是评论偏移数，offset就是(页数-1)<em>20，total在第一页是true，在其他页是false<br></em></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802046744.png" title="1802046744.png" alt="">同样的方法也得到第二个参数为：010001</p><p>第三个参数为：00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7</p><p>第四个参数为：0CoJUm6Qyw8W8jud</p><p><br></p><p>接下来就要看window.asrsea()方法是什么操作的了，还是通过查找js文件可以看到这个<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802044023.png" title="1802044023.png" alt=""></p><p><br></p><p>通过研究i是随机获取十六个字符而b函数是<strong>AES加密</strong>，其中偏移量为<strong>0102030405060708</strong>，模式为<strong>CBC</strong>，看回d函数，其中<strong>params连续两次加密，第一次加密时，<span style="line-height: 25.6px; white-space: pre-wrap;">文本为第一个参数。密钥为第四个参数，第二次加密时文本为第一次加密的值，密钥为随机数a。而encS<span style="line-height: 25.6px; white-space: pre-wrap;">ec</span>key是一个RSA加密，他的公钥是第二个参数，模式是第三个参数，文本为那个随机字符串a</span></strong></p><p><br></p><p>终于分析完了，接着开始敲代码</p><p><br></p><p>先来个获取第一页评论的代码</p><p>这是获取两个参数的类<br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802057877.png" title="1802057877.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802058447.png" title="1802058447.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802056847.png" title="1802056847.png" alt=""></p><p><br></p><p>这是解析网易云音乐和获取评论的类</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802051937.png" title="1802051937.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802052702.png" title="1802052702.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802056776.png" title="1802056776.png" alt=""></p><p><br></p><p>然而一点击运行，直接给我报了个错：<strong>TypeError: can’t concat str to bytes</strong></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802049613.png" title="1802049613.png" alt=""></p><p><br></p><p>原来是因为在第二次加密的时候，那个params是个byte类型，所以把他转成字符串类型就可以了<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802052783.png" title="1802052783.png" alt=""></p><p><br></p><p>再次点击运行，结果还是报错了：<strong>json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</strong></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802057884.png" title="1802057884.png" alt=""></p><p><br></p><p>这个报错因为我的json解析错了，回头调试一看，<strong>网页返回的东西是空的，但他的状态码是200</strong>，这是什么鬼？接着我再试了把那两个参数的值直接复制和前面一样看看，结果运行成功，这就说明我的是加密过程错了，然后我就回去看了几篇，看不出什么错误，上网百度找到了这个知乎文章<strong><a href="https://zhuanlan.zhihu.com/p/32069543" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32069543</a></strong>，我把她的代码复制过来运行下，结果是可以的，我就继续看看我和她的区别，原来我<strong>在用那个16个随机字符的时候用错了，我在两个参数给了两个不同的，而是需要给共同一个的</strong>，看到这里，我就直接回去改了下，果然运行成功，代码我就不贴出来了，效果如下<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802059926.png" title="1802059926.png" alt=""></p><p><br></p><p>接着是获取每一页的评论，而每一页与第一个参数的offset有关，其中的公式为<strong>offse=(页数-1)20</strong>，total在第一页是true，在其他页是false</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802051477.png" title="1802051477.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802058622.png" title="1802058622.png" alt=""><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802052656.png" title="1802052656.png" alt=""></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802055375.png" title="1802055375.png" alt="">而写入数据库我用的是我这篇文章的操作</p><div>&nbsp;<a href="http://mp.weixin.qq.com/s/6sQ_ER39P2NtXaPOnGdQNA" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/6sQ_ER39P2NtXaPOnGdQNA</a><br></div><p>，由于篇幅过长，就不贴出来了，感兴趣的可以去看看<br></p><p><br></p><p>接下来点运行就可以了，但是运行到第八页的时候出现了这个异常</p><p><strong>raise errorclass(errno, errval)</strong></p><p><strong>pymysql.err.InternalError: (1366, “Incorrect string value: ‘\xF0\x9F\x92\x94’ for column ‘content’ at row 1”)</strong></p><p>原因是这条评论有个识别不了的表情，之后百度参考这篇文章<a href="http://blog.csdn.net/HHTNAN/article/details/76769264?locationNum=9&amp;fps=1修改了数据库的编码方式，注意还要自己修改下创建数据库时的编码方式才可！" _src="http://blog.csdn.net/HHTNAN/article/details/76769264?locationNum=9&amp;fps=1修改了数据库的编码方式，注意还要自己修改下创建数据库时的编码方式才可！" target="_blank" rel="noopener">http://blog.csdn.net/HHTNAN/article/details/76769264?locationNum=9&amp;fps=1修改了数据库的编码方式，注意还要自己修改下创建数据库时的编码方式才可！</a></p><p>这是首页数据库效果<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802053659.png" title="1802053659.png" alt=""></p><p><br></p><p>获取完成（家驹的歌评论这么少吗？不解）<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802055481.png" title="1802055481.png" alt=""></p><p><br></p><section class="editor"><p><img src="https://mmbiz.qlogo.cn/mmbiz/QKDxrVYehicdAibIVUpquF6TQUwXFg6dYCrLBEiasLaVyObib9LjK08qQ7IzkYKROO93uxoEnMSl8zRCWiaY7JwgZWg/0?wx_fmt=jpeg" style="margin: 0px; padding: 0px; max-width: 100%;"></p></section><p>终于完成了，虽然辛苦，但是值得，在这个过程中也学会了很多东西，在写这篇文章时参考了两篇文章，一个是知乎首个回答<a href="https://www.zhihu.com/question/36081767/answer/140287795，另一个就是解密过程https://github.com/cosven/cosven.github.io/issues/30" _src="https://www.zhihu.com/question/36081767/answer/140287795，另一个就是解密过程https://github.com/cosven/cosven.github.io/issues/30" target="_blank" rel="noopener">https://www.zhihu.com/question/36081767/answer/140287795，另一个就是解密过程https://github.com/cosven/cosven.github.io/issues/30</a></p><p>大家有什么问题的话欢迎去我的公众号<strong>日常学python</strong>的后台那里问我，我知道的我都一一为你解答，最后，若你也在这篇文章学到了，可以帮我点个赞，转发下吗？谢谢支持哈！</p><p><br></p><p>ps:若需要完整代码可以在我的公众号<strong>日常学python</strong>后台回复评论即可获取，还有其他福利以后会一一分析</p><p><span style="line-height: inherit;"></span><span style="line-height: inherit;">我的公众号的二维码<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802053253.png" title="1802053253.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802053253.png" alt=""></span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      在简单学习了python爬虫后，又想继续折腾，进而找到了这个网易云音乐，因为本人平时就是用它听的歌，也喜欢看歌里的评论，所以就爬网易云音乐评论吧，那么开始吧！
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>说说数据库</title>
    <link href="http://sergiojune.com/2019/01/14/%E8%AF%B4%E8%AF%B4%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://sergiojune.com/2019/01/14/说说数据库/</id>
    <published>2019-01-14T07:56:44.717Z</published>
    <updated>2019-01-14T08:10:42.954Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section style="padding: 5px; box-sizing: border-box;"><section class="96wx-bgc" style="width: 12px; height: 12px; float: left; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: right; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section style="clear: both;"></section><section style="padding: 0px 10px; margin: -5px; box-sizing: border-box;"><section style="border: 2px dotted rgb(193, 193, 193); padding: 10px; box-sizing: border-box;"><p>爬了数据，只能放在记事本上？小的数据还是可以的，但是当你遇到较多的数据，放在记事本上就不是很好了，这时就需要用到数据库来存储了，那我们今天的主题就是入门数据库，在入门数据库之前，我首先介绍下什么是数据库。<br></p></section></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: left; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: right; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section style="clear: both;"></section></section></section><p><br></p><section class="editor"><section style="margin:10px auto;"><section style="width: 100%; font-size: 18px; height: 40px; line-height: 40px; border-bottom-width: 2px; border-bottom-style: solid; border-bottom-color: rgb(30, 28, 28); text-align: center; box-sizing: border-box;" data-width="100%">进入正题</section><section style="width: 100%; margin-top: 1px; border-top-style: solid; border-top-width: 1px; border-top-color: rgb(30, 28, 28); box-sizing: border-box;" data-width="100%"></section></section></section><p><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;"><span style="color: #FFFFFF;vertical-align:middle;" class="autonum">1</span></p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p style=""><span style="font-family:微软雅黑">什么是数据库</span></p></section></section></section></section></section><p>在这里我把百度百科的贴出来给大家哈，我也不好解释，毕竟自己页没有到那种境界</p><p><br></p><blockquote><p style="font-family: arial, 'pingfang sc', stheiti, simsun, sans-serif; text-indent: 2em; line-height: 25px; color: rgb(51, 51, 51); font-size: 14px; white-space: normal;">数据库(Database)是按照 数据结构来组织、 存储和管理数据的仓库，它产生于距今六十多年前，随着 信息技术和市场的发展，特别是二十世纪九十年代以后， 数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种 类型，从最简单的存储有各种数据的 表格到能够进行海量 数据存储的大型&nbsp;数据库系统都在各个方面得到了广泛的应用。</p><p style="font-family: arial, 'pingfang sc', stheiti, simsun, sans-serif; text-indent: 2em; line-height: 25px; color: rgb(51, 51, 51); font-size: 14px; white-space: normal;">在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。数据库技术是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心部分，是进行科学研究和决策管理的重要技术手段。</p></blockquote><p><br></p><p>数据有两种，一种是<strong>关系型数据库</strong>，另一种是<strong>非关系型数据</strong>。关系型数据就是以行和列的形式存储数据，以便于用户理解，这一系列的行和列称为表，一组表组成了数据库。表与表之间的数据记录有关系。非关系型数据，也叫<strong>NoSQL</strong>，就是Not only SQL。其性能是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能会非常高，而可扩展性同样也是基于键值对的，数据之间没有耦合性，所以非常容易水平扩展。比如我们即将学到的mongodb和redis都是这类型的数据库。</p><p><br></p><section class="editor"><section style="margin:20px auto 16px;text-align:center;"><section style="border-top-style: solid; border-top-width: 1px; border-top-color: rgb(137, 137, 137); box-sizing: border-box;"><section style="border: 1px solid rgb(137, 137, 137); height: 30px; width: 30px; border-radius: 50%; margin-left: 50px; display: block; text-align: left; margin-top: -15px; box-sizing: border-box; background-color: rgb(255, 255, 255);"><section style="height: 24px; width: 24px; line-height: 24px; border-radius: 50%; margin: 2px auto 0px; text-align: center; color: rgb(255, 255, 255); box-sizing: border-box; background-color: rgb(233, 131, 109);"><p style="line-height:1.5em;">2</p></section></section><section style="display: block; padding: 0px 8px; line-height: 24px; font-size: 18px; margin-top: -30px; text-align: center; box-sizing: border-box;"><section style="display: inline-block; padding: 0px 8px; box-sizing: border-box; background-color: rgb(254, 254, 254);"><p>学习数据库<br></p></section></section></section></section></section><p>今天我们先学习下关系型数据库的一种MySQL。<br></p><p>那么我们就要先下载好mysql这个工具，网站我直接贴出来了<strong><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></strong>，在上面选择自己的版本进行下载安装即可。或者去下载<strong>XAMPP</strong>集成包，里面也有MySQL程序。百度即有下载。</p><p><br></p><p>下载了数据库，还要下载个可视化工具，这样可以清储看到数据内容。可视化工具是Navicat，下载地址为<strong></strong><a href="https://www.navicat.com/en/products。注册码的百度找就有了，土豪请无视吧，下载安装后打开是这样的" _src="https://www.navicat.com/en/products。注册码的百度找就有了，土豪请无视吧，下载安装后打开是这样的" target="_blank" rel="noopener">https://www.navicat.com/en/products。注册码的百度找就有了，土豪请无视吧，下载安装后打开是这样的</a></p><p> <img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802138307.png" title="1802138307.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802138307.png" alt=""></p><p><br></p><p>然后点击连接，先连接一个本地数据库吧，<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802134386.png" title="1802134386.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802134386.png" alt=""></p><p><br></p><p>填好上面的数据，注意上面只需填连接名和密码即可，本地连接的ip，端口和名字都是固定的，无需自己写了，然后点击测试看看，<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802136111.png" title="1802136111.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802136111.png" alt=""></p><p><br></p><p>连接成功就可以按下确定了，这样就成功连接到你的本地数据库了。</p><p><br></p><p>注意：密码是自己设置的，可以点击mysql的这个来设置，如下图<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802132973.png" title="1802132973.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802132973.png" alt=""></p><p><br></p><section class="editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="96wx-bdlc 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section class="96wx-bdbc" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right-width: 15px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96wx-bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; box-sizing: border-box; background-color: rgb(245, 189, 209);"><span style="color:inherit; font-size:12px">END</span></section><section class="96wx-bdlc" style="margin: 0px; padding: 0px; border-left-width: 15px; border-left-style: solid; border-left-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; height: 0px; width: 0px; float: left; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; box-sizing: border-box;"></section></section></section></section></section><p>最后，你可以先自己在可视化工具尝试建立自己的第一个数据库看看，不会也没关系，我在明天继续更新mysql的相关基础语法。</p><p><br></p><p>​<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      爬了数据，只能放在记事本上？小的数据还是可以的，但是当你遇到较多的数据，放在记事本上就不是很好了，这时就需要用到数据库来存储了，那我们今天的主题就是入门数据库，在入门数据库之前，我首先介绍下什么是数据库。
    
    </summary>
    
      <category term="数据库" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://sergiojune.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用requests+BeautifulSoup的简单爬虫练习</title>
    <link href="http://sergiojune.com/2019/01/14/%E4%BD%BF%E7%94%A8requests+BeautifulSoup%E7%9A%84%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/"/>
    <id>http://sergiojune.com/2019/01/14/使用requests+BeautifulSoup的简单爬虫练习/</id>
    <published>2019-01-14T07:56:44.678Z</published>
    <updated>2019-01-14T08:24:50.467Z</updated>
    
    <content type="html"><![CDATA[<section class="_editor" data-mpa-powered-by="yiban.io" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section class="_editor" style="max-width: 100%; word-break: normal !important;"><p class="_brush" style="margin-right: auto; margin-left: auto; max-width: 600px; word-wrap: normal; border-width: 1px; border-style: solid; border-color: rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; text-align: center; word-break: normal !important;"><span style="color: rgb(255, 0, 0); word-break: normal !important;">这是日常学python的第17篇原创文章</span></p></section><p style="word-break: normal !important;">上篇文章说了BeautifulSoup库之后，今篇文章就是利用上篇的知识来爬取我们今天的主题网站：<strong style="word-break: normal !important;">猫眼电影top100。</strong>这个网站也挺容易的，所以大家可以先自己爬取下，遇到问题再来看下这篇文章哈。</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">这篇文章主要是练习而已，别无用处，大佬请绕道哈！</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><strong style="word-break: normal !important;">1、本文用到的库及网站</strong><br style="word-break: normal !important;"></p><ul class=" list-paddingleft-2" style="width: 530.094px; word-break: normal !important; margin: 0px; padding: 0px 0px 0px 30px;"><li><section class="_editor" style="max-width: 100%; word-break: normal !important;"><p style="word-break: normal !important;">requests</p></section></li><li><section class="_editor" style="max-width: 100%; word-break: normal !important;"><p style="word-break: normal !important;">BeautifulSoup</p></section></li><li><section class="_editor" style="max-width: 100%; word-break: normal !important;"><p style="word-break: normal !important;">目标网站：<a href="http://maoyan.com/board/4" target="_blank" rel="noopener">http://maoyan.com/board/4</a></p></section></li></ul><section class="_editor" style="max-width: 100%; word-break: normal !important;"><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><strong style="word-break: normal !important;">2、分析目标网站</strong></p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJcGSSsCZQibiauzZicXFFiaj6TzCwibCy11wKJbVgAqOuGKRnkkoqQKAq5mrQ/0?wx_fmt=png" data-copyright="0" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJcGSSsCZQibiauzZicXFFiaj6TzCwibCy11wKJbVgAqOuGKRnkkoqQKAq5mrQ/0?wx_fmt=png"></p><p style="word-break: normal !important;">很容易找到我们想要的信息，上面的5的箭头都是我们想要的信息，分别是电影图片地址、电影名字、主演、上演时间和评分。内容有了，接下来就是获取下一页的链接。</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><img src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJcYp39udvAUYTHdqH75PGRaM4k8oyCC0qZGaErLYPibibSCgCjQfMLvDhw/0?wx_fmt=png" title="1523015535292275.png" alt="image.png" class="js_catchremoteimageerror" data-cropselx1="0" data-cropselx2="497" data-cropsely1="0" data-cropsely2="326" data-copyright="0" style="height: 251px; width: 558px; word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJcYp39udvAUYTHdqH75PGRaM4k8oyCC0qZGaErLYPibibSCgCjQfMLvDhw/0?wx_fmt=png"></p><p style="word-break: normal !important;">这里有两种方法，第一种就是在首页获取所有页的链接，第二种方法就是获取每个页面的下一页的链接。在这里由于只是给了部分页面的链接出来，所以我们获取的是下一页的链接，这样子方便点。</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">好了，分析完毕，接下来代码撸起。</p><p style="word-break: normal !important;"><strong style="word-break: normal !important;">3.敲代码</strong></p><p style="word-break: normal !important;">什么都不管，立即来个get请求</p><p style="word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: #a9b7c6; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">import</span> requests<br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">from</span> bs4 <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">import</span> BeautifulSoup<br style="word-break: normal !important;"><br style="word-break: normal !important;">url_start = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://maoyan.com/board/4&#39;" target="_blank" rel="noopener">http://maoyan.com/board/4&#39;</a></span><br style="word-break: normal !important;">response = requests.get(url_start)<br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">if</span> response.status_code == <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: #ae87fa; word-wrap: inherit !important; word-break: inherit !important;">200</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp;soup = BeautifulSoup(response.text, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘lxml’</span>)<br style="word-break: normal !important;">print(response.text)<br style="word-break: normal !important;"></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">输出结果：</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><img src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJc0TSCzbhONjIfgrakjHwjSVAKFH1c067raJDybylib0qkoQRAmvjEXfg/0?wx_fmt=png" title="1523016215745434.png" alt="image.png" class="js_catchremoteimageerror" data-cropselx1="0" data-cropselx2="497" data-cropsely1="0" data-cropsely2="326" data-copyright="0" style="height: 254px; width: 558px; word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicDiadOvZOTyZumFhG1UNmJc0TSCzbhONjIfgrakjHwjSVAKFH1c067raJDybylib0qkoQRAmvjEXfg/0?wx_fmt=png"></p><p style="word-break: normal !important;">惊不惊喜，意不意外？如果你经常玩爬虫的，这个就见怪不怪了，我们被反爬了。我们试下加个请求头试试。</p><p style="word-break: normal !important;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: #a9b7c6; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">url_start = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://maoyan.com/board/4&#39;" target="_blank" rel="noopener">http://maoyan.com/board/4&#39;</a></span><br style="word-break: normal !important;">headers = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘User-Agent’</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36’</span>}<br style="word-break: normal !important;">response = requests.get(url_start, headers=headers)<br style="word-break: normal !important;"></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">这样就可以正常返回了，因为一般的网站都会在请求头上加个反爬的，所以遇到了反爬也不要着急，加个请求头试试？</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">接下来用BeautifulSoupL来获取内容</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: #a9b7c6; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">imgs = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘dd .board-img’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 这是获取图片链接</span><br style="word-break: normal !important;">titles = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘dd .board-item-main .name’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 这是获取电影名字</span><br style="word-break: normal !important;">starses = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘dd .board-item-main .movie-item-info .star’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 这是获取电影主演</span><br style="word-break: normal !important;">times = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘dd .board-item-main .movie-item-info .releasetime’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 这是获取电影上映时间</span><br style="word-break: normal !important;">scores = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘dd .board-item-main .score-num’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 这是获取评分</span><br style="word-break: normal !important;"></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">这里每个获取的语句都包含了每个不同电影的信息，这样就不能和正则那样一次把每个电影的信息都在同一个字符里面了。就比如我获取的图片，一个语句获取的是这个页面的所有电影图片的链接，我们存储的时候就要分别取出来了。这里我用到的是for循环0到9把相同的坐标的信息存进同一个字典里面。</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"><span style="color: #a9b7c6; word-break: normal !important;">films = [] &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 存储一个页面的所有电影信息</span><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">for</span> x <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">in</span> range(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: #ae87fa; word-wrap: inherit !important; word-break: inherit !important;">0</span>, </span><span style="color: #ae87fa; word-break: normal !important;">10</span><span style="color: #a9b7c6; word-break: normal !important;">):<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="hljs-comment" style="color: #808080; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"># 这个是获取属性的链接</span><span style="color: #a9b7c6; word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;img = imgs[x][</span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘data-src’</span><span style="color: #a9b7c6; word-break: normal !important;">]<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="hljs-comment" style="color: #808080; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"># 下面的都是获取标签的内容并去掉两端空格</span><span style="color: #a9b7c6; word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;title = titles[x].get_text().strip()<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;stars = starses[x].get_text().strip()[</span><span class="hljs-number" style="color: #ae87fa; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">3</span><span style="color: #a9b7c6; word-break: normal !important;">:] &nbsp;</span><span class="hljs-comment" style="color: #808080; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"># 使用切片是去掉主演二字</span><span style="color: #a9b7c6; word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;time = times[x].get_text().strip()[</span><span class="hljs-number" style="color: #ae87fa; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">5</span><span style="color: #a9b7c6; word-break: normal !important;">:] &nbsp;</span><span class="hljs-comment" style="color: #808080; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"># 使用切片是去掉上映时间二字</span><span style="color: #a9b7c6; word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;score = scores[x].get_text().strip()<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;film = {</span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘title’</span><span style="color: #a9b7c6; word-break: normal !important;">: title</span><span style="color: #a9b7c6; word-break: normal !important;">, </span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘img’</span><span style="color: #a9b7c6; word-break: normal !important;">: img, </span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘stars’</span><span style="color: #a9b7c6; word-break: normal !important;">: stars, </span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘time’</span><span style="color: #a9b7c6; word-break: normal !important;">: time, </span><span class="hljs-string" style="color: #eedc70; font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">‘score’</span><span style="color: #a9b7c6; word-break: normal !important;">: score}<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;films.append(film)<br style="word-break: normal !important;"></span></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">接下来就是获取每一页的链接</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: #a9b7c6; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">pages = soup.select(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘.list-pager li a’</span>) &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: #808080; word-wrap: inherit !important; word-break: inherit !important;"># 可以看到下一页的链接在最后一个a标签</span><br style="word-break: normal !important;"> &nbsp; &nbsp;page = pages[len(pages)<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: #ae87fa; word-wrap: inherit !important; word-break: inherit !important;">-1</span>][<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">‘href’</span>]<br style="word-break: normal !important;"></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">后面的就简单了，就是利用循环把所有页面的内容都去取出来就可以了，代码就不贴出来了。</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><strong style="word-break: normal !important;">写在最后</strong></p><p style="word-break: normal !important;">这个就是BeautifulSoup库的小练习，用到昨天的内容不多，只是用到了选择器部分和获取文本内容和属性部分，感觉还是正则比较好用点哈，我一个正则就可以获取每个电影的详细内容了，如下:</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: #a9b7c6; background: #282b2e; word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">&lt;dd&gt;.<em>?board-index.</em>?&gt;([\d]{<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: #ae87fa; word-wrap: inherit !important; word-break: inherit !important;">1</span>,<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: #ae87fa; word-wrap: inherit !important; word-break: inherit !important;">3</span>})&lt;/i&gt;.<em>?title=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: #eedc70; word-wrap: inherit !important; word-break: inherit !important;">“(.</span></em>?)”.<em>?<span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: #f82375; word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">star</span>“&gt;<span class="hljs-params" style="font-size: inherit; line-height: inherit; color: #ff9823; word-wrap: inherit !important; word-break: inherit !important;">(.</span></span></em>?)&lt;/<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">p</span>&gt;.<em>?<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">releasetime</span>“&gt;<span class="hljs-params" style="font-size: inherit; line-height: inherit; color: #ff9823; word-wrap: inherit !important; word-break: inherit !important;">(.</span></em>?)&lt;/<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">p</span>&gt;.<em>?<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">integer</span>“&gt;<span class="hljs-params" style="font-size: inherit; line-height: inherit; color: #ff9823; word-wrap: inherit !important; word-break: inherit !important;">(.</span></em>?)&lt;/<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">i</span>&gt;.<em>?<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">class</span>=”<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">fraction</span>“&gt;<span class="hljs-params" style="font-size: inherit; line-height: inherit; color: #ff9823; word-wrap: inherit !important; word-break: inherit !important;">(.</span></em>?)&lt;/<span class="hljs-title" style="font-size: inherit; line-height: inherit; color: #a5da2d; word-wrap: inherit !important; word-break: inherit !important;">i</span>&gt;<br style="word-break: normal !important;"></code></pre></section><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">还需要用到个匹配模式哈：<strong style="word-break: normal !important;">re.S</strong>就可以了。所以本人推荐使用正则表达式哈。</p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;">需要完整代码的请查看我的github哈！</p><p style="word-break: normal !important;">github：<a href="https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/index.py" _src="https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/index.py" _href="https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/index.py" style="word-break: normal !important;" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/index.py</a></p><p style="word-break: normal !important;"><br></p><p style="margin-bottom: 5px; padding-right: 5px; padding-left: 5px; line-height: 1.5em; letter-spacing: 2px; word-break: normal !important;">如果这篇文章对你有用，点个赞，转个发如何？</p><section style="word-break: normal !important;"><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><br></p><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><p style="word-break: normal !important;"><br></p><section style="padding-right: 15px; padding-left: 15px; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect" style="word-break: normal !important;">爬取《The Hitchhiker’s Guide to Python!》python进阶书并制成pdf</a><span style="color: #4f81bd; word-break: normal !important;"></span></span></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483766&amp;idx=1&amp;sn=7c7a237e8fda8e0c7085740034b81e8e&amp;chksm=fb4a7bdacc3df2cc04cd32fa6f58f7dfe2e2e829e7709676f1fa6b1846cf7ceb3ef60fcb2e3e&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483766&amp;idx=1&amp;sn=7c7a237e8fda8e0c7085740034b81e8e&amp;chksm=fb4a7bdacc3df2cc04cd32fa6f58f7dfe2e2e829e7709676f1fa6b1846cf7ceb3ef60fcb2e3e&amp;scene=21#wechat_redirect">python爬虫常用库之BeautifulSoup详解</a></span></p><p style="padding-right: 5px; padding-left: 5px; letter-spacing: 2px; word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect" style="word-break: normal !important;">老司机带你用python来爬取妹子图</a></span></p><p style="word-break: normal !important;"><br></p><p style="word-break: normal !important;"><br></p></section></section><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><img border="0" height="auto" title="undefined" width="111.297px" _width="111.297px" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640" data-fail="0" style="margin-bottom: 1.4px; border-radius: 5px; border-width: 1px; border-style: dashed; border-color: #a8a4ab; box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; word-break: normal !important; visibility: visible !important; width: 111.297px !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWic7kTqqWcYlc513VaLSgic5P9bIBwdybZBf6KpAX6nhqeHkC0cW2KfQgGCiaREUD1uxt6nLhSO2bWsg/640"><br style="word-break: normal !important;"></p><p style="text-align: center; word-break: normal !important;"><br></p><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="padding-right: 5px; padding-left: 5px; text-align: center; letter-spacing: 2px; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><div><span style="font-size: 14px; word-break: normal !important;"><br></span></div></section><section class="_editor" style="max-width: 100%; word-break: normal !important;"></section></section>]]></content>
    
    <summary type="html">
    
      这个网站也挺容易的，所以大家可以先自己爬取下，遇到问题再来看下这篇文章哈。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>入门mysql数据库</title>
    <link href="http://sergiojune.com/2019/01/14/%E5%85%A5%E9%97%A8mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://sergiojune.com/2019/01/14/入门mysql数据库/</id>
    <published>2019-01-14T07:56:44.661Z</published>
    <updated>2019-01-14T08:25:19.833Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><section class="editor"><section style="padding: 5px; box-sizing: border-box;"><section class="96wx-bgc" style="width: 12px; height: 12px; float: left; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: right; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section style="clear: both;"></section><section style="padding: 0px 10px; margin: -5px; box-sizing: border-box;"><section style="border: 2px dotted rgb(193, 193, 193); padding: 10px; box-sizing: border-box;"><p>上篇文章简单说了下数据库，并教了怎样安装mysql工具和可视化工具，不知道你现在安装好了没？那今天我们继续说mysql，今天说下mysql语句。</p></section></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: left; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section class="96wx-bgc" style="width: 12px; height: 12px; float: right; color: rgb(255, 255, 255); border-radius: 50%; box-sizing: border-box; background-color: rgb(239, 112, 96);"></section><section style="clear: both;"></section></section></section><section class="editor"><section style="margin:10px auto;"><section style="width: 100%; font-size: 18px; height: 40px; line-height: 40px; border-bottom-width: 2px; border-bottom-style: solid; border-bottom-color: rgb(30, 28, 28); text-align: center; box-sizing: border-box;" data-width="100%">进入正题</section><section style="width: 100%; margin-top: 1px; border-top-style: solid; border-top-width: 1px; border-top-color: rgb(30, 28, 28); box-sizing: border-box;" data-width="100%"></section></section></section><p><br></p><p>mysql语句分为两种，一种是<strong>DDL</strong>，就是数据定义语句，比如那些CREATE,ALTER。另一种是<strong>DML</strong>，就是数据管理语句，比如增删改查，我所说的就是DML，那么开始吧！<br></p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">1</section></section><section style="word-wrap: break-word; border-bottom-width: 2px; border-bottom-style: dashed; border-bottom-color: rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">创建并使用数据库</span></section></section></section><p>我们先打开navicat可视化管理工具，连接好我们的本地数据库<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802149596.png" title="1802149596.png" alt=""></p><p><br></p><p>然后点击查询，进行写我们的mysql语句<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802147751.png" title="1802147751.png" alt=""></p><p><br></p><p>那么正式开始创建数据库并使用<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802145264.png" title="1802145264.png" alt=""></p><p><br></p><p>这里我创建了个school的数据库，并使用了他。运行语句可以直接点上面的运行，也可以这样<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802144356.png" title="1802144356.png" alt=""></p><p><br></p><p><strong>注意：</strong>那个数据库的引号是个<strong>反引号</strong>，在tab键的上方，还有mysql的注释是<strong>两个划线再加一个空格</strong>。语句结束后最好加个 <strong>;</strong> 来结束</p><p><br></p><p>在这里我们也可以看看我们已有的数据库<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802142086.png" title="1802142086.png" alt=""></p><p><br></p><p>上面成功创建后你将会在左侧看到这个数据库，这样就成功了。<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802142969.png" title="1802142969.png" alt=""></p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">2</section></section><section style="word-wrap: break-word; border-bottom-width: 2px; border-bottom-style: dashed; border-bottom-color: rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">进行建表</span></section></section></section><p><br></p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802142620.png" title="1802142620.png" alt=""></p><p>上面创建了一个student的表格，并且有id，name，sex，age，address和in_school这几个栏位，其中id是自增的，用了<strong>AUTO_INCREMENT</strong>来声明的。<strong>NOT NULL</strong> 就是代表该栏位不能为空，<strong>NULL</strong>就是相反的。而INT,CHAR这些是数据类型，mysql的数据类型有int,char,varchar(括号里的是自定义长度),datetime等。那么，接下来点击运行，<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802147631.png" title="1802147631.png" alt=""></p><p><br></p><p>结果报了错，说我没有主键，那我们可以在id栏位加上主键声明<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802147578.png" title="1802147578.png" alt=""></p><p><br></p><p>再次运行，就成功了，你点开数据库，你会看到这个<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802144513.png" title="1802144513.png" alt=""></p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">3</section></section><section style="word-wrap: break-word; border-bottom-width: 2px; border-bottom-style: dashed; border-bottom-color: rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">进行增删改查操作</span></section></section></section><p><strong>1).往数据库添加数据</strong></p><p>格式为：INSERT INTO <code>tablename</code> VALUE(v1,v2,v3,…),如下：<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802144236.png" title="1802144236.png" alt=""></p><p><br></p><p>这是往students表中添加数据，VALUE后的括号填的<strong>值需要对应刚才你创建表时候的栏位</strong>，要不会报错。但是如果每个都需要这样岂不是很麻烦？不怕。</p><p>若是只想填几个栏位，也可以这样填<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802147720.png" title="1802147720.png" alt=""></p><p><br></p><p>这里是在表名加个你需要填的栏位即可，后面的数据也要记得一 一对应，还有的就是，那些是<strong>NOT NULL 的必须要填</strong>，否则也会报错。</p><p>添加了数据之后效果如下图<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802145784.png" title="1802145784.png" alt=""></p><p><br></p><p>还有一个问题就是，可不可以一次性添加多个数据？答案是肯定可以。想一次性添加多个数据时，只需要把<strong>VALUE改成VALUES</strong>即可，然后每个数据用逗号隔开，如下：<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802141170.png" title="1802141170.png" alt=""></p><p><br></p><p><strong>2).查询表格中的数据</strong></p><p>最简单的格式为：SELECT data FROM tablename</p><p>查询students表格的所有数据</p><p><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802146925.png" title="1802146925.png" alt=""></p><p><br></p><p><strong>*</strong> 是代表所有数据，实际开发中并不会这样查询，因为会影响效率。我们可以指定某一栏位进行查询，如下<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802143225.png" title="1802143225.png" alt=""></p><p><br></p><p>这样代表只查name和sex这两个栏位的。</p><p><br></p><p>我们还可以按条件来进行查询，比如只查询性别为女的，嘻嘻<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802142965.png" title="1802142965.png" alt=""></p><p><br></p><p>这样就查到了性别为女的数据，可以看到，<strong>WHERE</strong>后面跟的就是条件</p><p><br></p><p>我们还可以将结果进行排序<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802143100.png" title="1802143100.png" alt=""></p><p><br></p><p>这里可以看到他是按照id来倒序来排的，<strong>ORDER BY </strong>后面跟的是排序条件，而那个<strong>DESC</strong>是倒序，默认是顺序，为<strong>ASC</strong>。</p><p><br></p><p>查询还不止这些，比如还可以指定偏移数来查询多少数据，如下<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802141906.png" title="1802141906.png" alt=""></p><p><br></p><p>这里是查询年龄大于19岁的学生，并且按照id来降序来排，查询了第一页的3条数据。其中<strong>LIMIT</strong>就是指定查询多少页的多少数据。上述的 <strong>1 </strong>代表的是偏移数， 而<strong> 3 </strong>就是代表数据数，所有表示的是偏移一个数据来查下面的三个数据。</p><p><br></p><p>其实，查询是有一条很长的表达式的，如下：</p><p><br></p><p><strong>SELECT</strong> data<strong> FROM </strong>tablename<strong> WHERE </strong>condition<strong> GROUP BY </strong>con <strong> HAVING </strong>condition<strong> ORDER BY </strong>condition<strong> LIMIT </strong>offset,num<br></p><p><br></p><p>我们在写查询语句时，必须按照上面的顺序，粗体字就是关键字，要不会出错，没有时可以省略。再说说上面还没有说过的几个关键字。</p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>GROUP BY:这个是分组。</p></li><li><p>HAVING:这个是按条件来分组。</p></li></ul><p>好了，查询的就这么多。</p><p><br></p><p><strong>3).修改数据</strong></p><p>格式为：<strong>UPDATE</strong> tablename <strong>SET </strong>data [<strong>WHERE</strong> condition]</p><p>中括号里的是可以省略，为删除的条件，<strong>省略时就为更改所有数据</strong><img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802149765.png" title="1802149765.png" alt=""></p><p><br></p><p>上面的就是修改表格students的表格，其中<strong>SET</strong>的数据是修改的数据</p><p><br></p><p><strong>4).删除数据</strong></p><p>格式为：DELETE FROM tablename [WHERE condition]</p><p><br></p><p>中括号和修改数据的意思一样，也挺简单的。注意：<strong>不写WHERE</strong>时是删除该表格的所有数据<img src="http://pic.96weixin.com/upload/image2/vip/881679/1802/1802142372.png" title="1802142372.png" alt=""></p><p><br></p><p>这是删除students表的性别为男的数据</p><p><br></p><section class="editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="96wx-bdlc 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-left-width: 1px; border-left-style: solid; border-left-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section class="96wx-bdbc" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right-width: 15px; border-right-style: solid; border-right-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96wx-bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; box-sizing: border-box; background-color: rgb(245, 189, 209);"><span style="color:inherit; font-size:12px">END</span></section><section class="96wx-bdlc" style="margin: 0px; padding: 0px; border-left-width: 15px; border-left-style: solid; border-left-color: rgb(245, 189, 209); border-top-width: 12px; border-top-style: solid; border-top-color: transparent; height: 0px; width: 0px; float: left; border-bottom-width: 12px; border-bottom-style: solid; border-bottom-color: transparent; box-sizing: border-box;"></section></section></section></section></section><p>好了，如果你跟着我一步步做，恭喜你，学会了简单的数据库语句，现在留个练习给你们，可以检验下自己有没有学会操作mysql：</p><p><br></p><p><span style="line-height: 25.6px;">1.</span><span style="line-height: inherit;">创建一个数据库,然后设计一个新闻表(数据类型要使用合理)</span><br></p><p><span style="line-height: 25.6px;">2.</span>使用SQL语句向数据表写入十五条不同的数据</p><p>3.使用SQL语句查询类别为“百家”的新闻数据</p><p>4.使用SQL语句删除一条新闻数据</p><p>5.使用SQL语句查询所有的新闻，以添加时间的倒序进行排列</p><p>6.使用SQL语句查询第二页数据(每一页5条数据)</p><p><br></p><p>学会了mysql语句，如果想学更多请去官方文档哈，这是网址<a href="https://dev.mysql.com/doc/refman/5.7/en/。在下一篇文章我将会讲述如何用python来连接操作数据库。记得来看看哈！" _src="https://dev.mysql.com/doc/refman/5.7/en/。在下一篇文章我将会讲述如何用python来连接操作数据库。记得来看看哈！" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/。在下一篇文章我将会讲述如何用python来连接操作数据库。记得来看看哈！</a></p><p><br></p><p>祝大家今天情人节快乐哈，我没什么礼物送给大家，只能送点学习资料，如果需要的话可以在后天回复<strong>资源</strong>即可获得哈 ！多谢大家捧场。</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      上篇文章简单说了下数据库，并教了怎样安装mysql工具和可视化工具，不知道你现在安装好了没？那今天我们继续说mysql，今天说下mysql语句。
    
    </summary>
    
      <category term="数据库" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://sergiojune.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何爬取asp动态网页？搞定可恶的动态参数，这一文告诉你！</title>
    <link href="http://sergiojune.com/2019/01/14/%E5%A6%82%E4%BD%95%E7%88%AC%E5%8F%96asp%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%EF%BC%9F%E6%90%9E%E5%AE%9A%E5%8F%AF%E6%81%B6%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%EF%BC%8C%E8%BF%99%E4%B8%80%E6%96%87%E5%91%8A%E8%AF%89%E4%BD%A0%EF%BC%81/"/>
    <id>http://sergiojune.com/2019/01/14/如何爬取asp动态网页？搞定可恶的动态参数，这一文告诉你！/</id>
    <published>2019-01-14T07:56:44.631Z</published>
    <updated>2019-01-14T08:19:13.338Z</updated>
    
    <content type="html"><![CDATA[<p data-mpa-powered-by="yiban.io" style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important; text-align: center;">这个asp网站是我的学校的电费查询系统，需要学校的内网才能查询，所以这文说下思路和我遇到的一些坑。我搞这个网站主要是为了方便查电费而已，其实也方便不了多少。而且这个asp网站还不是很容易爬，因为里面有两个可变的参数，会根据页面来变化。好了，先看看页面</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOql36mUssTWKTmBD3z0rcR3chfqia6VW3RlxahkOJd9O3Nl3iaj2KQ9XEYg/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOql36mUssTWKTmBD3z0rcR3chfqia6VW3RlxahkOJd9O3Nl3iaj2KQ9XEYg/0?wx_fmt=png"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个网站需要先登陆进自己的宿舍才能进去，还有很烂的验证码，不过我实现到验证码写入的时候发现这个验证码是可以随便填的，这个就感觉有点垃圾。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个登陆页面有很多坑，下面说下</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">1.</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqld7T4lPTHf1EnNxbAgm0as5piaB5JPsP358B2d8dfia24h1bSyjOhG3Jw/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqld7T4lPTHf1EnNxbAgm0as5piaB5JPsP358B2d8dfia24h1bSyjOhG3Jw/0?wx_fmt=png"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">上面右边所指的就是两个动态变化的参数，怎么来的呢？是根据上一个页面来的，每个页面都会带有这两个参数，所以我们需要每次访问一次都需要匹配下这两个值就行动态更换，如果不跟换的话，会得不到数据，还会出现下面这个错误。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;">‘236|error|500|回发或回调参数无效。在配置中使用&nbsp;&lt;pages&nbsp;enableEventValidation=”true”/&gt;&nbsp;或在页面中使用&nbsp;&lt;%@&nbsp;Page&nbsp;EnableEventValidation=”true”&nbsp;%&gt;&nbsp;启用了事件验证。出于安全目的，此功能验证回发或回调事件的参数是否来源于最初呈现这些事件的服务器控件。如果数据有效并且是预期的，则使用 ClientScriptManager.RegisterForEventValidation 方法来注册回发或回调数据以进行验证。|’<br></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个就说明你没有更换好上面所说的两个参数</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">注意：第一次访问这个网站是不会有宿舍楼层宿舍号这些数据的，需要进行匹配上面的两个可变参数再进行post才会有数据。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">2.</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">在你选好你的宿舍楼层号之后表单数据就会出现变化</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlvFwQRfFgLW24XIriaNHRDSuftoeL7CmrMoibzA7gruT9AhzrnnQ9g79g/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlvFwQRfFgLW24XIriaNHRDSuftoeL7CmrMoibzA7gruT9AhzrnnQ9g79g/0?wx_fmt=png"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">可以看到表单的参数顺序和上面的不一样了，所以在选好宿舍楼层之后我们需要把变单顺序改变后再把参数post出去，要不还会出现上面那个坑，就是回调参数无效</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlwq1n3UfS2GibODMGic8CEn7vtShkOicJOf6vbibiaEh90ztVy5M2cvVdLzg/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlwq1n3UfS2GibODMGic8CEn7vtShkOicJOf6vbibiaEh90ztVy5M2cvVdLzg/0?wx_fmt=png"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">第一个箭头所指的参数也需要改变，不过第二个参数是txtname2，也就是每层楼的默认宿舍值，这个固定也没事，不会出错，时间的话还是需要根据自己访问时间来进行变化的，要不也会出现错误，还是同样的错误，也就是下面的这个错误，可想而知asp网站对这些参数是有很挑剔的要求。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;">236|error|500|回发或回调参数无效。在配置中使用 &lt;pages enableEventValidation=”true”/&gt; 或在页面中使用 &lt;%@ Page EnableEventValidation=”true” %&gt; 启用了事件验证。出于安全目的，此功能验证回发或回调事件的参数是否来源于最初呈现这些事件的服务器控件。如果数据有效并且是预期的，则使用 ClientScriptManager.RegisterForEventValidation 方法来注册回发或回调数据以进行验证。|<br></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">3.</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlxWBRQNSmbSeHyTHYrEDrAPZ8ApJhUHdw2huXNXZqPbvH3n4ib6pNOUw/0?wx_fmt=png" style="word-break: normal !important;" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicH11syYCaS175fFnibibUOqlxWBRQNSmbSeHyTHYrEDrAPZ8ApJhUHdw2huXNXZqPbvH3n4ib6pNOUw/0?wx_fmt=png"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个电费查询按钮，不是ajax，会有新的请求，而且是对同一个网址的不同请求方式，第一次请求时get请求，用于获取asp网页的那两个动态参数，第二次是将动态参数就行post发送出去，这样就会有数据了，如果你是第一次就post的话，会没有数据，网页还是会报错误，同样还是那个错误哈。下面是表单数据</p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-default" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(40, 44, 52); color: rgb(171, 178, 191); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.data = {<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 99px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTTARGET’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 363px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$Toolbar1$ContentPanel1$btnSelect’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 112px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘EVENTARGUMENT’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 14px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>VIEWSTATE’</strong></span>:&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘VIEWSTATE’</span>],<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 125px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTVALIDATION’</strong></span>:&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 126px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘EVENTVALIDATION’</span>],<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘hidJZ’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘jz’</span>+name,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 356px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$Toolbar1$ContentPanel1$TextBox1’</span>: (datetime.now()-timedelta(days=<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">30</span>)).strftime(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘%Y-%m-%d’</span>),<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 356px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$Toolbar1$ContentPanel1$TextBox2’</span>: datetime.now().strftime(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘%Y-%m-%d’</span>),<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 350px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$Toolbar1$ContentPanel1$txtDBBH’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 350px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$Toolbar1$ContentPanel1$ddlCZFS’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 90px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘—-全部—-‘</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 297px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘RegionPanel2$Region1$toolbarButtom$pagesize’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘1’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 172px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>box_page_state_changed’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘false’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 99px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘2_collapsed’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘false’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 119px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>6_selectedRows’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 257px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘box_disabled_control_before_postbac’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>10’</strong></span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 112px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘box_ajax_mark’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘true’</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;}</code></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">坑说完了，说说部分代码的作用吧</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-default" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(40, 44, 52); color: rgb(171, 178, 191); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-default-function" style="background: rgba(0, 0, 0, 0); display: inline; width: 185px; text-decoration-style: solid; text-decoration-color: rgb(171, 178, 191); word-break: normal !important;"><span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">def</span>&nbsp;<span class="hljs-default-title" style="color: rgb(97, 174, 238); background: rgba(0, 0, 0, 0); display: inline; width: 73px; text-decoration-style: solid; text-decoration-color: rgb(97, 174, 238); word-break: normal !important;"><strong>get_value</strong></span><span class="hljs-default-params" style="background: rgba(0, 0, 0, 0); display: inline; width: 79px; text-decoration-style: solid; text-decoration-color: rgb(171, 178, 191); word-break: normal !important;">(self, html)</span>:</span>&nbsp;&nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 318px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 获取表单的两个参数VIEWSTATE和<strong>EVENTVALIDATION</strong></span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 19px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">try</span>:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;soup = BeautifulSoup(html,&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘lxml’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value = soup.select(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 145px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘input[type=”hidden”]’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;values = [v&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">for</span>&nbsp;v&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">in</span>&nbsp;value&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">if</span>&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘/w’</span>&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">in</span>&nbsp;str(v)]<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state = values[<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">0</span>][<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘value’</span>]<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;action = values[<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 6px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">1</span>][<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘value’</span>]<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘VIEWSTATE’</span>] = state<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 125px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTVALIDATION’</strong></span>] = action<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 39px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">except</span>&nbsp;IndexError&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 14px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">as</span>&nbsp;e: &nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 205px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 证明这个不是首页，需要另外的规则</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;match = re.search(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 336px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘VIEWSTATE|(.<em>?)|.</em>?<strong>EVENTVALIDATION|(.*?)|‘</strong></span>, html)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘VIEWSTATE’</span>] = match.group(<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">1</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.data[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 125px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTVALIDATION’</strong></span>] = match.group(<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 6px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">2</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 39px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">except</span>&nbsp;Exception&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">as</span>&nbsp;e:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 72px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘get_value’</span>, e)</code></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个就是获取两个动态参数的方法，每次根据html元素来获取</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-default" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(40, 44, 52); color: rgb(171, 178, 191); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;"><span class="hljs-default-function" style="background: rgba(0, 0, 0, 0); display: inline; width: 231px; text-decoration-style: solid; text-decoration-color: rgb(171, 178, 191); word-break: normal !important;"><span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">def</span>&nbsp;<span class="hljs-default-title" style="color: rgb(97, 174, 238); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(97, 174, 238); word-break: normal !important;">get_name</span><span class="hljs-default-params" style="background: rgba(0, 0, 0, 0); display: inline; width: 139px; text-decoration-style: solid; text-decoration-color: rgb(171, 178, 191); word-break: normal !important;">(<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>, jz, html=None)</span></span>: &nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 74px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 输入宿舍号</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">if</span>&nbsp;<span class="hljs-default-symbol" style="color: rgb(97, 174, 238); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(97, 174, 238); word-break: normal !important;">html:</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 109px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 表单顺序需要改变</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.data = {<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 106px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘ScriptManager1’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 139px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘UpdatePanel1|txtjz2’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 60px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘hidtime’</span>: datetime.now().strftime(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 126px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘%Y-%m-%d %H:%M:%S’</span>),<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 53px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘Radio1’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘1’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 53px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘txtjz2’</span>: jz,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘txtname2’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 112px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘001001001001001’</span>, &nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 206px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 这个初始化值可以随意，但不能为空</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 60px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘txtpwd2’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 60px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘txtyzm2’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 99px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTTARGET’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 52px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘txtjz2’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 113px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘EVENTARGUMENT’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>LASTFOCUS’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 14px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘VIEWSTATE’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 14px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 126px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<strong>EVENTVALIDATION’</strong></span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘’</span>,<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘ASYNCPOST’</span>:&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘true’</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.<strong>get_value(html) &nbsp;<span class="hljs-default-comment" style="color: rgb(92, 99, 112); background: rgba(0, 0, 0, 0); display: inline; width: 62px; text-decoration-style: solid; text-decoration-color: rgb(92, 99, 112); font-style: italic; word-break: normal !important;"># 换下参数</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;html =&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.</strong>get_html()<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">if</span>&nbsp;<span class="hljs-default-symbol" style="color: rgb(97, 174, 238); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(97, 174, 238); word-break: normal !important;">html:</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;soup = BeautifulSoup(html,&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 40px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘lxml’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dormitory_num = soup.select(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 211px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘select[name=”txtname2”] option’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dormitory_num = [(p.text, p[<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 46px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘value’</span>])&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">for</span>&nbsp;p&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">in</span>&nbsp;dormitory_num]<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">for</span>&nbsp;index, p&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">in</span>&nbsp;enumerate(dormitory_num):<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(index,&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 61px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘宿舍号：’</span>, p[<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">0</span>])<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 27px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">self</span>.<strong>get_value(html)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">while</span>&nbsp;<span class="hljs-default-symbol" style="color: rgb(97, 174, 238); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(97, 174, 238); word-break: normal !important;">True:</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num = input(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 217px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘请输入你的宿舍，输入左边的编号即可’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num = re.match(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘\d+’</span>, num)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">if</span>&nbsp;num&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 20px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">and</span>&nbsp;int(num.group()) &lt; len(dormitory_num):<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num = int(num.group())<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">break</span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 133px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘请输入正确的宿舍编号’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 39px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">return</span>&nbsp;dormitory_num[num][<span class="hljs-default-number" style="color: rgb(209, 154, 102); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(209, 154, 102); word-break: normal !important;">1</span>]</strong></code></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个是获取宿舍号，表单顺序需要改变</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><section data-mpa-preserve-tpl-color="t" data-mpa-template="t" class="mpa-template" mpa-preserve="t" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; background-image: none; background-color: initial; word-break: normal !important;"><code class="hljs-default" style="margin-right: 0.15em; margin-left: 0.15em; padding: 6px; border-radius: 4px; font-size: 0.85em; background: rgb(40, 44, 52); color: rgb(171, 178, 191); display: block; overflow-x: auto; white-space: nowrap; word-break: normal !important;">def get_chapter(self):<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;# 获取验证码<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;url =&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 284px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘<a href="http://172.18.2.42:8000/ValidateCode.aspx&#39;" target="_blank" rel="noopener">http://172.18.2.42:8000/ValidateCode.aspx&#39;</a></span><br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;response = requests.<span class="hljs-default-built_in" style="color: rgb(230, 192, 123); background: rgba(0, 0, 0, 0); display: inline; width: 19px; text-decoration-style: solid; text-decoration-color: rgb(230, 192, 123); word-break: normal !important;">get</span>(url, headers=self.headers)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;with&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">open</span>(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘code.jpg’</span>,&nbsp;<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘wb’</span>)&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 13px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">as</span>&nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">f</span>:<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 7px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">f</span>.<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">write</span>(response.content)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;image = Image.<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 26px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">open</span>(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 66px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘code.jpg’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;image.show()<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;code =&nbsp;<span class="hljs-default-built_in" style="color: rgb(230, 192, 123); background: rgba(0, 0, 0, 0); display: inline; width: 33px; text-decoration-style: solid; text-decoration-color: rgb(230, 192, 123); word-break: normal !important;">input</span>(<span class="hljs-default-string" style="color: rgb(152, 195, 121); background: rgba(0, 0, 0, 0); display: inline; width: 86px; text-decoration-style: solid; text-decoration-color: rgb(152, 195, 121); word-break: normal !important;">‘请输入验证码’</span>)<br style="word-break: normal !important;">&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-default-keyword" style="color: rgb(198, 120, 221); background: rgba(0, 0, 0, 0); display: inline; width: 39px; text-decoration-style: solid; text-decoration-color: rgb(198, 120, 221); word-break: normal !important;">return</span>&nbsp;code</code></pre></section><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">这个是获取验证码的方法，获取验证码是很简单的，就是找到请求的url进行请求就可以了。至于识别，我这里是手动输入，你也可以选择接入打码平台或者用深度学习模型来识别。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">其他的就不多说了。</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">需要源码的可以在我的GitHub上找：<a href="https://github.com/SergioJune/gongzhonghao_code/blob/master/python_play/query.py" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code/blob/master/python_play/query.py</a></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="font-size: 20px; word-break: normal !important;"><strong style="word-break: normal !important;">写在最后</strong></span></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style="color: rgb(51, 51, 51); font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; font-size: 17px; letter-spacing: 1.5px; text-align: justify; word-break: normal !important;">如果这篇文章对你用的话，希望不要吝啬你的点赞哈！点赞和转发就是对我的最大支持，这样才有动力输出质量高的原创文章。</span></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><span style=";color: rgb(51, 51, 51); font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; font-size: 17px; letter-spacing: 1.5px; text-align: justify; word-break: normal !important;;word-break: normal !important;">「点赞是一种态度！」</span></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;">推荐文章：</p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483795&amp;idx=1&amp;sn=0b263fc29538db3de5ffe25da0c8bd49&amp;chksm=fb4a7b3fcc3df229ccc9f2ad10fdcbf47e9a1f61012c4ee64a5fcd3a56897f7ba9998fac298c&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483795&amp;idx=1&amp;sn=0b263fc29538db3de5ffe25da0c8bd49&amp;chksm=fb4a7b3fcc3df229ccc9f2ad10fdcbf47e9a1f61012c4ee64a5fcd3a56897f7ba9998fac298c&amp;scene=21#wechat_redirect">我爬取了37000条球迷评论，知道了这场比赛的重要信息</a><a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483760&amp;idx=1&amp;sn=3e08dbc95596839abe1c84752453415f&amp;chksm=fb4a7bdccc3df2cae9f3b4df5b410017b72d62a4c26a70d8d7afb4294024928bc5d53572368a&amp;scene=21#wechat_redirect">爬取《The Hitchhiker’s Guide to Python!》python进阶书并制成pdf</a><br style="word-break: normal !important;"></p><p style="margin-right: 1em; margin-left: 1em; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; letter-spacing: 1px; word-break: normal !important;"><br></p><p style="white-space: normal; color: rgb(51, 51, 51); font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; font-size: 17px; letter-spacing: 0.544px; text-align: center; word-break: normal !important;"><img data-copyright="0" data-s="300,640" _width="26%" src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640" data-fail="0" style="width: 173.672px; word-break: normal !important; visibility: visible !important;" _src="https://mmbiz.qpic.cn/mmbiz_jpg/BIPpxEvceWicMYDKfP5R5OTlibqRibxgnbUibICOVW7ziao5o8nCHYeqSJXIC0TKxqQgHibtaBKl4waRIZVPD4DaE8cg/640"></p><p style="padding-right: 5px; padding-left: 5px; white-space: normal; color: rgb(51, 51, 51); font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; font-size: 17px; letter-spacing: 0.544px; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="padding-right: 5px; padding-left: 5px; white-space: normal; color: rgb(51, 51, 51); font-family: -apple-system-font, BlinkMacSystemFont, 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei UI', 'Microsoft YaHei', Arial, sans-serif; font-size: 17px; letter-spacing: 0.544px; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><p><br></p>]]></content>
    
    <summary type="html">
    
      这个asp网站是我的学校的电费查询系统，需要学校的内网才能查询，所以这文说下思路和我遇到的一些坑。我搞这个网站主要是为了方便查电费而已，其实也方便不了多少。而且这个asp网站还不是很容易
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
  </entry>
  
  <entry>
    <title>爬取《The Hitchhiker’s Guide to Python!》python进阶书并制成pdf</title>
    <link href="http://sergiojune.com/2019/01/14/%E7%88%AC%E5%8F%96%E3%80%8AThe%20Hitchhiker%E2%80%99s%20Guide%20to%20Python!%E3%80%8Bpython%E8%BF%9B%E9%98%B6%E4%B9%A6%E5%B9%B6%E5%88%B6%E6%88%90pdf/"/>
    <id>http://sergiojune.com/2019/01/14/爬取《The Hitchhiker’s Guide to Python!》python进阶书并制成pdf/</id>
    <published>2019-01-14T07:56:44.605Z</published>
    <updated>2019-01-14T08:25:56.811Z</updated>
    
    <content type="html"><![CDATA[<p><section class="_editor"><p class="_brush" style="margin: 0px auto; max-width: 600px; word-wrap: normal; min-height: 1em; border: 1px solid rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; box-sizing: border-box !important; text-align: center;"><span style="color: rgb(255, 0, 0);">这是日常学python的第15篇原创文章</span></p></section></p><p data-mpa-powered-by="yiban.io" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">前几篇文章我们学习了requests库和正则，还有个urllib库，我上篇文章也用了requests库来教大家去爬那些返回json格式的网页，挺好玩的。有读者让我来个正则的，所以我今天就来个正则+requests来进行爬取。<br style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">今天原来是想爬小说的，但想到我不怎么看小说，读者也是都喜欢学习的，对吧？嘻嘻！所以我来爬个与python相关的内容，恰好前几天我又看到别人推荐的一本python进阶书，这本书的作者是我们的python大神<strong style="word-break: normal !important;"><span style="color: rgb(102, 102, 102); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 20px; word-break: normal !important;">kennethreitz</span></strong>征集各路爱好python的人所写的，下面是地址：</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">中文版:<a href="http://pythonguidecn.readthedocs.io/zh/latest/" _src="http://pythonguidecn.readthedocs.io/zh/latest/" _href="http://pythonguidecn.readthedocs.io/zh/latest/" style="word-break: normal !important;" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/</a></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">英文版：<a href="http://docs.python-guide.org/en/latest/" _src="http://docs.python-guide.org/en/latest/" _href="http://docs.python-guide.org/en/latest/" style="word-break: normal !important;" target="_blank" rel="noopener">http://docs.python-guide.org/en/latest/</a></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">这本书适合于一切有python的学习者，不管你是初入python的小白，还是熟练使用python的老手，都适用。但是不看也没有影响你学习爬虫哈，这个只是说些python的奇淫技巧。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">由于这本书在网上只有英语的电子版，可我英语渣渣，所以爬个中文版的网页然后把他弄成电子版。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">若想直接获取该书电子版，可以在公众号「<strong style="word-break: normal !important;">日常学python</strong>」后台回复『<strong style="word-break: normal !important;">进阶</strong>』直接获取。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">本篇文章用到的工具如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><ul class=" list-paddingleft-2" style="width: 530.094px; word-break: normal !important; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">requests库</strong></p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">正则表达式</strong></p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">Sigil</strong>：将html网页转成epub电子书</p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">epub转pdf</strong>:<a href="http://cn.epubee.com/epub转pdf.html" target="_blank" rel="noopener">http://cn.epubee.com/epub转pdf.html</a><br style="word-break: normal !important;"></p></li></ul></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><strong style="word-break: normal !important;">好了，下面详细分析：</strong></p><section class="_editor" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="margin: 10px auto; padding: 2px; word-break: normal !important; box-sizing: border-box;"><section style="width: 60px; height: 40px; text-align: center; font-size: 2em; color: rgb(255, 255, 255); float: left; line-height: 40px; background-image: linear-gradient(-45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(135deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(-135deg, transparent 14.14px, rgb(139, 183, 72) 0px); background-position: right bottom, left bottom, left top, right top; background-size: 50% 50%, 50% 50%, 50% 50%, 50% 50%; background-repeat: no-repeat, no-repeat, no-repeat, no-repeat; word-break: normal !important;"><section class="autonum" style="word-break: normal !important;">1</section></section><section style="margin-left: 10px; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; word-break: normal !important; box-sizing: border-box;"><span style="color: rgb(128, 177, 53); font-size: 18px; display: inline-block; word-break: normal !important;">分析网站内容</span></section></section></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekQP06iabibiaSu5twxzVnFicarWIYUnF7lr20VbEic0jFxiaWce15kBYsWYvg/" data-ratio="0.6265822784810127" data-w="1264" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekQP06iabibiaSu5twxzVnFicarWIYUnF7lr20VbEic0jFxiaWce15kBYsWYvg/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">可以看到首页中有整本书的内容链接，所以可以直接爬首页获取整本书的链接。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">熟练地按下f12查看网页请求，非常容易找到这个<img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekf25ibXK48962V3vGIeK6x34wDWuUqCNfhyx2XSIdpf8U9tXFzxJCDoA/" data-ratio="0.4616171954964176" data-w="977" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekf25ibXK48962V3vGIeK6x34wDWuUqCNfhyx2XSIdpf8U9tXFzxJCDoA/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">请求网站为：<span style="color: rgb(34, 34, 34); font-family: Consolas, 'Lucida Console', 'Courier New', monospace; font-size: 12px; white-space: pre-wrap; word-break: normal !important;"><a href="http://pythonguidecn.readthedocs.io/zh/latest/" _src="http://pythonguidecn.readthedocs.io/zh/latest/" _href="http://pythonguidecn.readthedocs.io/zh/latest/" style="word-break: normal !important;" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/</a></span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">请求方式为get，状态码为200，而且返回的是html元素，所以我们可以用正则来匹配所需要的内容。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">那看看我们的匹配内容所在的地方</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekaeZxH9TWHCA2WXDuHUNmgSm6dBIEBMd8daYtyfsotOibibRfZ6RKm3IQ/" data-ratio="0.4064885496183206" data-w="1572" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekaeZxH9TWHCA2WXDuHUNmgSm6dBIEBMd8daYtyfsotOibibRfZ6RKm3IQ/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">可以看到这个内容的地址和内容标题都在这个a标签上，所以正则很容易，如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">toctree-l1.<em>?reference internal<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“ href=”</span>([^<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“]</span></em>?)”&gt;(.<em>?)&lt;/a&gt;<br style="word-break: normal !important;"></em></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">不知道你的正则学得怎样了，这里还是简单说下：</p><ul class=" list-paddingleft-2" style="width: 530.094px; color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important; margin: 0px; padding: 0px 0px 0px 30px;"><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">.</strong>：这个是概括字符集，为匹配除换行符以外的任意字符</p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;"></strong>：这个是数量词，匹配的次数为0次以上</p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">?</strong>：加了这个问号表示非贪婪，一般默认为贪婪</p></li><li><p style="word-break: normal !important;"><strong style="word-break: normal !important;">[^”]</strong>：这个表示不匹配双引号，挺好用的</p></li></ul><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">实在不记得的可以看看我这篇文章，这里不详细说了,不记得就点开<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect" style="word-break: normal !important;">爬虫必学知识之正则表达式下篇</a>看看</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">这里需要注意的是：在这里获取的网址列表里面有个内容的导航，如下：<img src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekfhGeWs4PLqY6Sbp9BksZutMhKW5FmWqpEvrRLljga5hhbib8b82VB0Q/" title="1522224025709350.png" alt="image.png" class="js_catchremoteimageerror" data-cropselx1="0" data-cropselx2="497" data-cropsely1="0" data-cropsely2="326" data-copyright="0" data-ratio="0.40766961651917405" data-w="1695" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekfhGeWs4PLqY6Sbp9BksZutMhKW5FmWqpEvrRLljga5hhbib8b82VB0Q/" style="height: 227px; width: 558px; word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">所有我们在匹配完之后还需要再将这些带<strong style="word-break: normal !important;">#</strong>号的网址给过滤掉。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">接下来的就是获取每个网页的内容</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek8KclyX0V4g3J6ytibeSVGBs5xgZrx5Qhk86ThaiaG6DibCtttv6MmVMOw/" data-ratio="0.15073529411764705" data-w="1632" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek8KclyX0V4g3J6ytibeSVGBs5xgZrx5Qhk86ThaiaG6DibCtttv6MmVMOw/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">可以看到内容都在这个div标签内，所以和上面一样，用正则就可以获取了。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">ps: 其实这里用BeautifulSoup更好用，我会在后面文章中讲到哈！</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">匹配内容的正则为：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;">section<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“.<em>?(&lt;h1&gt;.</em>?)&lt;div class=”</span>sphinxsidebar<br style="word-break: normal !important;"></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">因为我的那个工具是把这些内容的html下载下来就可以了，所以接下来不需要清洗里面的html元素。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">内容分析完毕，接下来的就容易了，就是用个循环把遍历所有文章，然后就利用正则把他爬下来就可以了。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><section class="_editor" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="margin: 10px auto; padding: 2px; word-break: normal !important; box-sizing: border-box;"><section style="width: 60px; height: 40px; text-align: center; font-size: 2em; color: rgb(255, 255, 255); float: left; line-height: 40px; background-image: linear-gradient(-45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(135deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(-135deg, transparent 14.14px, rgb(139, 183, 72) 0px); background-position: right bottom, left bottom, left top, right top; background-size: 50% 50%, 50% 50%, 50% 50%, 50% 50%; background-repeat: no-repeat, no-repeat, no-repeat, no-repeat; word-break: normal !important;"><section class="autonum" style="word-break: normal !important;">2</section></section><section style="margin-left: 10px; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; word-break: normal !important; box-sizing: border-box;"><span style="color: rgb(128, 177, 53); font-size: 18px; display: inline-block; word-break: normal !important;">实操部分</span></section></section></section><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re, requests<br style="word-break: normal !important;"><br style="word-break: normal !important;"><span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">class</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">Spider</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(object)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;"><strong>init</strong></span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(self, headers, url)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;self.headers = headers<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;self.url = url<br style="word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;"><strong>get_hrefs</strong></span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(self)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’’获取书本的所有链接’’’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;response = requests.get(self.url, self.headers)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> response.status_code == <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">200</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response.encoding = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;hrefs = re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘toctree-l1.<em>?reference internal” href=”([^”]</em>?)”&gt;(.*?)&lt;/a&gt;’</span>, response.text, re.S)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> hrefs<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">else</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘访问书本内容失败，状态码为’</span>, response.status_code)<br style="word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">get_page</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(self, url)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’’获取首页’’’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;response = requests.get(url, self.headers)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;response.encoding = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;content = re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘section”.<em>?(&lt;h1&gt;.</em>?)&lt;div class=”sphinxsidebar’</span>, response.text, re.S)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> content[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0</span>]<br style="word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;"><strong>get_content</strong></span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(self, href)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’’获取每个页面的内容’’’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> href:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;href = self.url + href<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response = requests.get(href, self.headers)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response.encoding = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;content = re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘section”.<em>?(&lt;h1&gt;.</em>?)&lt;div class=”sphinxsidebar’</span>, response.text, re.S)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> content:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> content[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0</span>]<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">else</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘正则获取失败’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">else</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘获取内容失败’</span>)<br style="word-break: normal !important;"><br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">run</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(self)</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’’循环获取整本书内容’’’</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;self.num = <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;hrefs = self.get_hrefs()<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;content = self.<strong>get_page(self.url)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">with</span> open(str(self.num)+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Python最佳实践指南.html’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘w’</span>, encoding=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> f:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f.write(content)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘写入目录成功’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> href, title <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> hrefs:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“#”</span> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> href:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">continue</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;self.num += <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span><br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;content = self.</strong>get_content(href)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">with</span> open(str(self.num)+title+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.html’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘w’</span>, encoding=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> f:<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f.write(content)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘下载第’</span>+str(self.num)+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘章成功’</span>)<br style="word-break: normal !important;"> &nbsp; &nbsp; &nbsp; &nbsp;print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘下载完毕’</span>)<br style="word-break: normal !important;"><br style="word-break: normal !important;"><br style="word-break: normal !important;"><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">main</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">()</span>:</span><br style="word-break: normal !important;"> &nbsp; &nbsp;url = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="http://pythonguidecn.readthedocs.io/zh/latest/&#39;" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/&#39;</a></span><br style="word-break: normal !important;"> &nbsp; &nbsp;headers = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘User-Agent’</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36’</span>}<br style="word-break: normal !important;"> &nbsp; &nbsp;spider = Spider(headers, url)<br style="word-break: normal !important;"> &nbsp; &nbsp;spider.run()<br style="word-break: normal !important;"><br style="word-break: normal !important;"><br style="word-break: normal !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> <strong>name</strong> == <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<strong>main</strong>‘</span>:<br style="word-break: normal !important;"> &nbsp; &nbsp;main()<br style="word-break: normal !important;"></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">点击运行，感觉美滋滋，可惜啊，代码总是爱玩弄你，赶紧报了个错：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"> &nbsp;File <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“E:/anaconda/python_project/newspaper/spider.py”</span>, line <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">52</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> run<br style="word-break: normal !important;"> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">with</span> open(str(self.num)+title+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.html’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘w’</span>, encoding=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>) <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> f:<br style="word-break: normal !important;">FileNotFoundError: [Errno <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">2</span>] No such file <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">or</span> directory: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘38与C/C++库交互.html’</span><br style="word-break: normal !important;"></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">一眼看下去，还挺郁闷的，我没有打开文件的，都是在写文件，为什么报了这个错？仔细一看报错内容，这个名字有问题啊，你看</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: inherit; color: inherit; line-height: inherit; word-break: normal !important;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; padding: 0.5em; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); word-wrap: normal !important; word-break: normal !important; display: block !important; overflow: auto !important;"><span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">38</span>与C/C++库交互.html<br style="word-break: normal !important;"></code></pre></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">这个在window系统是以为你在&nbsp;<strong style="word-break: normal !important;">38与C</strong>&nbsp;的<strong style="word-break: normal !important;">&nbsp;C++库交互.html&nbsp;</strong>下的，怪不得会报错，所以，我在这里加了这个代码把/给替换掉<img src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekwK0y8nM79sjxAQHpArFGWFncdofyMHZgYLJcgibUx1XbpBibTcckULBw/" title="1522225665219209.png" alt="image.png" class="js_catchremoteimageerror" data-cropselx1="0" data-cropselx2="497" data-cropsely1="0" data-cropsely2="326" data-copyright="0" data-ratio="0.3460820895522388" data-w="1072" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekwK0y8nM79sjxAQHpArFGWFncdofyMHZgYLJcgibUx1XbpBibTcckULBw/" style="height: 193px; width: 558px; word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><section class="_editor" style="max-width: 100%; color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="margin: 10px auto; padding: 2px; word-break: normal !important; box-sizing: border-box;"><section style="width: 60px; height: 40px; text-align: center; font-size: 2em; color: rgb(255, 255, 255); float: left; line-height: 40px; background-image: linear-gradient(-45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(45deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(135deg, transparent 14.14px, rgb(139, 183, 72) 0px), linear-gradient(-135deg, transparent 14.14px, rgb(139, 183, 72) 0px); background-position: right bottom, left bottom, left top, right top; background-size: 50% 50%, 50% 50%, 50% 50%, 50% 50%; background-repeat: no-repeat, no-repeat, no-repeat, no-repeat; word-break: normal !important;"><section class="autonum" style="word-break: normal !important;">3</section></section><section style="margin-left: 10px; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; word-break: normal !important; box-sizing: border-box;"><span style="color: rgb(128, 177, 53); font-size: 18px; display: inline-block; word-break: normal !important;">把内容整成pdf</span></section></section></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">点击Sigil 的<strong style="word-break: normal !important;">&nbsp;+</strong>&nbsp;号把刚才下载的内容导入</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek7OUGXbiayb6u4RxsP5xsAxqwmiaCRNNmuxgpek35ltF3RyfUc4NtIGBw/" data-ratio="0.6259541984732825" data-w="393" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek7OUGXbiayb6u4RxsP5xsAxqwmiaCRNNmuxgpek35ltF3RyfUc4NtIGBw/" style="word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekVSQEW1Do07g9NyZ8Zy8g8y8ic4aFMl8XjkQFLzDAG2VnBnQlsD3CKdg/" data-ratio="0.7363057324840764" data-w="785" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekVSQEW1Do07g9NyZ8Zy8g8y8ic4aFMl8XjkQFLzDAG2VnBnQlsD3CKdg/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">生成目录</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekRNl96soJiccrkyJRQVnCuN56A7aj7fTib9nVhyRwXw1UkmAicbgLWiaDvA/" data-ratio="0.5648351648351648" data-w="455" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekRNl96soJiccrkyJRQVnCuN56A7aj7fTib9nVhyRwXw1UkmAicbgLWiaDvA/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">添加书名作者</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><img data-s="300,640" data-type="png" src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekkx3V7BObvpJoCsDEyCn9ZLmEJ6tRunD0RhkZm9EAoGVjg4CF2FnptA/" data-ratio="1.150214592274678" data-w="233" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAekkx3V7BObvpJoCsDEyCn9ZLmEJ6tRunD0RhkZm9EAoGVjg4CF2FnptA/" style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">添加封面：点击左上角的&nbsp;<strong style="word-break: normal !important;">工具</strong>&nbsp;-&gt;&nbsp;<strong style="word-break: normal !important;">添加封面&nbsp;</strong>即可</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">点击保存即可完成</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">转pdf：<a href="http://cn.epubee.com/epub%E8%BD%ACpdf.html" _src="http://cn.epubee.com/epub转pdf.html" _href="http://cn.epubee.com/epub%E8%BD%ACpdf.html" style="word-break: normal !important;" target="_blank" rel="noopener">http://cn.epubee.com/epub转pdf.html</a></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">这个很容易就不说了。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><strong style="word-break: normal !important;">结语</strong></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">好了，文章内容就这么多，下个文章就是学习新内容了。期待ing。</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;">上述文章如有错误欢迎在留言区指出，如果这篇文章对你有用，点个赞，转个发如何？</p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><section style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><section style="word-break: normal !important;"><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><section style="padding-right: 15px; padding-left: 15px; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483740&amp;idx=1&amp;sn=9c62ebf1b4d284159a0500f060cb4527&amp;chksm=fb4a7bf0cc3df2e6d504c4a32d9a6e51828b5961b31ef6da81fcab8cf1b6df64bb8a99894fe3&amp;scene=21#wechat_redirect" style="word-break: normal !important;">老司机带你用python来爬取妹子图</a></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" style="word-break: normal !important;">python爬虫常用库之requests详解</a></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect" target="_blank" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483729&amp;idx=1&amp;sn=3af71892e67f9dd93e8e4dabc98c76b1&amp;chksm=fb4a7bfdcc3df2eb60858642aa905b5b5fccdafd100e9af1099b268e4ccb5b72170e19299423&amp;scene=21#wechat_redirect" style="word-break: normal !important;">爬虫必学知识之正则表达式下篇</a></span></p></section></section></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><img src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek5e3TsAvnGe7QiblyTForFQco8GHiaPBL6YPQ7WPRyl8jpmz6J5PWG2qQ/" height="auto" border="0" alt="1802109804.png" title="undefined" data-ratio="1" data-w="261" data-type="png" _src="https://mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWicsXUMNOjV3Lo1PYrSUibAek5e3TsAvnGe7QiblyTForFQco8GHiaPBL6YPQ7WPRyl8jpmz6J5PWG2qQ/" style="margin-bottom: 1.4px; border-radius: 5px; border-width: 1px; border-style: dashed; border-color: rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; word-break: normal !important; visibility: visible !important; width: 111.297px !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python</span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug，还有美和乐趣</span></p><p><br></p><p></p>]]></content>
    
    <summary type="html">
    
      今天原来是想爬小说的，但想到我不怎么看小说，读者也是都喜欢学习的，对吧？嘻嘻！所以我来爬个与python相关的内容，恰好前几天我又看到别人推荐的一本python进阶书，这本书的作者是我们的python大神
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requestst" scheme="http://sergiojune.com/tags/requestst/"/>
    
      <category term="正则表达式" scheme="http://sergiojune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>爬虫必学知识之正则表达式下篇</title>
    <link href="http://sergiojune.com/2019/01/14/%E7%88%AC%E8%99%AB%E5%BF%85%E5%AD%A6%E7%9F%A5%E8%AF%86%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8B%E7%AF%87/"/>
    <id>http://sergiojune.com/2019/01/14/爬虫必学知识之正则表达式下篇/</id>
    <published>2019-01-14T07:56:44.578Z</published>
    <updated>2019-01-14T08:22:42.876Z</updated>
    
    <content type="html"><![CDATA[<p><section class="_editor"><p class="_brush" style="margin: 0px auto; max-width: 600px; word-wrap: normal; min-height: 1em; border: 1px solid rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; box-sizing: border-box !important; text-align: center;"><span style="color: rgb(255, 0, 0);">这是日常学python的第13篇原创文章</span><br></p></section></p><p>继上篇文章说了正则表达式的简单用法，那今天我们就继续说一下正则表达式的复杂的用法。好了，废话不多说，直接进入正题。<br></p><p><br></p><section class="_editor"><section style="border: 0px; padding: 0px; margin: 10px auto; text-align: center; white-space: normal; box-sizing: border-box;"><section style="background-image:url(https://mmbiz.qpic.cn/mmbiz_png/ianq03UUWGmLUTcOuYzOwhBZ5CGhiatPILPeTp0AyP8BxMqpvcmwwKG7ZorRLO8ZfGkje8YDm5fSo7iaGupjcJWkg/0?wx_fmt=png);display:inline-block;margin:0 auto;text-align:left;background-color:#ef7060;background-size:auto 40px;background-repeat:no-repeat;height:40px"><section style="display: inline-block; padding: 0px 10px; line-height: 40px; color: rgb(51, 51, 51); margin-top: 0px; vertical-align: top; margin-left: 91px; font-size: 14px; box-sizing: border-box;"><p style="border:0;padding:0;margin:0">正则表达式</p></section></section><section style="background-image:url(https://mmbiz.qpic.cn/mmbiz_png/ianq03UUWGmLUTcOuYzOwhBZ5CGhiatPILJmeYSkrUtNeibykCLZcCJyeKRicicX712xeRibwEpicqAy2QBMsl6Rukqtg/0?wx_fmt=png);display:inline-block;margin:0 auto;text-align:left;background-color:#ef7060;background-size:auto 40px;background-repeat:no-repeat;width:90px;height:40px;vertical-align:top"></section></section></section><p>情景：当你想要匹配一个qq号，qq号码长度为5-10位，那根据上篇文章的说法，很容易就可以想到该正则：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">[<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">0-9</span>]{<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">5</span>,<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">10</span>}<br></code></pre></section><p><br></p><p>这样是可以的，但是当你匹配一个长度大于10的号码时就会出错，这时就会去该字符串的前10个数字出来，如下：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘221753259265’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[0-9]{5,10}’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#明显当查找的字符串长度大于8位时就会出错，只会截取前一部分长度</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2217532592’</span>]<br></code></pre></section><p>这样的话你就会得到一个错误的qq号码。</p><p><br></p><p>这时就需要引入边界匹配了：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><strong><span style="font-size: inherit; color: inherit; line-height: inherit;">^</span></strong><span style="font-size: inherit; color: inherit; line-height: inherit;">：这个是从左边开始匹配，规定左边的首个字符</span></p></li><li><p><strong><span style="font-size: inherit; color: inherit; line-height: inherit;">$</span></strong><span style="font-size: inherit; color: inherit; line-height: inherit;">：这个是从右边开始匹配，规定右边的首个字母</span></p></li></ul></section><p>现在再写个匹配qq号码的正则</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘^[0-9]{5,10}$’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个表示从左边起为5-10的数字长度，右边也是一样</span><br>print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘第一个匹配结果：’</span>,r)<br>a = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2217532592’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘^[0-9]{5,10}$’</span>,a)<br>print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘第二个匹配结果：’</span>,r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>第一个匹配结果： []<br>第二个匹配结果： [<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2217532592’</span>]<br></code></pre></section><p>这样就可以匹配到了，是不是很神奇？</p><p><br></p><p><strong>组</strong>：前面我们有用<strong> [ ] </strong>来匹配，中括号里面表示的是或关系，而这里的组表示的是并关系，并且用小括号括起来<strong> ( )</strong>。</p><p>比如：重复 python 字样三次<br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pythonpythonpythonjakjpythonpythonsdjjpythonpythonpythonsd’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘(python){3}’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>]<br></code></pre></section><p><br></p><p>这里的结果不是返回三个python，而是返回这个组，当符合一次就会将此组添加到返回列表中一次。</p><p><br></p><p>这个组还挺好用的，再看下这个需求：获取下列英文中的life和python之间的内容。</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘life is short,i use python’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘life(.<em>)python’</em></span>,a,re.S)<br>print(r) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这样获取的就是组内的内容</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ is short,i use ‘</span>]<br></code></pre></section><p><br></p><p>这个组还常用，因为在我们经常在用正则来解析html元素时，经常需要获取两个标签之间的内容，标签是确定的，标签内容不确定，就可以用这个了。如下这个html元素：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="html language-html hljs xml" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">strong</span>&gt;&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“#py2”</span>&gt;</span>python进阶 <span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“#python3”</span>&gt;</span>python入门 <span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“#vce”</span>&gt;</span>vce解决方法 <span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“demo06.html#new”</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">target</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“_blank”</span>&gt;</span>百度 <span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“mailto: <a href="mailto:2217532592@qq.com" target="_blank" rel="noopener">2217532592@qq.com</a>“</span>&gt;</span>反馈意见<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span> <span class="hljs-attr" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">href</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“img/1.jpg”</span>&gt;</span>下载图片 <span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">a</span>&gt;</span><br> &nbsp; &nbsp;<span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">&lt;/<span class="hljs-name" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">strong</span>&gt;</span><br></code></pre></section><p>这样就可以用组来获取a标签的内容了：<strong>&lt;a .?&gt;(.<em>?)&lt;/a&gt;。</em></strong>？表示非贪婪哦！</p><p><br></p><p>re.findall(pattern,string,flags)：这个方法的前两个参数对你们来说都很熟悉了，第一个参数为正则表达式，第二个参数为要进行匹配的字符串，而第三个可选参数为匹配模式，有如下几种匹配模式：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><strong>re.I</strong>(re.IGNORECASE) ：使匹配对大小写不敏感</p></li><li><p><strong>re.L</strong>(re.LOCAL)：做本地化识别（locale-aware）匹配</p></li><li><p><strong>re.M</strong>(re.MULTILINE)：多行匹配，影响 ^ 和 $</p></li><li><p><strong>re.S</strong>(re.DOTALL)：使 <strong>.</strong> 匹配包括换行在内的所有字符(这个常用)</p></li><li><p><strong>re.U</strong>(re.UNICODE)：根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</p></li><li><p><strong>re.X</strong>(re.VERBOSE)：该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解<br></p></li></ul></section><p><br></p><p>当需要写多个匹配模式时，可以用<strong> | </strong>分隔每个模式</p><p>代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Java12Python89’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>,a,re.I)<br>print(r)<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘hsjhj h123jfkksf hajkGH\nkj fjfk’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.’</span>,a,re.I|re.S)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Python’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘1’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘G’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘H’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\n’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘j’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>]<br></code></pre></section><p><br></p><p>正则除了可以用来检索字符串，还可以用来替换字符串，常见的可以用来替换那些文本中的空格，制表符和回车等，这些都是用一个正则就可以搞定的了。</p><p><br></p><p>python中用这个方法来进行正则替换<br></p><p><strong>re.sub(pattern,&nbsp;repl,&nbsp;string,&nbsp;count=0,&nbsp;flags=0)&nbsp;</strong></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">pattern ：正则表达式</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">repl ：替换后的字符串，可为函数</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">string ：要进行替换的字符串</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">count ：替换的次数，顺序为 从左往右，默认值为0，表示无限次。</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">falgs ： 匹配模式，和findall()差不多</span></p></li></ul><p>代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘skjC#ksjfc#jkdsc#’</span><br>r=re.sub(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘gg’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#返回值是替换后的字符串</span><br>print(r)<br>print(a)<br>r=re.sub(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘gg’</span>,a,<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这个加了替换次数</span><br>print(r)<br>r=re.sub(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘gg’</span>,a,<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>,re.I) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 加了匹配模式，忽视大小写</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>skjC<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#ksjfggjkdsgg</span><br>skjC<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#ksjfggjkdsc#</span><br>skjggksjfc<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#jkdsc#</span><br></code></pre></section><p><br></p><p>我们试试第二个参数为函数的情况<br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">convert</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(value)</span>:</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#他是把对象传进去这个参数</span><br> &nbsp; &nbsp;print(value)<br> &nbsp; &nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#可以通过group()方法来获取内容</span><br> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘!!’</span>+value.group()+<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“!!”</span><br>r=re.sub(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>,convert,a,flags=re.I)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#接收个参数后，更改后的内容为他的返回值</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>&lt;_sre.SRE_Match object; span=(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">3</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">5</span>), match=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘C#’</span>&gt;<br>&lt;_sre.SRE_Match object; span=(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">9</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">11</span>), match=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>&gt;<br>&lt;_sre.SRE_Match object; span=(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">15</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">17</span>), match=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘c#’</span>&gt;<br>skj!!C<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#!!ksjf!!c#!!jkds!!c#!!</span><br></code></pre></section><p><br></p><p>这个第二个参数为convert函数，里面的<strong>.group() </strong>方法是获取匹配后的字符串的值，所以我们就可以根据匹配后的字符串来进行相对应的替换内容，比如这个简单的小需求：</p><p>把字符串中的数字大于50的改为99，小于的就改为11。</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ds+45sd78asd12568asd45asd74ew+9ddf12sd45’</span><br><span class="hljs-function" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; word-wrap: inherit !important; word-break: inherit !important;">def</span> <span class="hljs-title" style="font-size: inherit; line-height: inherit; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">func</span><span class="hljs-params" style="font-size: inherit; line-height: inherit; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;">(value)</span>:</span><br> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">if</span> int(value.group())&gt;<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">50</span>:<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘99’</span><br> &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">else</span>:<br> &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">return</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘11’</span><br><br>r=re.sub(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\d{1,2}’</span>,func,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>ds+<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">11</span>sd99asd119911asd11asd99ew+<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">11</span>ddf11sd11<br></code></pre></section><p><br></p></section><p><strong></strong>另谈两个函数</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">re.match(pattern,string,flags) ：这个是从字符串的首个字母开始匹配，若首个字母不符合，就会返回None, 反之返回一个 Match对象。而他只会匹配第一个结果，不会返回所有符合结果的内容。参数内容与findall()方法一样。</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">re.search(pattern,string,flags) ：这个与match方法差不多，不过不是从首字符开始匹配，也是只返回一个正确的匹配内容。</span></p></li></ul></section><p><br></p><p>代码：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pythonphpjavacphp’</span><br>r=re.match(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个一开始没有就返回None</span><br>print(r)<br>r=re.search(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个搜索到之后就返回一个对象</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#返回的对象可以通过group()方法来获取他的内容</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取匹配内容</span><br>print(r.group())<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">None</span><br>&lt;_sre.SRE_Match object; span=(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">6</span>, <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">9</span>), match=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>&gt;<br>php<br></code></pre></section><p><br></p><p>这两个函数返回的内容的几个属性：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">group() ：获取匹配的内容</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">statr() ：获取到匹配字符的起始位置</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">end() ：获取匹配到字符的结束位置</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">span() ：获取匹配到字符的起始和结束位置，元组形式返回。</span></p></li></ul></section><p><br></p><p>前面提到组的概念，试下这两个方法的组的用法：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#获取life和python之间的内容</span><br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘life is short,i use python’</span><br>r=re.search(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘life(.)python’</span>,a,re.S)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#用小括号的就是一组</span><br>print(r.group(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>))<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个下标1就是对应的中间部分</span><br><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#也可以获取中间的两部分</span><br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘javawoshipythonjunephp’</span><br>r=re.search(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘java(.<em>)python(.</em>)php’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#两个小括号就是分成了两组</span><br>print(r.group(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>),r.group(<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">2</span>))<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#分别打印第一第二组</span><br>print(r.groups())<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个获取所有分组信息</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br> <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">is</span> short,i use <br>woshi june<br>(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘woshi’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘june’</span>)<br></code></pre></section><p>上面的代码注释已经很清楚了，还有个group()方法是获取整个正则匹配的内容，不按分组。match()方法也一样，就不演示了。</p><p><br></p><p>最后一个问题：怎样拆分含有多种分隔符的字符串？<br></p><p>比如：<strong>kfs;hsji’fhsikf<em>bhsfk=jsf/shj</em></strong>。要将不属于字母的都去掉，你是不是会想到用字符串的循环，然后再一个一个分割出来？我告诉你，学了正则之后，再也不用这么麻烦了。re库里面有个split()方法，如下：</p><p><br></p><p><strong>re.split(pattern, string, maxsplit=0)</strong>，参数看名字应该就能知道。直接一行代码进行分割：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘kfs;hsjifhsikfbhsfk=jsf/shj’</span><br>r = re.split(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[;*=/]’</span>, a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘kfs’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘hsjifhsikf’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘bhsfk’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘jsf’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘shj’</span>]<br></code></pre></section><p>是不是很完美？所以说正则必须得学！</p><p><br></p><section class="_editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="_brush 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right: 1px solid rgb(245, 189, 209); border-left: 1px solid rgb(245, 189, 209); box-sizing: border-box;"></section><section class="_brush" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom: 1px solid rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right: 15px solid rgb(245, 189, 209); border-top: 12px solid transparent; border-bottom: 12px solid transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96_bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; background-color: rgb(245, 189, 209); box-sizing: border-box;"><span style="color:inherit;font-size:12px">END</span></section><section class="_brush" style="margin: 0px; padding: 0px; border-left: 15px solid rgb(245, 189, 209); border-top: 12px solid transparent; height: 0px; width: 0px; float: left; border-bottom: 12px solid transparent; box-sizing: border-box;"></section></section></section></section></section><p>这个正则复杂点的已经说完了，还有些进阶的，不过暂时没有用到，就不打算说了，需要的可以去百度看看哈！<br></p><p><br></p><p>留个小练习证明自己正则学得好怎么样：</p><p><a href="mailto:1.kevintian126@126.com" target="_blank" rel="noopener">1.kevintian126@126.com</a>&nbsp;</p><p>2. <a href="mailto:1136667341@qq.com" target="_blank" rel="noopener">1136667341@qq.com</a>&nbsp;</p><p>3. <a href="mailto:meiya@cn-meiya.com" target="_blank" rel="noopener">meiya@cn-meiya.com</a>&nbsp;</p><p>4. <a href="mailto:wq901200@hotmail.com" target="_blank" rel="noopener">wq901200@hotmail.com</a>&nbsp;</p><p>5. <a href="mailto:meiyahr@163.com" target="_blank" rel="noopener">meiyahr@163.com</a></p><p>6.&nbsp;<a href="mailto:meiyuan@0757info.com" target="_blank" rel="noopener">meiyuan@0757info.com</a>&nbsp;</p><p>7. <a href="mailto:chingpeplo@sina.com" target="_blank" rel="noopener">chingpeplo@sina.com</a>&nbsp;</p><p>8. <a href="mailto:tony@erene.com.com" target="_blank" rel="noopener">tony@erene.com.com</a></p><p>9. <a href="mailto:melodylu@buynow.com" target="_blank" rel="noopener">melodylu@buynow.com</a></p><p><br></p><p>用正则把上面的@与com之间的内容匹配出来，可以把你的答案写在留言区上，过两天在留言区公布答案哈！</p><p><br></p><p><span style="font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;">上述文章如有错误欢迎在留言区指出，如果这篇文章对你有用，点个赞，转个发如何？</span></p><p><br></p><section class="_editor"><section><section style="height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); padding: 0px 8px; font-weight: bold; line-height: 35px; vertical-align: middle; box-sizing: border-box;"></section><section style="padding-right: 8px; padding-left: 8px; color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: medium; white-space: normal; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: medium; white-space: normal; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><section style="padding-right: 15px; padding-left: 15px; color: rgb(0, 0, 0); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; font-size: medium; white-space: normal; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483725&amp;idx=1&amp;sn=82eccd84b4f23745427e1c6e963e1b37&amp;chksm=fb4a7be1cc3df2f7ec707f24ff7952b7558ea4cbb79b9bb533a5297977c808327728d3f23106&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483725&amp;idx=1&amp;sn=82eccd84b4f23745427e1c6e963e1b37&amp;chksm=fb4a7be1cc3df2f7ec707f24ff7952b7558ea4cbb79b9bb533a5297977c808327728d3f23106&amp;scene=21#wechat_redirect">爬虫必学知识之正则表达式上篇</a><span style="color: rgb(79, 129, 189); font-size: 16px; word-break: normal !important;"></span></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect">python爬虫常用库之requests详解</a></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483653&amp;idx=1&amp;sn=7ce8f8fd19e408157937e219075f977b&amp;chksm=fb4a7ba9cc3df2bfca92eb5f53a79fbd9716f81df96070232a37919e6b83d020a470892d3b40&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483653&amp;idx=1&amp;sn=7ce8f8fd19e408157937e219075f977b&amp;chksm=fb4a7ba9cc3df2bfca92eb5f53a79fbd9716f81df96070232a37919e6b83d020a470892d3b40&amp;scene=21#wechat_redirect">python使用requests+re简单入门爬虫</a></span></p></section><section style="padding: 0px 15px; line-height: 2em; box-sizing: border-box;"><p style="margin:0px;padding:0px;"><br></p></section></section></section><p style="text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803114089.png" height="auto" border="0" alt="1803114089.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803114089.png" title="undefined"><br></p><p style="text-align: center;"><br></p><p style="text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p style="text-align: center;"><span style="font-size: 14px;">代码不止bug，还有美和乐趣</span></p><p></p>]]></content>
    
    <summary type="html">
    
      继上篇文章说了正则表达式的简单用法，那今天我们就继续说一下正则表达式的复杂的用法。好了，废话不多说，直接进入正题。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="正则表达式" scheme="http://sergiojune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>爬虫必学知识之正则表达式上篇</title>
    <link href="http://sergiojune.com/2019/01/14/%E7%88%AC%E8%99%AB%E5%BF%85%E5%AD%A6%E7%9F%A5%E8%AF%86%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8A%E7%AF%87/"/>
    <id>http://sergiojune.com/2019/01/14/爬虫必学知识之正则表达式上篇/</id>
    <published>2019-01-14T07:56:44.561Z</published>
    <updated>2019-01-14T08:22:27.810Z</updated>
    
    <content type="html"><![CDATA[<p><section class="_editor"><p class="_brush" style="margin: 0px auto; max-width: 600px; word-wrap: normal; min-height: 1em; border: 1px solid rgb(95, 170, 255); font-family: 微软雅黑; font-size: 12px; border-radius: 2em; box-sizing: border-box !important; text-align: center;"><span style="color: rgb(255, 0, 0);">这是日常学python的第12篇文章</span><br></p></section></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">在向网页进行了提交请求之类的之后，我们可以得到了网页的返回内容，里面自然而然会有我们想要的数据，但是html元素文本这么多，我们不可能一 一去找我们需要的数据，这时就需要用到正则表达式了，正则表达式是学爬虫必须学的内容，而且不止python可以用，java等其他语言都可以用，所以学了好处大大。</p><p><br></p><p style="letter-spacing: 2px;"><strong>什么是正则表达式？</strong></p><p style="letter-spacing: 2px;"><br></p><p style="letter-spacing: 2px;">正则表达式就是一个特殊的字符序列，可以用于检测一个字符串是否与我们的所设定的字符串相匹配。功能有快速检索文本和快速替换一些文本的操作。</p><p><br></p><p style="letter-spacing: 2px;" class="">python里面有个处理正则表达式的库 <strong>re。</strong>有个方法</p><p style="letter-spacing: 2px;" class=""><br></p><p style="letter-spacing: 2px;" class=""><strong>findall(pattern,string,flags)</strong></p><p style="letter-spacing: 2px;" class=""><br></p><p style="letter-spacing: 2px;" class="">用来匹配正则达式，我们就先用这个方法处理下。</p><p style="letter-spacing: 2px;">参数如下：</p><p style="letter-spacing: 2px;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">pattern：正则表达式</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">string：要进行匹配的字符串</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">flags：匹配的模式</span></p></li></ul></section><p style="letter-spacing: 2px;">结果是一个匹配内容的列表</p><p><br></p><section class="_editor"><section style="margin-top: 3px;margin-bottom: 20px;"><section><section style="width: 30px;margin-right: auto;margin-left: auto;"><img data-ratio="1.1115384615384616" src="http://newcdn.96weixin.com/mmbiz.qpic.cn/mmbiz_jpg/Ljib4So7yuWjauTdbzQb2ZYv9xTWWaw0rW661wnMfLNSR1GACq0wJo2piaaxvGFMvBf9Kj5wicwWlQtdmr6Vheo4g/640?wx_fmt=jpeg" data-type="jpeg" data-w="260" data-width="100%" style="width:100%;vertical-align: middle;" _src="http://newcdn.96weixin.com/mmbiz.qpic.cn/mmbiz_jpg/Ljib4So7yuWjauTdbzQb2ZYv9xTWWaw0rW661wnMfLNSR1GACq0wJo2piaaxvGFMvBf9Kj5wicwWlQtdmr6Vheo4g/640?wx_fmt=jpeg"></section></section><section style="height:2px;background-color:#3b3a4d;margin-top:-18px;"></section></section></section><p style="letter-spacing: 0px;">‘\d’ : 这个表示匹配单个0-9数字</p><p>‘\D’ : 与\d相反，匹配数字以外的内容</p><p>用代码来感受下：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个库是用来使用正则表达式的</span><br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘sg+sga5g45gaae3f23hgt13’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\d’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个就是根据\d的正则表达式来查找对应字符，其中\d是对应0-9的数字</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#查找非数字用\D</span><br>r1=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\D’</span>,a)<br>print(r)<br>print(r1)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘5’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘4’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘5’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘1’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘g’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘+’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘g’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘g’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘g’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘e’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘g’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘t’</span>]<br></code></pre></section><p><br></p><p>可以看到找出了字符串中的数字和非数字</p><p><br></p><p>如果我们在匹配一个字符串时，中间内容是有多个变化的，我们需要应变多种不同的字符，如这个字符串</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘abc,acc,agc,anc,afc,adc,aec’</span><br></code></pre></section><p>如果需要匹配这个字符串时，我们就需要用到&nbsp;<strong>[ ]&nbsp;</strong>,用中括号括起来的字符，里面的内容表示或关系，那来看看代码</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘abc,acc,agc,anc,afc,adc,aec’</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#现在查找上面的中间字符为c或者f的字符串</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个要求可以用到字符集来实现</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a[cf]c’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#[]表示字符集，里面的内容是或关系</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘acc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘afc’</span>]<br></code></pre></section><p><br></p><p>上面匹配了中间字符是c或者是f的字符串，匹配中间字符非c和非f,可以在前面加个<strong> ^</strong> 符号</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a[……cf]c’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#[c-f]就是表示从c到f</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘abc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘agc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘anc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘adc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘aec’</span>]<br></code></pre></section><p><br></p><p><br></p><p>上面只处理了中间字符为chu者f的字符串，但是没有匹配全部的，若要匹配全部，可以加个<strong> - </strong>符号，表示范围，如下</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘a[b-n]c’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#[c-f]就是表示从c到f</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘abc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘acc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘agc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘anc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘afc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘adc’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘aec’</span>]<br></code></pre></section><p><br></p><p><strong>[b-n]</strong>:这个就是表示b到n的字符</p><p><br></p><p>匹配汉字：<strong>[\u4E00-\u9FA5]</strong></p><p><br></p><p><br></p><p><strong>概括字符集：</strong></p><p style="text-indent: 2em;">用一个<strong> \ + 字母&nbsp;</strong>表示一系列的字符的元字符，只能匹配单个字符，常用的如下</p><p style="text-indent: 2em;"><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><strong><span style="font-size: inherit; color: inherit; line-height: inherit;">\w</span></strong><span style="font-size: inherit; color: inherit; line-height: inherit;">：</span><span style="font-size: inherit; color: inherit; line-height: inherit;">匹配数字和字符「不包括&amp;符号」只匹配单词，数字和下划线</span></p></li><li><p><strong>\W</strong>：与\w相反，这个包括空格和回车</p></li><li><p><strong>\s</strong>：匹配空格字符，如空格，回车和制表符</p></li><li><p><strong>\S</strong>：与\s相反</p></li><li><p><strong>.</strong>：匹配除换行符之外的其他字符</p></li><li><p>还有前面的<strong>\d</strong>和<strong>\D</strong>也是</p></li></ul></section><p style="text-indent: 0em;"><br></p><p>有个小技巧：如果想要匹配所有字符，就可以把上面的两个相反的合并起来就可以了。</p><p><br></p><p>代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#概括字符集,就是用一个\加个字母来表示一类字符，比如刚开始的\d,\D</span><br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘hdsk\n122\rs3$ dkl%df36\t5&amp;’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\w’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个是匹配数字和单词</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#也可以匹配非数字非单词</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\W’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#匹配空格字符和制表符等其他字符</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\s’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#匹配除换行符之外的其他字符</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘.’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘1’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘l’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘6’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘5’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\n’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\r’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘$’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘%’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\t’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘&amp;’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\n’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\r’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\t’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘h’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘1’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘2’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\r’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘s’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘$’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘ ‘</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘k’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘l’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘%’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘d’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘f’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘3’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘6’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘\t’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘5’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘&amp;’</span>]<br></code></pre></section><p><br></p><p><br></p><p><strong>数量词：</strong></p><p style="text-indent: 2em;">当一个字符需要连续重复匹配多次时，就要用到这个。如匹配三个字符组成的字符串：</p><p style="text-indent: 0em;"><strong>[a-zA-z]{3}</strong>&nbsp;，大括号里面的表示重复次数。<br></p><p style="text-indent: 0em;">若要匹配三到六个字符，大括号的就需要这样写：<strong style="text-indent: 0em;">{3,6}.</strong></p><p style="text-indent: 0em;">代码如下;</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#数量词，当一个字符需要多次重复匹配时就需要用到</span><br><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> re<br>a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python java111php23 html’</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[a-z]{3}’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#重复多次就用大括号，括号内的数表示重复的次数</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#也可以重复一个范围，表示匹配3到6个字符</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[a-z]{3,6}’</span>,a)<br>print(r)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这样就可以把单词都找出来了</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pyt’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘hon’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘jav’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘htm’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘java’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘html’</span>]<br></code></pre></section><p style="text-indent: 0em;"><br></p><p style="text-indent: 0em;">其他数量词表示：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><strong><span style="font-size: inherit; color: inherit; line-height: inherit;"><em></em></span></strong><span style="font-size: inherit; color: inherit; line-height: inherit;"> ：匹配零次或无限多次</span></p></li><li><p><strong><span style="font-size: inherit; color: inherit; line-height: inherit;">+</span></strong><span style="font-size: inherit; color: inherit; line-height: inherit;">：匹配一次或以上</span></p></li><li><p><strong>?</strong>：匹配零次或者一次</p></li></ul><p><br></p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">a=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pytho243python34pythonn’</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#表示匹配对应内容0次或者无限次</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python*’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#这个就是代表对n字符的数量词匹配</span><br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#+表示匹配内容1次或者无限次</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python+’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#?表示可以匹配0次或者1次,注意这个？和上面的非贪婪代表的意思不一样</span><br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python?’</span>,a)<br>print(r)<br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pytho’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pythonn’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pythonn’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pytho’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>]<br></code></pre></section><p><br></p></section><p style="text-indent: 0em;"><strong>贪婪匹配：</strong>正则表达式默认为贪婪匹配，即匹配符合字符串的最大长度，如上面的[a-zA-z]{3,6}，他会趋于匹配长度为6的字符串，匹配到条件不满足时才停止匹配。</p><p style="text-indent: 0em;"><strong>非贪婪匹配：</strong>就是趋于匹配长度最小的字符串，匹配满足第一个条件就会停止匹配</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;">r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[a-z]{3,6}’</span>,a)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 贪婪匹配</span><br>print(r)<br>r=re.findall(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘[a-z]{3,6}?’</span>,a)<br>print(r)<span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#由于是非贪婪，所以匹配当第一个条件满足时就停止匹配</span><br><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 结果</span><br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘python’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘java’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘html’</span>]<br>[<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘pyt’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘hon’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘jav’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘php’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘htm’</span>]<br></code></pre></section><p style="text-indent: 0em;"><br></p><section class="_editor"><section style="border: 0px none; box-sizing: border-box;"><section style="margin: 10px 0px; padding: 0px; text-align: center; font-family: 微软雅黑; box-sizing: border-box;"><section class="_brush 96wx-bdrc" style="margin: 0px; padding: 0px; height: 24px; border-right: 1px solid rgb(245, 189, 209); border-left: 1px solid rgb(245, 189, 209); box-sizing: border-box;"></section><section class="_brush" style="margin-top: -12px; margin-bottom: -12px; padding: 0px; border-bottom: 1px solid rgb(245, 189, 209); box-sizing: border-box;"></section><section style="margin: 0px; padding: 0px; display: inline-block; box-sizing: border-box;"><section class="96wx-bdrc" style="margin: 0px; padding: 0px; border-right: 15px solid rgb(245, 189, 209); border-top: 12px solid transparent; border-bottom: 12px solid transparent; height: 0px; width: 0px; float: left; box-sizing: border-box;"></section><section class="96_bgc" style="margin: 0px; padding: 0px; height: 24px; min-width: 4em; color: rgb(255, 255, 255); line-height: 24px; float: left; background-color: rgb(245, 189, 209); box-sizing: border-box;"><span style="color:inherit;font-size:12px">END</span></section><section class="_brush" style="margin: 0px; padding: 0px; border-left: 15px solid rgb(245, 189, 209); border-top: 12px solid transparent; height: 0px; width: 0px; float: left; border-bottom: 12px solid transparent; box-sizing: border-box;"></section></section></section></section></section><p style="text-indent: 0em;">这篇文章只是介绍了下正则表达式的简单用法，可以用来入门正则，下一篇文章讲正则表达式高级点的用法。</p><p style="text-indent: 0em;"><br></p><p style="text-indent: 0em;"><br></p><p style="text-indent: 0em;"><br></p><p style="text-indent: 0em;">留个小练习：写一个正则来匹配生日，字符串为：</p><section class="output_wrapper" id="output_wrapper_id" style="line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><ul style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px 0px 0px 30px; margin: 0px;" class=" list-paddingleft-2"><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">2005-06-09</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">2005-6-9</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">2005 6 9</span></p></li><li><p><span style="font-size: inherit; color: inherit; line-height: inherit;">2005，06，09</span></p></li></ul><p>可以把答案写在留言区哈！</p><p><br></p><p>上述文章如有错误欢迎在留言区指出，如果这篇文章对你有用，点个赞，转个发如何？</p><p><br></p><section class="_editor"><section><br></section></section></section><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; letter-spacing: 0px; white-space: normal; line-height: 1.6; word-break: normal !important;"><section class="_editor" style="max-width: 100%; word-break: normal !important;"><section style="word-break: normal !important;"><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); font-weight: bold; line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">MORE</section><section style="padding-right: 8px; padding-left: 8px; height: 35px; display: inline-block; border-top: 1px solid rgb(0, 0, 0); border-bottom: 1px solid rgb(0, 0, 0); line-height: 35px; vertical-align: middle; word-break: normal !important; box-sizing: border-box;">延伸阅读</section><section style="padding-right: 15px; padding-left: 15px; line-height: 2em; word-break: normal !important; box-sizing: border-box;"><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483720&amp;idx=1&amp;sn=4567a228e1bcca2dcb4c23f0feac39b3&amp;chksm=fb4a7be4cc3df2f234c5b7102f107e72df42a24575dd5d735fb203dddf02ca6e2d3b2b41ce28&amp;scene=21#wechat_redirect">python爬虫常用库之requests详解</a><span style="color: rgb(79, 129, 189); font-size: 16px; word-break: normal !important;"></span></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑&nbsp;<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483653&amp;idx=1&amp;sn=7ce8f8fd19e408157937e219075f977b&amp;chksm=fb4a7ba9cc3df2bfca92eb5f53a79fbd9716f81df96070232a37919e6b83d020a470892d3b40&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483653&amp;idx=1&amp;sn=7ce8f8fd19e408157937e219075f977b&amp;chksm=fb4a7ba9cc3df2bfca92eb5f53a79fbd9716f81df96070232a37919e6b83d020a470892d3b40&amp;scene=21#wechat_redirect">python使用requests+re简单入门爬虫</a></span></p><p style="word-break: normal !important;"><span style="text-decoration-line: underline; word-break: normal !important;">◐◑<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483712&amp;idx=1&amp;sn=56ba3e5559bace77583492e7ac2d84cf&amp;chksm=fb4a7beccc3df2fa51260d5aa99918d45c63a753da68a3882a8c3d005777800212736637c50c&amp;scene=21#wechat_redirect" target="_blank" style="word-break: normal !important;" _href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483712&amp;idx=1&amp;sn=56ba3e5559bace77583492e7ac2d84cf&amp;chksm=fb4a7beccc3df2fa51260d5aa99918d45c63a753da68a3882a8c3d005777800212736637c50c&amp;scene=21#wechat_redirect">python爬虫常用库之urllib详解</a></span></p></section></section></section></section><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><img src="http://newcdn.96weixin.com/mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibk74yshaibAJSsAyOqweS8j9QMoNNocZY6wxvibicjWWu2rsZSNYGnCyJ93hZia9KtodsOrkyaA0z0bg/0?wx_fmt=png" height="auto" border="0" alt="1803114089.png" title="undefined" data-ratio="1.023076923076923" data-w="130" data-type="png" style="margin-bottom: 1.4px; border-radius: 5px; border-width: 1px; border-style: dashed; border-color: rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; word-break: normal !important; visibility: visible !important; width: 111.297px !important;" _src="http://newcdn.96weixin.com/mmbiz.qpic.cn/mmbiz_png/BIPpxEvceWibk74yshaibAJSsAyOqweS8j9QMoNNocZY6wxvibicjWWu2rsZSNYGnCyJ93hZia9KtodsOrkyaA0z0bg/0?wx_fmt=png"><br style="word-break: normal !important;"></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; word-break: normal !important;"><br></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">日常学python<br style="word-break: normal !important;"></span></p><p style="color: rgb(0, 0, 0); font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; font-size: medium; white-space: normal; text-align: center; word-break: normal !important;"><span style="font-size: 14px; word-break: normal !important;">代码不止bug,还有美和乐趣</span></p><p></p>]]></content>
    
    <summary type="html">
    
      在向网页进行了提交请求之类的之后，我们可以得到了网页的返回内容，里面自然而然会有我们想要的数据，但是html元素文本这么多，我们不可能一 一去找我们需要的数据，这时就需要用到正则表达式了，正则表达式是学爬虫必须学的内容，而且不止python可以用，java等其他语言都可以用，所以学了好处大大。
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="正则表达式" scheme="http://sergiojune.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>随便说点事情</title>
    <link href="http://sergiojune.com/2019/01/14/%E9%9A%8F%E4%BE%BF%E8%AF%B4%E7%82%B9%E4%BA%8B%E6%83%85/"/>
    <id>http://sergiojune.com/2019/01/14/随便说点事情/</id>
    <published>2019-01-14T07:43:14.176Z</published>
    <updated>2018-09-28T05:18:40.170Z</updated>
    
    <content type="html"><![CDATA[<h5 id="随便说点事情吧。"><a href="#随便说点事情吧。" class="headerlink" title="随便说点事情吧。"></a>随便说点事情吧。</h5><p>最近在学习c语言，算是对以前知识的复习，但是学习过程中并不是很想学，总是想着python，有时真的很怀疑自己是不是真的选择错了，好好的python转去学习c/c++。可能因为我自己有个gh吧，毕竟涉及到钱的问题就是很困扰，还是解脱不了对钱的束缚。</p><p>不过我是真的想学好底层基础，就是看着太无聊了，不肯花时间去慢慢学习，想把这些写下来，看看能不能让自己静下心来。</p><p>现在算是体会到了什么是孤独吧，一个人学习，一个人敲代码，很多人都没有共同语言，迷茫了又不敢去打扰别人，只好跑来自己的博客去倾诉。对啊，我还有自己的博客，你想说什么都可以，他都可以倾听！所以以后有事没事都来这里发发牢骚了，毕竟这是我的自留地。</p><p>今天终于把游戏给卸载了，自从我开了个gh之后为了钱好久没有认真学习了，我现在还在打算是否要继续发下去，转载文章也是需要精力，也不想随便转载而浪费了读者的阅读时间，这样子对不起读者，更对不起我自己。是时候做个权衡了。</p><ul><li>以后一周发两篇即可，其他的不管了，随意而为，发技术或者自己感想都可以吧。</li></ul><p>我这个博客需要更新了，好久之前就想更新了，一直没更新，还是自己的行动力不足啊，或者也是对自己的恐惧感不足。想起辉哥的一句话：任何行动力不足的都源自于你不够恐惧。足够恐惧，你就会行动。现在意识到自己处于一个很危险的处境也是很难的，很多时候自己都太过于骄傲了，但是自己其实很渣，这个坏毛病总是改不了。希望以后能改掉吧。</p><p>还有自己当初在家里想的那些目标，好像都没有实现到，一个月还剩两天就过了，目标一个都没有实现，不知道问题出在哪里了。自己买的书总是在第一周保持新鲜感，再过几天的话就越来越不想看了，这也是个大问题，得解决！可是自己没有办法，想了想，可能是自己没有那个「延迟满足感」吧，总想着做一件事，今天做完明天就能有效果，殊不知，效果这个东西只会在你不经意间才能体现出来，它并不会特意表现出来给你看的。还是马云说得好「今天很残酷，明天更残酷，后天会很美好，但大多数人倒在了明天晚上」。可能我就是那个大多数人吧，但我不甘心，我是要成为那小部分人的，我道理都挺那么多了，那我就得过好这一生，管理好自己。</p><p>这个博客从明天开始更新了，需要把我的笔记的都放上去了。</p><p>但是都是随意写的，自己看得懂就好，尽量也让大家都看得懂。</p><p>以上内容发自一个对自己游戏感到失望，对人生感到迷茫的渣渣，希望说出来能过得好点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;随便说点事情吧。&quot;&gt;&lt;a href=&quot;#随便说点事情吧。&quot; class=&quot;headerlink&quot; title=&quot;随便说点事情吧。&quot;&gt;&lt;/a&gt;随便说点事情吧。&lt;/h5&gt;&lt;p&gt;最近在学习c语言，算是对以前知识的复习，但是学习过程中并不是很想学，总是想着python，有
      
    
    </summary>
    
      <category term="个人随想" scheme="http://sergiojune.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="胡思乱想" scheme="http://sergiojune.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构的时间复杂度分析</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    <id>http://sergiojune.com/2019/01/14/数据结构的时间复杂度分析/</id>
    <published>2019-01-14T07:43:14.172Z</published>
    <updated>2018-10-05T02:20:39.099Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-算法定义"><a href="#1-算法定义" class="headerlink" title="1.算法定义"></a>1.算法定义</h4><p><br><br>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p><p>通俗来说，数据结构是指一组数据的存储结构，而算法就是操作数据的一组方法。就好比图书馆藏书籍，为了方便查找，通常都会分门别类地整理放在特定的地方，这些书籍的结构就是存储结构。当我们需要查找书的时候，我们是要按类别来查找呢，还是一本一本地找？或者按书本编号来查找？这个就是对数据存储的操作。所以说这些查找的方法都是算法。</p><h5 id="算法的五个基本特性："><a href="#算法的五个基本特性：" class="headerlink" title="算法的五个基本特性："></a>算法的五个基本特性：</h5><p><br></p><ol><li>输入：每个算法都有零个或多个输入</li><li>输出：算法一定会有输出，要不这个算法毫无意义</li><li>有穷性：指算法在执行有限的步骤后能自动结束，不会陷入死循环。并且每个步骤都需要在可接受的时间内完成</li><li>确定性：算法的每个步骤都需要有明确的意义</li><li>可行性：算法的每一步都能够通过执行有限次数完成<br><br><h5 id="对算法设计的五个要求"><a href="#对算法设计的五个要求" class="headerlink" title="对算法设计的五个要求"></a>对算法设计的五个要求</h5><br></li><li>正确性：指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案</li><li>可读性：设计的算法便于阅读、理解和交流</li><li>健壮性：当输入非法数据时，算法也能做出相应的处理，而不是产生异常或者有莫名其妙的结果</li><li>时间效率高：也就是等等下面详细说的时间复杂度要小。</li><li>存储量低：就是空间复杂度，追求时间少的同时，也尽可能追求需要消耗的内存少点。</li></ol><p><br></p><h4 id="2-度量算法的执行时间"><a href="#2-度量算法的执行时间" class="headerlink" title="2.度量算法的执行时间"></a>2.度量算法的执行时间</h4><p><br></p><h5 id="事后统计方法"><a href="#事后统计方法" class="headerlink" title="事后统计方法"></a>事后统计方法</h5><p><br><br>就是使用大量的测试数据进行对算法的测试，进而对不同的算法运行时间进行比较来确定算法效率的高低。</p><p>这样子并不好，一是测试结果非常依赖于测试环境，二是测试结果需要大规模的数据进行测试，非常浪费人力物力。非常不推荐使用这种方法来进行度量。</p><h5 id="大-O-复杂度的表示法"><a href="#大-O-复杂度的表示法" class="headerlink" title="大 O 复杂度的表示法"></a>大 O 复杂度的表示法</h5><p><br><br>通过对算法步骤实现代码的运行次数来度量算法的执行时间，随着代码的运行次数越少，其执行时间必定会越少，就比如下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># include&lt;stdio.h&gt;</span><br><span class="line"># include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int sum = 0;</span><br><span class="line">int i;</span><br><span class="line">for(i = 0; i &lt;= 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;sum=%d\n&quot;, sum);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oz39yfeyy.bkt.clouddn.com/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.png" alt="复杂度分析"></p><p>如上图所示，这段代码的时间复杂度就是 2n+ 5，当 n 很大时，这个公式中的低阶、常量和系数都是可以忽略不计的，也就是说上面程序的复杂度就是 n，记作 O(n)。</p><h4 id="3-时间复杂度的分析"><a href="#3-时间复杂度的分析" class="headerlink" title="3.时间复杂度的分析"></a>3.时间复杂度的分析</h4><h5 id="只关注循环执行次数最多的一段代码"><a href="#只关注循环执行次数最多的一段代码" class="headerlink" title="只关注循环执行次数最多的一段代码"></a>只关注循环执行次数最多的一段代码</h5><p>因为大 O 这种复杂度分析只关注最大阶的量级，会忽略掉低阶、常量和系数，所以在对时间复杂度的分析时，可以直接对循环次数最多的代码进行分析即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;</span><br><span class="line">while(i &lt; 100)</span><br><span class="line">&#123;</span><br><span class="line">i = i * 2;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p><br><br>根据方法我们只看循环部分即可，这个的分析方法可以先设 x 为代码执行步数，当 i 大于等于 100 时会退出循环，就是有 2 的 x 次方 等于 n(100)，可以推得 x = log2n ,最后去掉常量，一般写成 O(logn).<br><br></p><h5 id="加法法则"><a href="#加法法则" class="headerlink" title="加法法则"></a>加法法则</h5><p><br><br>就是总复杂度等于量级最大得那段代码的复杂度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int i, j;</span><br><span class="line">int sum = 0;</span><br><span class="line">for(i = 0; i &lt; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(j = 0; j &lt; 1000; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt; 1000; i++)</span><br><span class="line">&#123;</span><br><span class="line">    for(j = 0; j &lt; 1000; j++)</span><br><span class="line">    &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p><br><br>这个前面的两个循环都不如第三个嵌套循环量级大，就可以直接分析第三个循环的时间复杂度即可，所以该时间复杂度就是 O(n2)<br><br></p><h5 id="3-乘法法则"><a href="#3-乘法法则" class="headerlink" title="3.乘法法则"></a>3.乘法法则</h5><p><br><br>嵌套代码的时间复杂度等于嵌套内外代码复杂度的乘积。</p><p>嵌套可以是循环嵌套，也可以是函数内部嵌套另一个函数。</p><p>他们的时间复杂度都是外部嵌套的时间复杂度 乘于 内部嵌套代码的时间复杂度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int f1(int n)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">int sum = 0;</span><br><span class="line">for(; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + f2(i);</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int f2(int n)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">int sum = 0;</span><br><span class="line">while(i &lt; n);</span><br><span class="line">sum = sum * 2;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 f1 函数的时间复杂度就是等于 f1的循环代码的时间复杂度 乘于 f2 的时间复杂度， 也就是 O(n*logn)</p><p><br></p><h4 id="4-常见的时间复杂度"><a href="#4-常见的时间复杂度" class="headerlink" title="4.常见的时间复杂度"></a>4.常见的时间复杂度</h4><p><br></p><ul><li>常数阶O(1), </li><li>对数阶O(log n), </li><li>3线性阶O(n), </li><li>线性对数阶O(n log n), </li><li>平方阶O(n^2)， </li><li>立方阶O(n^3) </li><li>k次方阶O(n^K), </li><li>指数阶O(2^n)。<br><br><br>消耗时间从小到大排序为： O(1) &lt; (log n) &lt; (n) &lt; O(n log n) &lt; (n^2) &lt; O(n^3) &lt; O(n^3) &lt; O(n^K) &lt; O(2^n)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-算法定义&quot;&gt;&lt;a href=&quot;#1-算法定义&quot; class=&quot;headerlink&quot; title=&quot;1.算法定义&quot;&gt;&lt;/a&gt;1.算法定义&lt;/h4&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="时间复杂度" scheme="http://sergiojune.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之栈的理解及实现</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E6%80%A7%E6%A0%88%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiojune.com/2019/01/14/数据结构之线性栈的理解及实现/</id>
    <published>2019-01-14T07:43:14.168Z</published>
    <updated>2018-10-10T10:35:55.414Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-栈的理解"><a href="#1-栈的理解" class="headerlink" title="1.栈的理解"></a>1.栈的理解</h4><p>栈是一种只允许从一端插入或者删除数据的结构，就比如你向弹匣装子弹，只能在头部装，在打枪的时候，也是在头部的子弹先发射出去，简单地说就是后进先出。</p><p>栈的插入操作叫做进栈，也称压栈、入栈。<br>栈的删除操作叫做出栈，也叫弹栈。</p><h4 id="2-栈的应用"><a href="#2-栈的应用" class="headerlink" title="2.栈的应用"></a>2.栈的应用</h4><p>我们在浏览网页的时候，都会有个后退的按钮，这个就是用栈来实现的，还有就是大部分软件的可撤销操作，也都是用栈实现的。</p><h4 id="3-栈的结构需要实现的方法"><a href="#3-栈的结构需要实现的方法" class="headerlink" title="3.栈的结构需要实现的方法"></a>3.栈的结构需要实现的方法</h4><p>结构：<br>  需要声明栈的容量以及当前栈的长度（就是下一个元素插入的位置或者当前栈顶的元素位置）</p><p>方法：</p><ol><li>InitStack(*s):  初始化操作，建立一个空栈。</li><li>DestoryStack(*s):  若栈存在，就销毁栈</li><li>ClearStaack(*s):  清空栈</li><li>StackEmpty(*s):  判断栈是否为空，若为空，返回true</li><li>GetTop(*s, e): 若栈顶存在，就用 e 来返回栈定元素</li><li>Push(*s， e): 向栈顶插入元素，并用 e 返回栈顶元素</li><li>Pop(*s, e): 若站栈顶存在，就删除栈顶元素并赋值给 e 返回</li><li>StackLength(): 获取栈的长度</li></ol><h4 id="4-用-c-语言实现栈"><a href="#4-用-c-语言实现栈" class="headerlink" title="4.用 c 语言实现栈"></a>4.用 c 语言实现栈</h4><p>有空补上</p><h4 id="5-用-Java-语言实现栈"><a href="#5-用-Java-语言实现栈" class="headerlink" title="5. 用 Java 语言实现栈"></a>5. 用 Java 语言实现栈</h4><h5 id="顺序存储结构实现栈"><a href="#顺序存储结构实现栈" class="headerlink" title="顺序存储结构实现栈"></a>顺序存储结构实现栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayStack implements Stack &#123;</span><br><span class="line">    int length;</span><br><span class="line">    int[] arr;</span><br><span class="line"></span><br><span class="line">    public ArrayStack(int capacity)&#123;</span><br><span class="line">        arr = new int[capacity];</span><br><span class="line">        length = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 默认创建长度为10的数组</span><br><span class="line">     public ArrayStack()&#123;</span><br><span class="line">        this(10);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int length() &#123;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int peek() &#123;</span><br><span class="line">        if(length == 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;不存在栈顶元素&quot;);</span><br><span class="line"></span><br><span class="line">        return arr[length - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int pop() &#123;</span><br><span class="line">        if(length == 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;出栈失败，栈顶为空&quot;);</span><br><span class="line"></span><br><span class="line">        int e = arr[length - 1];</span><br><span class="line">        length --;</span><br><span class="line">        // 当栈长度小于当前容量的4倍时就进行数据搬移，防止占用大量空间</span><br><span class="line">        // 这个时候也要判断 arr.length / 2 != 0，因为不能创建长度为0的数组</span><br><span class="line">        // 4倍才进行缩小是因为防止时间复杂度进行了震荡</span><br><span class="line">        if(length == arr.length / 4 &amp;&amp; arr.length / 2 != 0)</span><br><span class="line">            resize(arr.length / 2);</span><br><span class="line">        return e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void push(int e) &#123;</span><br><span class="line">        if(length &gt;= arr.length)</span><br><span class="line">            resize(length * 2);  // 扩容为当前两倍</span><br><span class="line"></span><br><span class="line">        arr[length] = e;</span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 动态扩容栈</span><br><span class="line">    public void resize(int capacity)&#123;</span><br><span class="line">        int [] newArr = new int[capacity];</span><br><span class="line">        for(int i = 0; i &lt; length; i ++)&#123;</span><br><span class="line">            newArr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr = newArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        res.append(String.format(&quot;capacoty:%d, length:%d\n&quot;, arr.length, length));</span><br><span class="line">        res.append(&quot;ArrayStack: tail [&quot;);</span><br><span class="line">        for(int i = 0; i &lt; length; i++)&#123;</span><br><span class="line">            res.append(arr[i]);</span><br><span class="line">            if(i != length - 1)</span><br><span class="line">                res.append(&quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(&quot;] top&quot;);</span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedListStack implements Stack &#123;</span><br><span class="line"></span><br><span class="line">    class Node&#123;</span><br><span class="line">        int data;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        public Node(int data, Node next)&#123;</span><br><span class="line">            this.data = data;</span><br><span class="line">            this.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Node(int data)&#123;</span><br><span class="line">            this(data, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int length;</span><br><span class="line">    Node head;</span><br><span class="line"></span><br><span class="line">    public LinkedListStack()&#123;</span><br><span class="line">        length = 0;</span><br><span class="line">        // 虚拟头节点</span><br><span class="line">        head = new Node(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int length() &#123;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void push(int e) &#123;</span><br><span class="line">        // 直接插入链表的头部</span><br><span class="line">        Node node = new Node(e);</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int pop() &#123;</span><br><span class="line">        if(length == 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;出栈失败，当前栈为空&quot;);</span><br><span class="line"></span><br><span class="line">        Node node = head.next;</span><br><span class="line">        head.next = node.next;</span><br><span class="line">        length --;</span><br><span class="line">        return node.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int peek() &#123;</span><br><span class="line">        if(length == 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;出栈失败，当前栈为空&quot;);</span><br><span class="line"></span><br><span class="line">        return head.next.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        Node node = head.next;</span><br><span class="line">        res.append(String.format(&quot;length: %d\n&quot;, length));</span><br><span class="line">        res.append(&quot;LinkedList: &quot;);</span><br><span class="line">        for(int i = 0; i &lt; length; i++)&#123;</span><br><span class="line">            res.append(node.data);</span><br><span class="line">            res.append(&quot; --&gt; &quot;);</span><br><span class="line">            node =  node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(&quot;NULL&quot;);</span><br><span class="line"></span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-栈的理解&quot;&gt;&lt;a href=&quot;#1-栈的理解&quot; class=&quot;headerlink&quot; title=&quot;1.栈的理解&quot;&gt;&lt;/a&gt;1.栈的理解&lt;/h4&gt;&lt;p&gt;栈是一种只允许从一端插入或者删除数据的结构，就比如你向弹匣装子弹，只能在头部装，在打枪的时候，也是在头部的子
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="http://sergiojune.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之数组的基本方法实现</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiojune.com/2019/01/14/数据结构之数组的基本方法实现/</id>
    <published>2019-01-14T07:43:14.166Z</published>
    <updated>2018-10-06T02:34:58.565Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-数组介绍"><a href="#1-数组介绍" class="headerlink" title="1.数组介绍"></a>1.数组介绍</h4><p><br><br>数组就是内存中一段连续的存储空间，并且存储的内容必须数据类型相同。<br>数组坐标从 0 开始，因为是在 c 语言中的计算数组的地址位置时，这样计算的：</p><blockquote><p>arr[i]_address = base_addrress + i * sizeof(data)</p></blockquote><p>如果从 1 开始，cpu 就会多执行了一次减法计算，对人类也不友好</p><blockquote><p>arr[i]_address = base_addrress + (i-1) * sizeof(data)</p></blockquote><p>其他语言也是和向 c 学习的，因为这样可以减轻大家的学习成本（我猜的）</p><h4 id="2-什么时候用数组"><a href="#2-什么时候用数组" class="headerlink" title="2.什么时候用数组"></a>2.什么时候用数组</h4><p><br><br>当一组数据需要经常对数据进行查询和改变元素的值，这个时候就可以使用数组，因为数组是一段连续的存储空间，这就有利于根据地址来查找某一个位置的元素或者进行改变，这两个操作都是 O(1)。</p><p>比如英雄联盟中的商店，那个装备位置都是固定的，你就可以根据地址快速找出装备来进行查看，这个就可以用数组来实现。</p><p>但是你的装备栏就不可以了，因为需要经常回家更新装备，需要进行大量的插入和删除，这个时候再用数组来存储的话，就显得效率很低了，因为这两个的时间复杂度都是 O(n)。但是另一种数据结构就非常合适，就是链表。这个以后再说。</p><p>数组的插入和删除操作也是可以通过适当改变也可以让其时间复杂度变小点的。比如在对数组进行删除时，我们可以先把需要删除的元素记录下来暂不处理，当数组的容量装不下来的时候，这个时候再触发真正的删除操作，这样子就可以大大地减少对数据的迁移以及申请内存空间的操作。</p><p>还有插入的时候我们也可以先把需要插入位置的元素(初始元素)先把其放进数组尾部，然后把元素插入该位置，然后记录下这些元素的位置，当数组容量满的时候，再进行一次数据迁移，这样也可大大减少数据迁移工作。</p><p>这两个可以说是通过空间换时间吧。</p><h4 id="3-基本方法"><a href="#3-基本方法" class="headerlink" title="3. 基本方法"></a>3. 基本方法</h4><p><br><br>数组结构：1.数组声明  2.数组当前长度</p><p>方法：</p><ul><li>boolean isEmpty()：判断数组是否为空，时间复杂度为 O(1)</li><li>int get(int index)：根据 index 获取元素，时间复杂度为 O(1)</li><li>set(int index, int e)：改变 index 位置的元素，时间复杂度为 O(1)</li><li>int find(int e)：查找该元素是否存在在数组，存在就返回该元素的位置，反之返回 -1，时间复杂度为 O(1)</li><li>void add(int index, int e)：添加元素，时间复杂度为 O(n)</li><li>int remove(int index)：删除元素，时间复杂度为 O(n)</li></ul><h4 id="4-方法的实现"><a href="#4-方法的实现" class="headerlink" title="4.方法的实现"></a>4.方法的实现</h4><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class ArrayList &#123;</span><br><span class="line">    int length;  // 当前数组的长度</span><br><span class="line">    int[] array;  // 暂时存储int类型</span><br><span class="line"></span><br><span class="line">    // 初始化数组</span><br><span class="line">    public ArrayList(int capacity)&#123;</span><br><span class="line">        this.array = new int[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    //空参数的就默认容量为10</span><br><span class="line">    public ArrayList()&#123;</span><br><span class="line">        this(10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取当前数组长度</span><br><span class="line">    public int getLength()&#123;</span><br><span class="line">        return this.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断数组是否为空</span><br><span class="line">    public boolean isEmpty()&#123;</span><br><span class="line">        return this.length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据index获取线性表的值</span><br><span class="line">    public int get(int index)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;= length)&#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;index 不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 改变 index 位置的元素</span><br><span class="line">    public int set(int index, int e)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;= length)&#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;改变元素失败，index 不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int k = array[index];</span><br><span class="line">        array[index] = e;</span><br><span class="line">        return k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据所给的值查找该元素在数组的位置，不存在就返回 -1</span><br><span class="line">    public int find(int e)&#123;</span><br><span class="line">//        for(int i = 0; i &lt; length; i++)&#123;</span><br><span class="line">//            if(array[i] == e)</span><br><span class="line">//                return i;</span><br><span class="line">//        &#125;</span><br><span class="line">//        return -1;</span><br><span class="line"></span><br><span class="line">        // 需要先判断数组是否为空</span><br><span class="line">        if(length == 0)</span><br><span class="line">            return -1;</span><br><span class="line"></span><br><span class="line">        if(array[length - 1] == e)</span><br><span class="line">            return length -1;</span><br><span class="line">        int key = array[length - 1];  // 记录最后一个元素</span><br><span class="line">        array[length - 1] = e;  // 当哨兵</span><br><span class="line">        int i = 0;</span><br><span class="line">        while(array[i] != e) // 这个比上面的方法少了个判断，当数组过大时，效率就会有差别</span><br><span class="line">            i++;</span><br><span class="line">        // 再把最后一个元素复原</span><br><span class="line">        array[length - 1] = key;</span><br><span class="line">        if(i == length - 1)</span><br><span class="line">            return -1;</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 向index位置插入元素</span><br><span class="line">    public void add(int index, int e)&#123;</span><br><span class="line">        if(index &gt; length || index &lt; 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;添加元素失败，index非法&quot;);</span><br><span class="line"></span><br><span class="line">        if(length &gt;= array.length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;添加元素失败，容量已达到最大&quot;);</span><br><span class="line"></span><br><span class="line">        for(int i = length; i &gt; index; i--)&#123;</span><br><span class="line">            array[i] = array[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        array[index] = e;</span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除当前数组的index位置的元素</span><br><span class="line">    public int remove(int index)&#123;</span><br><span class="line">        if(index &gt; length || index &lt; 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;删除元素失败，index非法&quot;);</span><br><span class="line">        int e = array[index];</span><br><span class="line">        for(int i = index; i &lt; length - 1; i++)&#123;</span><br><span class="line">            array[i] = array[i + 1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length --;</span><br><span class="line">        return e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        res.append(String.format(&quot;capacity: %d, length: %d\n&quot;, array.length, length));</span><br><span class="line">        res.append(&quot;Array: [ &quot;);</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            res.append(array[i]);</span><br><span class="line">            if(i == length - 1)</span><br><span class="line">                res.append(&apos;]&apos;);</span><br><span class="line">            else</span><br><span class="line">                res.append(&quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> <br></p><h4 id="5-以后再补充别的扩展"><a href="#5-以后再补充别的扩展" class="headerlink" title="5. 以后再补充别的扩展"></a>5. 以后再补充别的扩展</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-数组介绍&quot;&gt;&lt;a href=&quot;#1-数组介绍&quot; class=&quot;headerlink&quot; title=&quot;1.数组介绍&quot;&gt;&lt;/a&gt;1.数组介绍&lt;/h4&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;数组就是内存中一段连续的存储空间，并且存储的内容必须数据类型相同。&lt;br&gt;数组坐标从 0 开
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数组" scheme="http://sergiojune.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之单链表的基本方法实现</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiojune.com/2019/01/14/数据结构之单链表的基本方法实现/</id>
    <published>2019-01-14T07:43:14.165Z</published>
    <updated>2018-10-06T08:21:28.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-链表的定义"><a href="#1-链表的定义" class="headerlink" title="1.链表的定义"></a>1.链表的定义</h4><p><br><br>与数组有很大的区别，链表不用去申请一段连续的空间，而且他的存储是不连续的，可以真正地做到动态长度。在链表中，不但需要记录该元素的值，还需要记录下一个元素的地址。</p><p>数组在使用时需要申请一段连续空间，当内存不足时就会申请失败，使用链表就可以避免这个问题，不需要进行申请一段连续的内存空间，可以进行动态申请，用到的时候才需要申请。</p><h4 id="2-什么时候用链表"><a href="#2-什么时候用链表" class="headerlink" title="2.什么时候用链表"></a>2.什么时候用链表</h4><p>当需要对数据进行大量的删除插入操作的时候，就可以选择使用链表，这两个操作对于链表来说他的时间复杂度可以说是 O(1)。严格意义来说还是 O(n)。因为进行插入数据的时候，还是需要通过遍历来找到插入的位置，但是这里不需要进行数据迁移，将数据插入即可。如下图所示：</p><p><img src="http://oz39yfeyy.bkt.clouddn.com/%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.png" alt="链表插入"></p><p>可以看到，找到位置后，修改其下一个指向元素指向即可，但是需要注意的是，两个指向的改变顺序不能变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n.next = node.next;</span><br><span class="line">node.next = n;</span><br></pre></td></tr></table></figure><p>变了之后就会使新插入的元素指向自己，这就会产生引用混乱了。</p><p>删除元素也是同理。</p><h4 id="3-加入虚拟头结点的作用"><a href="#3-加入虚拟头结点的作用" class="headerlink" title="3.加入虚拟头结点的作用"></a>3.加入虚拟头结点的作用</h4><p><br><br>在对链表进行插入和删除等操作时，都必须考虑头结点是否为空的情况，因为不为空才会有下一个节点的存在。</p><p>在加上了虚拟头结点，就可以节省这一步的操作，无论链表是否为空，都必定存在链表，只不过这个链表只有虚拟头结点的时候长度还是为 0， 这个时候就可以判断该节点的下一个节点是否为空即可。</p><p>注意：虚拟头结点不算入长度</p><h4 id="4-需要的结构以及实现的基本方法"><a href="#4-需要的结构以及实现的基本方法" class="headerlink" title="4.需要的结构以及实现的基本方法"></a>4.需要的结构以及实现的基本方法</h4><p><br><br>结构:<br>    需要一个内部类，里面存储元素的值以及下一个元素的引用<br>    同时在初始化链表的时候需要声明长度为 0 ，并且实现虚拟头结点</p><p>方法：</p><ul><li>int getLength()：获取链表长度</li><li>boolean isEmpty()：判断链表是否为空</li><li>void add(int index, int data)：向链表的 index 位置加入元素</li><li>int get(int index)：获取 index 位置的元素</li><li>void set(int index, int data)：修改 index 位置的元素</li><li>boolean contains(int data)：判断该元素是否在链表中</li><li>int remove(int index)：移除链表中 index 位置的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">// 单链表</span><br><span class="line">public class SinglyLinkedlist &#123;</span><br><span class="line">    // 节点结构</span><br><span class="line">    class Node&#123;</span><br><span class="line">        int data;</span><br><span class="line">        Node next;  // 记录下一节点</span><br><span class="line"></span><br><span class="line">        public Node(Node node, int data)&#123;</span><br><span class="line">            this.next = node;</span><br><span class="line">            this.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        public Node(int data)&#123;</span><br><span class="line">            this(null, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String toString()&#123;</span><br><span class="line">            return data + &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int length;</span><br><span class="line">    Node head;  // 虚拟头结点</span><br><span class="line"></span><br><span class="line">    public SinglyLinkedlist()&#123;</span><br><span class="line">        this.length = 0;</span><br><span class="line">        // 初始化头结点</span><br><span class="line">        head = new Node(null, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取长度</span><br><span class="line">    public int getLength()&#123;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断链表是否为空</span><br><span class="line">    public boolean isEmpty()&#123;</span><br><span class="line">        return length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 往链表头添加元素</span><br><span class="line">    public void addFirst(int data)&#123;</span><br><span class="line">        // 因为第一个节点是不存储数据的，所以不需要判断第一个节点是否为空</span><br><span class="line">//        Node node = new Node(data);</span><br><span class="line">//        node.next = head.next;</span><br><span class="line">//        head.next = node;</span><br><span class="line">//        length ++;</span><br><span class="line"></span><br><span class="line">        add(0, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 往链尾添加元素</span><br><span class="line">    public void addLast(int data)&#123;</span><br><span class="line"></span><br><span class="line">//        Node node = head;</span><br><span class="line">//        for (;node.next != null; node = node.next) &#123;</span><br><span class="line">//</span><br><span class="line">//        &#125;</span><br><span class="line">//        node.next = new Node(data);</span><br><span class="line">//        length ++;</span><br><span class="line"></span><br><span class="line">        add(length, data);  // 直接调用自己的函数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 往链表任意位置插入元素</span><br><span class="line">    public void add(int index, int data)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;插入元素失败，index 非法&quot;);</span><br><span class="line"></span><br><span class="line">        Node node = head;</span><br><span class="line">        int i = 0;</span><br><span class="line">        // 找到插入元素位置的前一个节点即可</span><br><span class="line">        while(i &lt; index)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">        Node n = new Node(data);</span><br><span class="line">        n.next = node.next;</span><br><span class="line">        node.next = n;</span><br><span class="line"></span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取链表index的位置</span><br><span class="line">    public int get(int index)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;= length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;获取元素失败，index 非法&quot;);</span><br><span class="line">        Node node = head;</span><br><span class="line">        for(int i = 0; i &lt; index; i++)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return node.next.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取首位元素</span><br><span class="line">    public int getFirst()&#123;</span><br><span class="line">        return get(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取尾部元素</span><br><span class="line">    public int getLast()&#123;</span><br><span class="line">        return get(length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 修改链表中的 index 位置的元素</span><br><span class="line">    public void set(int index, int data)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;= length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;插入元素失败，index 非法&quot;);</span><br><span class="line">        Node node = head.next;</span><br><span class="line">        int i = 0;</span><br><span class="line">        while(i &lt; index)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        node.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 查询链表是否包含这个元素</span><br><span class="line">    public boolean contains(int data)&#123;</span><br><span class="line">        Node node = head.next;</span><br><span class="line">        while(node != null)&#123;</span><br><span class="line">            if(node.data == data)</span><br><span class="line">                return true;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除指定节点</span><br><span class="line">    public int remove(int index)&#123;</span><br><span class="line">        if(index &lt; 0 || index &gt;= length)</span><br><span class="line">            throw new IllegalArgumentException(&quot;删除元素失败，index 非法&quot;);</span><br><span class="line">        Node node = head;</span><br><span class="line">        for (int i = 0; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node n = node.next;  // 准备被删除的元素</span><br><span class="line">        node.next = n.next;</span><br><span class="line">        int data = n.data;</span><br><span class="line">        n.next = null;  // 释放</span><br><span class="line">        length--;  // 必须记得这个</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除头结点</span><br><span class="line">    public int removeFirst()&#123;</span><br><span class="line">        return remove(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除尾节点</span><br><span class="line">    public int removeLast()&#123;</span><br><span class="line">        return remove(length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        Node node = head.next;</span><br><span class="line">        res.append(String.format(&quot;length: %d\n&quot;, length));</span><br><span class="line">        res.append(&quot;LinkedList: &quot;);</span><br><span class="line">        for(int i = 0; i &lt; length; i++)&#123;</span><br><span class="line">            res.append(node.data);</span><br><span class="line">            res.append(&quot; --&gt; &quot;);</span><br><span class="line">            node =  node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(&quot;NULL&quot;);</span><br><span class="line"></span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-以后补充"><a href="#5-以后补充" class="headerlink" title="5.以后补充"></a>5.以后补充</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-链表的定义&quot;&gt;&lt;a href=&quot;#1-链表的定义&quot; class=&quot;headerlink&quot; title=&quot;1.链表的定义&quot;&gt;&lt;/a&gt;1.链表的定义&lt;/h4&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;与数组有很大的区别，链表不用去申请一段连续的空间，而且他的存储是不连续的，可以真正地
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单链表" scheme="http://sergiojune.com/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>抓包软件 Fiddler 了解一下？</title>
    <link href="http://sergiojune.com/2019/01/14/%E6%8A%93%E5%8C%85%E8%BD%AF%E4%BB%B6%20Fiddler%20%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F/"/>
    <id>http://sergiojune.com/2019/01/14/抓包软件 Fiddler 了解一下？/</id>
    <published>2019-01-14T07:43:14.141Z</published>
    <updated>2019-01-14T07:09:43.354Z</updated>
    
    <content type="html"><![CDATA[<p>学会如何抓包，是爬虫的必备技能，甚至可以说，不会抓包就等同于不会爬虫。</p><p>那我们怎样抓包呢？如果直接抓取浏览器上的内容，可以直接使用开发者工具进行抓包，但有个局限，只能抓浏览器的，功能也没有多少。还可以使用别的工具，比如 mitmproxy、charles，当然还有今天所说的 Fiddler 。今天要分享的就是如何使用fiddler进行抓包以及它的功能讲解。</p><p>1. 下载并安装fiddler</p><p>下载地址：<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">https://www.telerik.com/download/fiddler</a></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff309ee605?w=939&amp;h=639&amp;f=jpeg&amp;s=34612" alt=""></p><p>这里填写下你的下载目的和国家就可以下载了，安装的话这里就不多说了。</p><p>2. Fiddler工作原理以及优缺点</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff3088fcde?w=580&amp;h=265&amp;f=jpeg&amp;s=19599" alt=""></p><blockquote><p>图片来自<a href="https://blog.csdn.net/DreamTL/article/details/70405368" target="_blank" rel="noopener">https://blog.csdn.net/DreamTL/article/details/70405368</a></p></blockquote><p>如上图，Fiddler 作为一个代理，先是捕捉到客户端的 request 请求，然后再自己转发到服务器端，服务器接收到请求时，会返回一个响应 response ，Fiddler 还是会继续捕捉到服务器的响应请求，再来转发给客户端，简单来说， Fiddler 就是作为一个中间人。</p><p>优缺点：</p><p>只支持 http、https、ftp、webscoket 数据流等相关协议的捕捉，无法监测或修改其他数据流，如 SMTP、POP3 协议(邮箱相关的协议)，无法处理请求和响应超过 2GB 的数据，还有就是只支持 windows 平台，如果想要支持 mac 的话，建议下载 charles ，不过很吃性能，在我机子上运行下那风扇就想起来了。</p><p>3. Fiddler 功能详解</p><p>3.1 如何进行抓包</p><p>1）先勾选允许抓取 https 流量</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff322ba85a?w=519&amp;h=448&amp;f=jpeg&amp;s=28645" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff3317578c?w=698&amp;h=470&amp;f=jpeg&amp;s=42357" alt=""></p><p>这个就是允许抓取 https 的流量。如果第一次使用，勾选之后会提示你安装一个证书，这个证书就是用来做中间人进行抓包的， Fiddler使用此证书来解密所捕捉到的包，再加密转发到相对应的服务器端或者客户端。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff33484301?w=944&amp;h=361&amp;f=jpeg&amp;s=42702" alt=""></p><p>如果你还没有安装就点击 Yes 安装即可，如果没有弹出此窗口的也可以点击右上角的 actio 按钮的第一个选项也是可以弹出此个窗口的</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff727d5ce2?w=668&amp;h=344&amp;f=jpeg&amp;s=27001" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff4ae9d6ef?w=698&amp;h=470&amp;f=jpeg&amp;s=45614" alt=""></p><p>上面圈出来的是表示抓取哪一部分的流量。</p><ol><li><p>from all processes：抓取所有进程的流量</p></li><li><p>from browsers only：只抓取浏览器的流量</p></li><li><p>from non-browsers only：不抓取浏览器的流量</p></li><li><p>from remote clients only：抓取远程的客户端，当需要抓取的是手机端的流量，就需要用到这个</p></li></ol><p>2)接下来设置端口号</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff4b18ae39?w=698&amp;h=470&amp;f=jpeg&amp;s=49594" alt=""></p><p>一般默认即可，这里我设置成了8889。</p><p>下面的那个 Allow remote computers to connect 是允许远程的客户端进行连接，如果抓取手机端的也需要勾选。</p><p>3)浏览器设置代理服务器</p><p>Fiddler 的设置完了，这时候还需要在你的浏览器上设置代理服务器才能进行抓取。</p><p>使用 Chrome 浏览器的可以直接使用 SwitchyOmega 插件进行修改即可，操作简单。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff4c97ee4a?w=1080&amp;h=329&amp;f=jpeg&amp;s=25538" alt=""></p><p>点击新增情景模式</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff4e6d7c81?w=1080&amp;h=530&amp;f=jpeg&amp;s=43547" alt=""></p><p>选择代理服务器，随后填写任意名字，这里我填写的是 Fiddler,点击创建即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff50247d08?w=1080&amp;h=383&amp;f=jpeg&amp;s=28556" alt=""></p><p>然后填写以上内容，代理服务器为本机，端口号为上面在 Fiddler 设置的端口号，填写完在左下角点应用选项才算设置完毕。</p><p>设置完之后再在浏览器插件处点击该插件，然后选择该模式即可开始抓包</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff6603f516?w=355&amp;h=464&amp;f=png&amp;s=26773" alt=""></p><p>设置完之后第一次打开可能是这样的</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff67a83be2?w=1080&amp;h=534&amp;f=png&amp;s=40596" alt=""></p><p>关闭 Fiddler 再重新打开就可以了</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff67e10018?w=958&amp;h=446&amp;f=jpeg&amp;s=79928" alt=""></p><p>3.2 进行手机端抓包</p><p>手机端的抓包也是很容易的，先是设置好 Fiddler 的允许抓取远程客户端。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff69f772de?w=698&amp;h=470&amp;f=jpeg&amp;s=44710" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff6f4c63bb?w=698&amp;h=470&amp;f=jpeg&amp;s=51931" alt=""></p><p>这时用手机连接wifi，然后长按修改网络(不同安卓手机不一样)</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff83056547?w=1080&amp;h=2248&amp;f=jpeg&amp;s=83762" alt=""></p><p>点击代理，然后点击手动</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff8320eb25?w=1080&amp;h=2248&amp;f=jpeg&amp;s=89058" alt=""></p><p>主机名就写你电脑上的 ip 地址，查看 ip 地址可以在控制台上输入 ipconfig 即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff8419dfbc?w=1080&amp;h=584&amp;f=jpeg&amp;s=40902" alt=""></p><p>由于我的电脑也是连接 wifi 的，所以 ip 地址对应的是 无线网络的那个，如果你的电脑是使用网线来进行上网的，那 ip 地址就是 以太网的那个。</p><p>填完之后还不能抓取，如果直接抓取会显示证书有问题。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff8a5fbd36?w=1080&amp;h=2248&amp;f=jpeg&amp;s=47704" alt=""></p><p>我们也是需要安装证书才可以正常抓取的。那接下来安装证书</p><p>手机浏览器输入 你的ip地址:端口号 进入网址下载证书，如 192.168.1.2:8888， 端口号还是之前在 Fiddler设置的那个</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff8bde1d94?w=1080&amp;h=2248&amp;f=jpeg&amp;s=86301" alt=""></p><p>点击上图箭头的网址进行下载即可，下载完毕之后点击安装即可。</p><p>如果你是 miui 系统的机子，就需要进入wifi 设置的界面进行安装</p><p>点击 高级设置 –&gt; 安装证书 即可，期间需要密码验证或者设置密码之类的设置即可。</p><p>还有一个大坑，就是如果你的机子 是安卓 9 而是 miui 系统(其他系统没测试过)的话，安装了证书也是没用的，在进行抓包的时候还是会提示证书有问题。安卓 8 版本的我没有测试过，不过安卓 7 版本以下的估计都可以。</p><p>弄完了以上的东西就可以抓包了，如果设置完了，网络没了，还是那样子，第一次设置完需要重启下 Fiddler 软件就可以抓包了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff8cb0964b?w=901&amp;h=881&amp;f=jpeg&amp;s=125080" alt=""></p><p>3.3 抓包内容的介绍</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afff9d5fdbc2?w=1080&amp;h=569&amp;f=jpeg&amp;s=133781" alt=""></p><p>很明显左边的就是捕捉的请求和响应，右边的就是对应请求的详细信息，比如请求头，表单信息，比如上图下面箭头所指的就是表单信息。，如果这些信息看到的内容很少的话，可以直接点击下面的 View in Notepad 按钮就可以在笔记本中显示出来，非常方便。</p><p>左边每列代表的含义为：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffa229fc1a?w=663&amp;h=391&amp;f=jpeg&amp;s=23159" alt=""></p><p>左边第一列中每个图片代表的含义为：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffa69f1a96?w=456&amp;h=145&amp;f=png&amp;s=20644" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffa7c97916?w=336&amp;h=266&amp;f=png&amp;s=32045" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffadc550f0?w=328&amp;h=98&amp;f=png&amp;s=15690" alt=""></p><p>3.4 再说几个常用的功能</p><p>查找：抓包时，经常会抓到一堆不重要的包，而需要找的包夹杂在里面非常难找，所以就可以用关键字来查找，入口为：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffade02120?w=484&amp;h=451&amp;f=jpeg&amp;s=45273" alt=""></p><p>也可以直接点击这个<img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffba31cdf3?w=647&amp;h=262&amp;f=jpeg&amp;s=25745" alt=""></p><p>或者直接按快捷键 Ctrl + F 即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffbc8bfc3c?w=390&amp;h=400&amp;f=jpeg&amp;s=24402" alt=""></p><p>这里的功能很强大，可以只查找请求或者响应或者两个都查，还可以用正则表达式来查找，就不一 一说了。</p><p>映射：也就是重定向，将服务器端的响应内容可以更改为客户端上的文件，功能也是很强大，之前我在爬取网易云评论时也是弄过的，有兴趣的可以看看<a href="http://mp.weixin.qq.com/s?__biz=MzU0NzY0NzQyNw==&amp;mid=2247483673&amp;idx=1&amp;sn=6c89eb9474d2076afb6405a9fd972e4f&amp;chksm=fb4a7bb5cc3df2a3ca3235ebe8bddf635839e5fd5a1b998b08dae521d449ee4388ae6ed7bbda&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">利用python爬取网易云音乐，并把数据存入mysql</a>。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffc34c68a8?w=1080&amp;h=740&amp;f=jpeg&amp;s=81331" alt=""></p><p>在这里填写对应的规则和文件即可</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffc7efbe58?w=1014&amp;h=912&amp;f=jpeg&amp;s=60498" alt=""></p><p>还有一个类似于 postman的功能，就是下面这个</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffc9534a3b?w=1080&amp;h=987&amp;f=jpeg&amp;s=86354" alt=""></p><p>就是在这里模拟请求，有什么需要模拟的话可以先在这里模拟一次，成功之后再用编程去敲出来也是不错的，非常强大。</p><p>由于篇幅问题，还有一些功能就暂时不介绍了，等以后用到的时候会说哈，比如断点调试之类的，到时记得时刻关注哦！</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684afffd7e0a365?w=800&amp;h=391&amp;f=jpeg&amp;s=35848" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学会如何抓包，是爬虫的必备技能，甚至可以说，不会抓包就等同于不会爬虫。&lt;/p&gt;
&lt;p&gt;那我们怎样抓包呢？如果直接抓取浏览器上的内容，可以直接使用开发者工具进行抓包，但有个局限，只能抓浏览器的，功能也没有多少。还可以使用别的工具，比如 mitmproxy、charles，当然
      
    
    </summary>
    
      <category term="Fiddler" scheme="http://sergiojune.com/categories/Fiddler/"/>
    
    
      <category term="抓包" scheme="http://sergiojune.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>使用单链表进行冒泡排序</title>
    <link href="http://sergiojune.com/2019/01/14/%E4%BD%BF%E7%94%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://sergiojune.com/2019/01/14/使用单链表进行冒泡排序/</id>
    <published>2019-01-14T07:43:14.140Z</published>
    <updated>2018-10-09T12:18:24.252Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是冒泡排序"><a href="#1-什么是冒泡排序" class="headerlink" title="1.什么是冒泡排序"></a>1.什么是冒泡排序</h4><p><br><br>下面这个是百度百科的解释：</p><blockquote><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。<br>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素已经排序完成。<br>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p></blockquote><p>按我的理解就是将相邻的两个元素进行比较，不符合要求的就进行交换位置，交换之后就继续进行下一个的元素的比较，比较一圈之后，最大或者最小的元素就会出现在末端。<br><img src="http://oz39yfeyy.bkt.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="冒泡排序"></p><p>由上图就可以看出，每每相邻就比较，就像一个个泡泡冒起来，我就是这样理解冒泡排序的。</p><h4 id="2-链表的冒泡排序思路"><a href="#2-链表的冒泡排序思路" class="headerlink" title="2.链表的冒泡排序思路"></a>2.链表的冒泡排序思路</h4><p><br></p><h5 id="1-先讨论下不加虚拟头的情况"><a href="#1-先讨论下不加虚拟头的情况" class="headerlink" title="1)先讨论下不加虚拟头的情况"></a>1)先讨论下不加虚拟头的情况</h5><p>在不加虚拟头时候，我们就需要单独讨论当前节点是不是在链表头部，如果是头部的时候，就需要单独创建一个节点来暂时保存头节点，然后就进行交换<br><img src="http://oz39yfeyy.bkt.clouddn.com/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F%E6%97%A0%E8%99%9A%E6%8B%9F%E5%A4%B4.png" alt="无虚拟头交换第一步"></p><p>在交换之后，这时就可以创建两个引用，分别指向头节点和头节点的下一个节点。</p><p>然后通过使用该两个节点的下一个节点就行比较，上面的这两个引用只是为了方便比较和记录。</p><p><img src="http://oz39yfeyy.bkt.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%9C%89%E8%99%9A%E6%8B%9F%E5%A4%B4.png" alt="去掉头节点后"></p><p>前面的两个节点在第一次进行比较时，符合位置要求，所以向下移一个位置，第二次比较时就需要进行交换位置了，如上图所示，步骤就不多说了，上面都有。</p><p>交换位置记得顺序不能改变，变了就会造成引用混乱。</p><p>在交换后这时两个节点也可以在上图看出，所以我们只需要移动当前节点即可(currentNode)，然后进行下一次比较。</p><h4 id="2）接着说带虚拟头的"><a href="#2）接着说带虚拟头的" class="headerlink" title="2）接着说带虚拟头的"></a>2）接着说带虚拟头的</h4><p>如果带了虚拟头了，就比上面少了一步，因为不需要进行判断头节点了，这个时候头节点变成了虚拟的，不需要管的了，步骤就和上面的第二步一样。</p><h5 id="比较完了，那什么时候停止呢"><a href="#比较完了，那什么时候停止呢" class="headerlink" title="比较完了，那什么时候停止呢?"></a>比较完了，那什么时候停止呢?</h5><p>因为有时候无法轻易得出链表的长度，这时我引进了一个整型变量，负责记录一次冒泡排序后的交换次数，如果交换次数大于 0，说明链表还需要进行比较，反之就可以直接跳出循环了。</p><h4 id="3-代码展示"><a href="#3-代码展示" class="headerlink" title="3.代码展示"></a>3.代码展示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 链表的冒泡排序</span><br><span class="line">public Node sort(Node head)&#123;</span><br><span class="line">    // 链表没有元素或者只有一个元素</span><br><span class="line">    if(head == null || head.next == null)</span><br><span class="line">        return head;</span><br><span class="line"></span><br><span class="line">    // 创建一个虚拟头结点，便于节点交换，这样子就不需要单独考虑头结点</span><br><span class="line">    Node dummyHead = new Node(head, -1);</span><br><span class="line"></span><br><span class="line">    int num = 0;  // 记录交换次数</span><br><span class="line">    while( true)&#123;</span><br><span class="line">        // 用两个变量分别记录当前节点和下一节点</span><br><span class="line">        // 然后再用他们的下一节点进行比较</span><br><span class="line">        Node currentNode = dummyHead;</span><br><span class="line">        Node nextNode = dummyHead.next;</span><br><span class="line">        // 跳出条件为下一个节点不存在</span><br><span class="line">        while(nextNode.next != null)&#123;</span><br><span class="line">            // 需要进行交换</span><br><span class="line">            if(currentNode.next.data &gt; nextNode.next.data)&#123;</span><br><span class="line">                // 这个有点难说，需要自己画图</span><br><span class="line">                currentNode.next = nextNode.next;</span><br><span class="line">                nextNode.next = currentNode.next.next;</span><br><span class="line">                currentNode.next.next = nextNode;</span><br><span class="line">                currentNode = currentNode.next;</span><br><span class="line">                num ++;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                currentNode = currentNode.next;</span><br><span class="line">                nextNode = nextNode.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">        // 判断是否进行交换</span><br><span class="line">        if(num == 0)  // 等于 0 说明没有进行交换</span><br><span class="line">            break;</span><br><span class="line">        else</span><br><span class="line">            num = 0;  // 归 0 下次再进行交换</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-复杂度分析"><a href="#4-复杂度分析" class="headerlink" title="4. 复杂度分析"></a>4. 复杂度分析</h4><p><br></p><ul><li>时间复杂度 O(n^2)：假设最坏情况，比较到最后两个元素还需要进行交换位置，这时外圈循环就是 n - 1 次了，内层永远都是比较到最后一个元素，就是 n。所以时间复杂度为 O(n^2)。就是 n 的平方</li><li>空间复杂度 O(1)。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-什么是冒泡排序&quot;&gt;&lt;a href=&quot;#1-什么是冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;1.什么是冒泡排序&quot;&gt;&lt;/a&gt;1.什么是冒泡排序&lt;/h4&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;下面这个是百度百科的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单链表 冒泡排序" scheme="http://sergiojune.com/tags/%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>两栈共享空间的实现</title>
    <link href="http://sergiojune.com/2019/01/14/%E4%B8%A4%E6%A0%88%E5%85%B1%E4%BA%AB%E7%A9%BA%E9%97%B4%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://sergiojune.com/2019/01/14/两栈共享空间的实现/</id>
    <published>2019-01-14T07:43:14.137Z</published>
    <updated>2018-10-10T10:37:52.608Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-两栈共享存储空间"><a href="#1-两栈共享存储空间" class="headerlink" title="1. 两栈共享存储空间"></a>1. 两栈共享存储空间</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>使用两个栈来对相同类型的数据来进行存储，就是有个顶部和尾部。</p><p>若只是使用一个栈来使用的话，事先确定栈的容量是非常重要的，因为当容量小了，就需要不断扩大容量，或者容量大了，就会浪费一段存储空间，这都是很麻烦的。但是使用两个栈就可以做到最大限度地利用事先开辟的存储空间。</p><p>当两个栈需要操作相反的关系的时候就可以考虑这个，就比如总有人赚钱和赔钱，那就一边负责增加元素，另一边负责删除元素。</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>两栈可以理解为一个长度为 n 的线性表从任意位置切开成两段空间，这样子就会有数组的首尾端都是两个栈的栈底。</p><p>左边的栈为空的时候，就是栈顶为 -1(栈顶的元素位置)，右边的栈为空的时候就是栈顶元素为 n 的时候。</p><p>所以当左边栈满的时候，就是栈顶为 n-1，而右边栈为空就是栈顶为 n，而右边栈满的时候就是栈顶为 0，左边栈为空就是栈顶为 -1。所以当两个碰面的时候，也就是两个栈满的时候，就是两个栈顶的位置相差一的时候，即 leftTop + 1 = rightTop。</p><p>理解上面这个就好实现了，栈需要记录左右两边的栈顶的位置，所以栈的结构需要改变，需要有栈初始化两个栈的容量的总量，还必须声明左右两边栈顶的位置。 </p><h5 id="两个方法实现"><a href="#两个方法实现" class="headerlink" title="两个方法实现"></a>两个方法实现</h5><ol><li>push()：这个需要加入一个栈号参数来判断需要插入那个栈，同时插入时需要判断栈是否满</li><li>pop()：也需要加一个栈号参数来判断删除哪边栈的元素，删除时需要判断栈是否为空。</li></ol><h4 id="2-代码部分"><a href="#2-代码部分" class="headerlink" title="2.代码部分"></a>2.代码部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">// 两栈共享空间</span><br><span class="line">public class DoubleStack &#123;</span><br><span class="line">    int[] arr;</span><br><span class="line">    // 左右分别记录两个栈的的下一个元素需要插入的位置</span><br><span class="line">    int left;</span><br><span class="line">    int right;</span><br><span class="line">    int length;</span><br><span class="line"></span><br><span class="line">    public DoubleStack(int capacity)&#123;</span><br><span class="line">        arr = new int[capacity];</span><br><span class="line">        left = 0;</span><br><span class="line">        right = capacity - 1;</span><br><span class="line">        length = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DoubleStack()&#123;</span><br><span class="line">        this(10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isEmpty()&#123;</span><br><span class="line">        return length == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int length()&#123;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void push(int e, int stackSide)&#123;</span><br><span class="line">        if(left == right + 1)</span><br><span class="line">            throw new IllegalArgumentException(&quot;栈已满，入栈失败&quot;);</span><br><span class="line"></span><br><span class="line">        // 1 代表左边的栈， 2 代表右边的栈</span><br><span class="line">        if(stackSide == 1)&#123;</span><br><span class="line">            arr[left] = e;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (stackSide == 2)&#123;</span><br><span class="line">            arr[right] = e;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            throw new IllegalArgumentException(&quot;stackSide 错误&quot;);</span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int pop(int stackSide)&#123;</span><br><span class="line">        if(stackSide == 1)&#123;</span><br><span class="line">            if(left == 0)</span><br><span class="line">                throw new IllegalArgumentException(&quot;出栈失败，左栈为空&quot;);</span><br><span class="line">            int e = arr[left];</span><br><span class="line">            length --;</span><br><span class="line">            left --;</span><br><span class="line">            return e;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(stackSide == 2)&#123;</span><br><span class="line">            if(right == arr.length - 1)</span><br><span class="line">                throw new IllegalArgumentException(&quot;出栈失败，右栈为空&quot;);</span><br><span class="line">            int e = arr[right];</span><br><span class="line">            length --;</span><br><span class="line">            right ++;</span><br><span class="line">            return e;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            throw new IllegalArgumentException(&quot;出栈失败，栈不存在&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        res.append(String.format(&quot;capacith: %d, length: %d\n&quot;, arr.length, length()));</span><br><span class="line">        res.append(&quot;DoubleStack: left tail [&quot;);</span><br><span class="line">        for(int i = 0; i &lt; left; i++)&#123;</span><br><span class="line">            res.append(arr[i]);</span><br><span class="line">            if(i != left - 1)</span><br><span class="line">                res.append(&quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(&quot;] top  &quot;);</span><br><span class="line"></span><br><span class="line">        res.append(&quot;right top [&quot;);</span><br><span class="line">        for(int i = right + 1; i &lt; arr.length; i++)&#123;</span><br><span class="line">            res.append(arr[i]);</span><br><span class="line">            if(i != arr.length - 1)</span><br><span class="line">                res.append(&quot;, &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(&quot;] tail&quot;);</span><br><span class="line"></span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-两栈共享存储空间&quot;&gt;&lt;a href=&quot;#1-两栈共享存储空间&quot; class=&quot;headerlink&quot; title=&quot;1. 两栈共享存储空间&quot;&gt;&lt;/a&gt;1. 两栈共享存储空间&lt;/h4&gt;&lt;h5 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;header
      
    
    </summary>
    
      <category term="数据结构" scheme="http://sergiojune.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="http://sergiojune.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建的博客提交文章本地预览成功但github没有显示解决方法</title>
    <link href="http://sergiojune.com/2019/01/14/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E6%96%87%E7%AB%A0%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E6%88%90%E5%8A%9F%E4%BD%86github%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://sergiojune.com/2019/01/14/hexo搭建的博客提交文章本地预览成功但github没有显示解决方法/</id>
    <published>2019-01-14T07:43:14.135Z</published>
    <updated>2018-08-26T11:25:30.039Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><p>记录自己博客的一个坑！</p><p><br></p><p>前几天我写了文章，想发布在博客上，<strong>谁知道在提交上去，只可以在本地预览，却不可以在github上看到，</strong>而且github上也没有提交文章的记录。这个坑我百度了很久也没有找到，直到问到人，<strong>说需要升级git，然后升级了。</strong>果然，成功提交了！！！</p><p><br></p><p><br><a id="more"></a><br>升级git是直接在重新下载个git把原来的覆盖掉就可以了。</p><p><br></p><p>升级完成之后记得再提交一次，比如：</p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>hexo clean</p></li><li><p>hexo g</p></li><li><p>hexo d</p></li></ul><p>这样就可以了，如果还是不可以，可以选择清除下cookie及历史记录。</p><p><br></p><p><br></p><p>我完成了上面的之后，文章算是提交上去了，但是，我的主题没有了，<img src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803139675.png" title="1803139675.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803139675.png" alt=""></p><p>很悲催，没想到一坑还比一坑高，所以还是接着百度，看到了可能是我的<strong>github的仓库名字</strong>和我的hexo博客里的配置<strong>_config.yml</strong>​文件中的url名字不一样导致的<img src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803133008.png" title="1803133008.png" _src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803133008.png" alt=""></p><p><br></p><p>试了一下，果真是可以了。这个坑是前面那个坑乱改东西留下的，不过解决了，就好！！</p><p><br></p><p><br></p><p>生活不止眼前的bug，还有乐趣和斗志！</p><p><br></p><p><br></p><p><br></p><p><br></p></section>]]></content>
    
    <summary type="html">
    
      &lt;section class=&quot;96edit&quot; label=&quot;Powered by bj.96weixin.com&quot; style=&quot;font-size:16px;&quot;&gt;&lt;p&gt;记录自己博客的一个坑！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;前几天我写了文章，想发布在博客上，&lt;strong&gt;谁知道在提交上去，只可以在本地预览，却不可以在github上看到，&lt;/strong&gt;而且github上也没有提交文章的记录。这个坑我百度了很久也没有找到，直到问到人，&lt;strong&gt;说需要升级git，然后升级了。&lt;/strong&gt;果然，成功提交了！！！&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://sergiojune.com/categories/blog/"/>
    
    
      <category term="坑" scheme="http://sergiojune.com/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高第一天总结</title>
    <link href="http://sergiojune.com/2019/01/14/c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%98%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%80%BB%E7%BB%93/"/>
    <id>http://sergiojune.com/2019/01/14/c语言提高第一天总结/</id>
    <published>2019-01-14T07:43:14.131Z</published>
    <updated>2018-09-28T16:32:22.224Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>c语言中的数组作为形参时编译器都会把它当成指针处理，所以在对数组进行操作的时候，通常还需要再加个一个形参，那就是<strong>数组长度</strong>，因为数组的结束没有标志，需要程序员自己进行判断。<br><br></p><a id="more"></a><p>2.引入数据类型是为了更容易地表达现实生活中的人和事，<strong>数据类型本质就是固定大小的一段内存空间</strong>，常见的数据类型的所占字节大小如下：</p><ul><li>int: 4 字节</li><li>char: 1 字节</li><li>float: 4 字节</li><li>double: 8字节</li><li>long: 4 字节</li><li>指针: 4 字节<br><br></li></ul></li><li><p>当有一个数组 <strong>b</strong>，打印 <strong>b+1</strong> 和 <strong>&amp;b+1</strong> 是不同的，这是因为他们的数据类型不一样，前者代表的是这个数组的首个元素的地址，后者表达的是数组的最后一个元素的地址，所以 <strong>&amp;b</strong> 表达的是整块数组的地址<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># include &lt;stdio.h&gt;</span><br><span class="line"># include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int b[] = &#123;1,2,5,3,8,9,4&#125;;</span><br><span class="line">printf(&quot;b = %d, b + 1 = %d, &amp;b = %d, &amp; b + 1 = %d\n&quot;, b, b+1, &amp;b, &amp;b+1);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结果是：</span><br><span class="line">b = 7338172, b + 1 = 7338176, &amp;b = 7338172, &amp; b + 1 = 7338200</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="4"><li>return 不是把内存块的字节 return 出来，而是把内存快的首地址返回。</li></ol><p><br></p><ol start="5"><li>判断栈是开口向上还是向下，利用栈后进先出的特性<strong>可以通过先后定义两个变量继而打印他们的地址来知道开口的方向，先存的变量的地址小就说明开口是向上的，反之就是向下的</strong>，有一个需要注意的 是，存放数组时，他的每一个元素的地址都是递增，也就是说都是开口向上的，这个说明不了栈的开口！<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># include&lt;stdio.h&gt;</span><br><span class="line"># include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">// 两个变量先后被压进栈，通过判断地址可以判断栈的开口</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line">printf(&quot;&amp;a=%d, &amp;b=%d\n&quot;, &amp;a, &amp;b);  // 通过debug方式编译是开口向下的，通过release编译则是向下的</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&amp;a=13630336, &amp;b=13630340  // 可以看到开口是向上的</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="6"><li><p>函数调用模型： 一般都是先将该函数的地址压入栈，然后就是将其参数压入栈，接着才是将其代码压入栈，如果该函数调用了别的函数，执行到了，就会将该函数的运行状态压入栈，然后再将被调用的函数地址压入栈，接着重复上述过程。<br><br></p></li><li><p>c语言中，内存区一般分为四个区，分别是：</p><ul><li>栈：存放的是局部变量，程序运行结束之后就会被操作系统自动释放</li><li>堆： 存放的是动态创建的变量，不能自动释放，需要程序员手动释放</li><li>全局区： 又名静态区，存放的是全局变量以及静态变量，还存放一些常量，比如字符串常量和其他常量，该区域还是等待程序结束后操作系统释放内存，但和栈不同的是，<strong>他里的所被分配的内存可以被之前的函数给调用</strong>。</li><li>代码区： 存放我们所写的代码。</li></ul></li></ol><p><br></p><p>第一天就这么多啦，每天进步一点点就足够！<br><br><br>今天还学到一个鼓励自己的方法： <strong>每当自己学不进去的时候，就去知乎看看，你会发现，原来你自己什么都不会！毕竟知乎里的都是大牛。然后你就会马上滚回来学习了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;c语言中的数组作为形参时编译器都会把它当成指针处理，所以在对数组进行操作的时候，通常还需要再加个一个形参，那就是&lt;strong&gt;数组长度&lt;/strong&gt;，因为数组的结束没有标志，需要程序员自己进行判断。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="http://sergiojune.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="c" scheme="http://sergiojune.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>谈谈今晚以及在跑步时的一些随想</title>
    <link href="http://sergiojune.com/2018/05/24/%E8%B0%88%E8%B0%88%E4%BB%8A%E6%99%9A%E4%BB%A5%E5%8F%8A%E5%9C%A8%E8%B7%91%E6%AD%A5%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%8F%E6%83%B3/"/>
    <id>http://sergiojune.com/2018/05/24/谈谈今晚以及在跑步时的一些随想/</id>
    <published>2018-05-24T14:11:38.000Z</published>
    <updated>2018-08-06T08:53:50.843Z</updated>
    
    <content type="html"><![CDATA[<p>今天可以算是我的第一次在讲台上分享我的技术，准备了两天左右吧，其实也没那么长，就是做了个ppt而已，由于第一次做，有很多地方都没有做好，比如字体太小了，背景和字体颜色混合了导致看不清字等等此类的问题。如果下次再做的话一定要做得好一点。<br>还有就是我的分享有点垃圾哈，讲的内容自我感觉不是很好，也不知道需要讲什么地方，以后还是多观察下别人怎么分享吧。<br>这次需要表扬自己的是上讲台讲台没有预料中的那么紧张，虽然讲话不是很自如，不过也比以前好多了，希望下次能更进一步吧！加油！</p><h4 id="说说跑步的感想！"><a href="#说说跑步的感想！" class="headerlink" title="说说跑步的感想！"></a>说说跑步的感想！</h4><p>这两星期我经常跑步，跑完步还会做50个俯卧撑，虽然不太标准，不过也好过没有做吧。在跑步时会跑多几圈就会很累，就想放弃，不过我最后还是咬牙就挺着过去了。这两天跑步呢，我就想，追逐梦想就和跑步一样吧。就比如我把梦想都分成很多个小目标，跑步的圈数或者步数就是这些小小的目标。在刚开始的时候，你跑步会很顺利，小目标也是这样子，刚开始的小目标也是很容易就可以实现的。可是当你跑步的步数多了，也就是小目标实现多了，之后的每一步或每一个小目标都会显得举步维艰，这时候就需要你自己的意志力去支持着自己继续跑下去。所以说梦想也需要用自己的一生去实现，后面可能会越来越难，可你每实现的一个小目标都会把很多人甩在身后面，这些人就相当于你在跑步过程中的路人。</p><h4 id="人生是一场永无止尽的跑步！"><a href="#人生是一场永无止尽的跑步！" class="headerlink" title="人生是一场永无止尽的跑步！"></a>人生是一场永无止尽的跑步！</h4><p>还有这几天会经常不知道干嘛，然而还有很多事情没做，先把这些事列下来吧！<br>线性代数课程补上</p><ul><li>离散数学课程及作业补上</li><li>高等数学课程补上</li><li>scrapy的学习</li><li>马蜂窝网站的全站抓取</li><li>淘宝商品抓取</li><li>亚马逊模拟登陆</li><li>爬虫面试题</li><li>看 图解http</li><li>看 网络是怎样连接</li><li>了解下各种排序</li></ul><p>不列出来都不知道有这么多事情没做，以后觉得没事的时候可以找这些事情做了。</p><p>写完，睡觉！晚安！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天可以算是我的第一次在讲台上分享我的技术，准备了两天左右吧，其实也没那么长，就是做了个ppt而已，由于第一次做，有很多地方都没有做好，比如字体太小了，背景和字体颜色混合了导致看不清字等等此类的问题。如果下次再做的话一定要做得好一点。&lt;br&gt;还有就是我的分享有点垃圾哈，讲的
      
    
    </summary>
    
      <category term="个人随想" scheme="http://sergiojune.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>python爬虫常用库之urllib详解</title>
    <link href="http://sergiojune.com/2018/03/12/python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B9%8Burllib%E8%AF%A6%E8%A7%A3/"/>
    <id>http://sergiojune.com/2018/03/12/python爬虫常用库之urllib详解/</id>
    <published>2018-03-11T16:00:19.000Z</published>
    <updated>2019-01-14T08:15:11.738Z</updated>
    
    <content type="html"><![CDATA[<section class="96edit" label="Powered by bj.96weixin.com" style="font-size:16px;"><p><strong>以下为个人在学习过程中做的笔记总结之爬虫常用库urllib</strong></p><p><br></p><p>urlib库为python3的HTTP内置请求库</p><p><br></p><p>urilib的四个模块：</p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>urllib.request:用于获取网页的响应内容</p></li><li><p>urllib.error:异常处理模块，用于处理异常的模块</p></li><li><p>urllib.parse:用于解析url</p></li><li><p>urllib.robotparse:用于解析robots.txt，主要用于看哪些网站不能进行爬取，不过少用</p></li></ul><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">1</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">urllib.request</span></section></section></section><p><br></p><p>urllib.request.urlopen(url,data=None,[timeout,]<em>,cafile=None,cadefault=False,context=None)<br></em></p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>url:为请求网址</p></li><li><p>data:请求时需要发送的参数</p></li><li><p>timeout:超时设置，在该时间范围内返回请求内容就不会报错</p></li></ul><p><br></p><p>示例代码：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> urllib <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> request<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 2</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 3</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 请求获取网页返回内容</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 4</span>response = request.urlopen(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 5</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取网页返回内容</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 6</span>print(response.read().decode(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 7</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取状态码</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 8</span>print(response.status)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 9</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取请求头</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">10</span>print(response.getheaders())<br></code></pre></section><p><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 对请求头进行遍历</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> k, v <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> response.getheaders():<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span> print(k, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘=’</span>, v)<br></code></pre></section><p><br></p><p><br></p><p>可以使用上面的代码对一些网站进行请求了，但是当需要一些反爬网站时，这就不行了，这时我们需要适当地增加请求头进行请求，这时就需要使用复杂一点的代码了，这时我们需要用到<strong>Request</strong>对象</p><p><br></p><p>代码示例：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 请求头</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span>headers = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘User-Agent’</span>:<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0’</span>}<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>requests = request.Request(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, headers=headers) <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 加入自己的请求头更加接近浏览器</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 进行请求,把Request对象传入urlopen参数中</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>response = request.urlopen(requests)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span>print(response.read().decode(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>))<br></code></pre></section><p>这个我添加了请求头进行请求，使我发送的请求更加接近浏览器的行为。可以对应一些反爬网站了</p><p><br></p><p>如果网站需要进行登陆，这时需要用到post方法，用上面的也是可以的。代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> urllib <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> request, parse<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 使用post方法来进行模拟登陆豆瓣</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 3</span>data = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘source’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘None’</span>,<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 4</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘redir’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://www.douban.com/&#39;" target="_blank" rel="noopener">https://www.douban.com/&#39;</a></span>,<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 5</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘form_email’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘user’</span>,<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 6</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘form_password’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘passwd’</span>,<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 7</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘remember’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘on’</span>,<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 8</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘login’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘登录’</span>}<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 9</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 将data的字典类型转换为get请求方式</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">10</span>data = bytes(parse.urlencode(data), encoding=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">11</span>requests = request.Request(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://accounts.douban.com/login&#39;" target="_blank" rel="noopener">https://accounts.douban.com/login&#39;</a></span>, headers=headers, data=data, method=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘POST’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">12</span>response = request.urlopen(requests)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">13</span>print(response.read().decode(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘utf-8’</span>))</code></pre></section><p>这里我用到了<strong>data</strong>的参数把登陆需要的参数传进去，还加了个请求方法<strong>Method</strong></p><p><br></p><p><strong>parse.urlencode()</strong>后面有讲</p><p><br></p><p>这里还有另外一种添加请求头的方法<br></p><p><strong>Request.add_header():</strong> 参数有两个，分别为请求头对应的键和值，这种方法一次只能添加一个请求头，添加多个需要用到循环或者直接用前面的方法添加多个请求头</p><p><br></p><p>在登陆了网站之后，我们需要用到cookie来保存登陆信息，这时就需要获取cookie了。urllib获取cookie比较麻烦。</p><p>代码示例如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> http <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> cookiejar<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取cookie</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 3</span>cookie = cookiejar.CookieJar()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取助手把cookie传进去</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 5</span>handler = request.HTTPCookieProcessor(cookie)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 6</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 获取opener进行请求网站</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 7</span>opener = request.build_opener(handler)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 8</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 请求网页</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 9</span>response = opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">10</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 打印cookie</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">11</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">for</span> c <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> cookie:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">12</span> print(c.name, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘=’</span>, c.value)<br></code></pre></section><p><br></p><p>单纯地打印没什么用，我们需要把他存入文件来保存，下次使用时再次加载cookie来登陆</p><p><br></p><p>保存cookie为文件：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> http <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> cookiejar<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 将cookie保存在文件中</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>filename = <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘cookie.txt’</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span>cookie = cookiejar.MozillaCookieJar(filename) # 表示使用Mozilla的cookie方式存储和读取<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>handler = request.HTTPCookieProcessor(cookie)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span>opener = request.build_opener(handler)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">7</span>opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">8</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 保存文件</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">9</span>cookie.save(ignore_discard=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>, ignore_expires=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>)<br></code></pre></section><p><br></p><p>另一种保存方法：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> http <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> cookiejar<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span>cookie = cookiejar.LWPCookieJar(filename) # 表示 Set-Cookie3 文件格式存储和读取<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>handler = request.HTTPCookieProcessor(cookie)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span>opener = request.build_opener(handler)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 保存文件</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">7</span>cookie.save(ignore_discard=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>, ignore_expires=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>)<br></code></pre></section><p><br></p><p><strong>这两种保存格式都是不一样的，需要保存的内容一样。</strong></p><p><br></p><p>保存可以了，这时就需要用到加载了，当然也可以。代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> http <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> cookiejar<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 从cookie文件加载到网页上实现记住登陆</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>cookie = cookiejar.LWPCookieJar()<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 加载文件</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>cookie.load(filename, ignore_discard=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>, ignore_expires=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">True</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span>handler = request.HTTPCookieProcessor(cookie)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">7</span>opener = request.build_opener(handler)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">8</span>opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>)<br></code></pre></section><p>这样就可以实现不用密码进行登陆了。</p><p><br></p><p>cookie小总结：在操作cookie时，都是分五步，如下：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal; margin: 0px; padding: 0px 0px 0px 30px;"><li><p>进行导包，至关重要的一步，不导包直接出错。</p></li><li><p>获取cookie处理对象，使用cookiejar包</p></li><li><p>创建cookie处理器，使用request.HTTPCookieJarProcessor()</p></li><li><p>利用cookie处理器构建opener，使用request.build_opener()</p></li><li><p><strong>进行请求网站，用opener.open(),这个不能用request.urlopen()</strong><br></p></li></ol><p><br></p><p>如果有时你在同一ip连续多次发送请求，会有被封ip的可能，这时我们还需要用到代理ip进行爬取，代码如下：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span>proxy = request.ProxyHandler({<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘https’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://106.60.34.111:80&#39;" target="_blank" rel="noopener">https://106.60.34.111:80&#39;</a></span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>})<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span>opener = request.build_opener(proxy)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, timeout=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>)<br></code></pre></section><p>可以看到越复杂的请求都需要用到request.build_opener(),这个方法有点重要，请记住哈</p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">2</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">urllib.error</span></section></section></section><p><br></p><p>将上面的使用代理ip的请求进行异常处理，如下：<br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> urllib <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> request, error<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 2</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">try</span>:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 3</span> proxy = request.ProxyHandler({<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 4</span> <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘https’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://106.60.34.111:80&#39;" target="_blank" rel="noopener">https://106.60.34.111:80&#39;</a></span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 5</span> })<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 6</span> opener = request.build_opener(proxy)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 7</span> opener.open(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, timeout=<span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">1</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 8</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> error.HTTPError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;"> 9</span> print(e.reason(), e.code(), e.headers())<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">10</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">except</span> error.URLError <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">as</span> e:<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">11</span> print(e.reason)<br></code></pre></section><p>因为有时这个ip或许也被封了，有可能会抛出异常，所以我们为了让程序运行下去进而进行捕捉程序</p><p><br></p><ul class=" list-paddingleft-2" style="list-style-type: disc; margin: 0px; padding: 0px 0px 0px 30px;"><li><p><span style="white-space: pre-wrap;">error.URLError: 这个是url的一些问题，这个异常只有一个<strong>reason属性</strong></span><br></p></li><li><p><span style="white-space: pre-wrap;">error.HTTPError:这个是error.URLError的子类，所以在与上面的混合使用时需要将这个异常放到前面，这个异常是一些请求错误，有三个方法，<strong>.reason(), .code(), .headers()</strong>,所以在捕捉异常时通常先使用这个</span></p></li></ul><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">3</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">urllib.parse</span></section></section></section><p><br></p><p>解析url:urllib.parse.urlparse(url, scheme=’’, allow_fragments=True)</p><p><br></p><p>简单的使用：</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> urllib <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> request, parse<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 解析url</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>print(parse.urlparse(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span>print(parse.urlparse(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, scheme=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span>print(parse.urlparse(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘movie.douban.com/‘</span>, scheme=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">7</span>ParseResult(scheme=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘https’</span>, netloc=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘movie.douban.com’</span>, path=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘/‘</span>, params=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, query=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, fragment=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">8</span>ParseResult(scheme=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘https’</span>, netloc=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘movie.douban.com’</span>, path=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘/‘</span>, params=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, query=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, fragment=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">9</span>ParseResult(scheme=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http’</span>, netloc=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, path=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘movie.douban.com/‘</span>, params=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, query=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>, fragment=<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘’</span>)<br></code></pre></section><p>可以看出加了scheme参数和没加的返回结果是有区别的。而当scheme协议加了，而前面的url也包含协议，一般会忽略后面的scheme参数</p><p><br></p><p>既然后解析url，那当然也有反解析url，就是把元素串连成一个url</p><p><br></p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">from</span> urllib <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">import</span> parse<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 将列表元素拼接成url</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>url = [<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘http’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘www’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘baidu’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘com’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘dfdf’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘eddffa’</span>] <span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 这里至少需要6个元素（我乱写的，请忽视）</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span>print(parse.urlunparse(url))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span><a href="http://www/baidu;com?dfdf" target="_blank" rel="noopener">http://www/baidu;com?dfdf</a><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;">#eddffa</span><br></code></pre></section><p>urlparse()接收一个列表的参数，而且列表的长度是有要求的，是必须六个参数以上，要不会抛出异常</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span>Traceback (most recent call last):<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span> File <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“E:/anaconda/python_project/python3_spider/urllib_test.py”</span>, line <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">107</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> &lt;module&gt;<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span> print(parse.urlunparse(url))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span> File <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">“E:\anaconda\lib\urllib\parse.py”</span>, line <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">454</span>, <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">in</span> urlunparse<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span> _coerce_args(components))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span>ValueError: <span class="hljs-keyword" style="font-size: inherit; line-height: inherit; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">not</span> enough values to unpack (expected <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">7</span>, got <span class="hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;">6</span>)<br></code></pre></section><p><br></p><p>urllib.parse.urljoin():这个是将第二个参数的url缺少的部分用第一个参数的url补齐</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 连接两个参数的url, 将第二个参数中缺的部分用第一个参数的补齐</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span>print(parse.urljoin(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘index’</span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>print(parse.urljoin(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://movie.douban.com/&#39;" target="_blank" rel="noopener">https://movie.douban.com/&#39;</a></span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://accounts.douban.com/login&#39;" target="_blank" rel="noopener">https://accounts.douban.com/login&#39;</a></span>))<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span><a href="https://movie.douban.com/index" target="_blank" rel="noopener">https://movie.douban.com/index</a><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">6</span><a href="https://accounts.douban.com/login" target="_blank" rel="noopener">https://accounts.douban.com/login</a><br></code></pre></section><p><br></p><p><br></p><p>urllib.parse.urlencode():这个方法是将字典类型的参数转为请求为get方式的字符串</p><section class="output_wrapper" id="output_wrapper_id" style="color: rgb(62, 62, 62); line-height: 1.6; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><pre style="font-size: inherit; color: inherit; line-height: inherit; margin-top: 0px; margin-bottom: 0px; padding: 0px;"><code class="python language-python hljs" style="margin-right: 2px; margin-left: 2px; line-height: 18px; font-size: 14px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); padding: 0.5em; display: block !important; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important;"><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">1</span>data = {<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘name’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘sergiojuue’</span>, <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘sex’</span>: <span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘boy’</span>}<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">2</span>data = parse.urlencode(data)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">3</span>print(<span class="hljs-string" style="font-size: inherit; line-height: inherit; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">‘<a href="https://accounts.douban.com/login&#39;" target="_blank" rel="noopener">https://accounts.douban.com/login&#39;</a></span>+data)<br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">4</span><span class="hljs-comment" style="font-size: inherit; line-height: inherit; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;"># 下面是结果</span><br><span class="linenum hljs-number" style="font-size: inherit; line-height: inherit; color: rgb(174, 135, 250); padding-right: 20px; word-wrap: inherit !important; word-break: inherit !important;">5</span><a href="https://accounts.douban.com/loginname=sergiojuue&amp;sex=boy" target="_blank" rel="noopener">https://accounts.douban.com/loginname=sergiojuue&amp;sex=boy</a><br></code></pre></section><p><br></p><p><br></p><section class="editor"><section style="margin: 10px auto; padding: 2px; box-sizing: border-box;"><section style="width: 60px;height: 40px;text-align: center;font-size: 2em;color: rgb(255, 255, 255);float: left;line-height: 40px;background: linear-gradient(-45deg, transparent 14.14px, rgb(139,183,72) 0px) right bottom / 50% 50% no-repeat, linear-gradient(45deg, transparent 14.14px, rgb(139,183,72) 0px) left bottom / 50% 50% no-repeat, linear-gradient(135deg, transparent 14.14px, rgb(139,183,72) 0px) left top / 50% 50% no-repeat, linear-gradient(-135deg, transparent 14.14px, rgb(139,183,72) 0px) right top / 50% 50% no-repeat;"><section class="autonum">4</section></section><section style="word-wrap: break-word; border-bottom: 2px dashed rgb(128, 177, 53); min-height: 36px; display: inline-block; line-height: 36px; margin-top: 0px; margin-left: 10px; box-sizing: border-box;"><span style="color: #80B135; font-size: 18px; margin-top: 0px; display: inline-block;">结语</span></section></section></section><p>还有个urllib.robotparse库少用，就不说了，留给以后需要再去查文档吧。</p><p>上面的只是我在学习过程中的总结，如果有什么错误的话，欢迎在留言区指出，还有就是需要查看更多用法的请查看文档<a href="https://docs.python.org/3/library/urllib.html" _src="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.html</a></p><p><br></p><p>需要代码的可以去我的github上面fork，给个star也行！</p><p>github:<a href="https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/urllib_test.py" target="_blank" rel="noopener">https://github.com/SergioJune/gongzhonghao_code/blob/master/python3_spider/urllib_test.py</a> </p><p><br></p><p>学习过程中看的大多是崔庆才大佬的视屏：<a href="https://edu.hellobi.com/course/157" _src="https://edu.hellobi.com/course/157" target="_blank" rel="noopener">https://edu.hellobi.com/course/157</a></p><p><br></p><p><br></p><p><br></p><p><br></p><p style="text-align: center;"><img style="border-radius: 5px; border: 1px dashed rgb(168, 164, 171); box-shadow: rgba(0, 0, 0, 0.33) 6px 6px 5px 0px; margin-bottom: 1.4px; visibility: visible !important; width: 111.297px !important;" src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803114089.png" height="auto" border="0" alt="undefined" _src="http://pic.96weixin.com/upload/image2/vip/881679/1803/1803114089.png" title="1803114089.png"><br></p><p style="text-align: center;"><br></p><p style="text-align: center;"><span style="font-size: 14px;">日常学python</span></p><p style="text-align: center;"><span style="font-size: 14px;">一个专注于python的公众号</span></p></section>]]></content>
    
    <summary type="html">
    
      以下为个人在学习过程中做的笔记总结之爬虫常用库urllib
    
    </summary>
    
      <category term="python" scheme="http://sergiojune.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://sergiojune.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="http://sergiojune.com/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://sergiojune.com/2017/12/31/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://sergiojune.com/2017/12/31/2017年终总结/</id>
    <published>2017-12-31T14:11:38.000Z</published>
    <updated>2018-08-06T08:53:50.818Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2017的最后一天了，对于2017，是我至今为止最重要的一年，在这一年中经历了人生的第一场高考，很高兴，这也是最后一场。而在下半年，我也进入了大学，虽然大学不是理想中的大学，但是我也很高兴，因为终于可以不再像高中那样了，在这里我可以学习我想要学的东西！</p><h1 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h1><p>那时我还在准备高考，每天沉迷于题海之中，那段在一中的时间，是我高中过得最充实的时间，每天早上六点起床，晚上奋斗到差不多一点才睡。<br>但是高三一年的勤奋拉近不了我在高中挥霍了两年的时间所带来的与别人的距离，所以在每次模拟试下来之后都在想，为啥前两年不学多一点呢？这样子在高三就不会这么辛苦，也就不会有这么大的坑让给高三的一年来填。但是我也不会后悔，因为在那两年里，我学会了踢球，懂得了人生有太多的意外，比如我在高二那年的足球班赛，我也认识了一大堆志同道合的人。所以说，对自己走过的路不曾后悔。<br>在这半年，我度过了第一个百日誓师，还记得那天康亚华校长的谈话，还记得我们跑步的激情，还记得那天之后对未来的憧憬。。。</p><pre><code>百日誓师，壮观！！！</code></pre><p><img src="http://oz39yfeyy.bkt.clouddn.com/mmexport1514702564565.jpg" alt="百日誓师"></p><pre><code>下面是我们班在百日誓师的照片</code></pre><p><img src="http://oz39yfeyy.bkt.clouddn.com/null-6ef188b3db149be1.jpg" alt="高三十四班"></p><p>最后放张我们学校的照片吧，离开后才发现学校是真的美！<br><img src="http://oz39yfeyy.bkt.clouddn.com/null-2e688bf1463c76c7.jpg" alt="吴川一中"><br><strong> 最后六月份，走上了考场，离开了学校，最终的结果也对得起我在高三奋斗的一年！ </strong></p><h1 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h1><p>下半年我走进了大学，大学虽然没有想象的大和好，但这始终会是我在余下四年继续坚持我奋斗的地方，所以我也爱上了这个地方。<br><strong> 看！ </strong><br><img src="http://oz39yfeyy.bkt.clouddn.com/mmexport1511785817443.jpg" alt="我的大学"><br><img src="http://oz39yfeyy.bkt.clouddn.com/mmexport1511785833297.jpg" alt="我的大学"><br>我的大学还是很美的。<br>还有我的班，每个都很帅很漂亮，有木有！！！<br><img src="http://oz39yfeyy.bkt.clouddn.com/mmexport1510329287628.jpg" alt="软件工程4班"><br><img src="http://oz39yfeyy.bkt.clouddn.com/IMG_20170921_202907.jpg.JPG" alt="软件工程4班"><br>在这大学半年里，我学了很多编程知识，比如c语言，python，html+css+javascript和java，学了这么多，都是因为去尝试吧，因为我暂时不知道我要往哪个方向发展，现在我知道了，我准备往爬虫，分析大数据方向，或许还有人工智能，还有就是以python为主的前端<br>在学了这么多，自己模仿了两个网页，也做了一个简单的查看新闻app，总之还没有深入，准备下一年深入学习。<br>不过在学习学校的课程是失败的，很多课都没有认真学习，英语也没有学好，觉得蛮遗憾的，浪费了这么多时间。<br>还有，我也根据了网上的教程自己搭建了一个属于自己的博客，也挺不错的。<br>而在自己博客定的小目标也没有完成多少，可能要完成的东西太多了，所以也没有完成，下一次就知道应该定多少了，嘻嘻！<br>我在最后的一个月还参加了一个打卡活动，里面的早起和坚持锻炼我基本上算是坚持下来了，算是比较欣慰了。</p><p><strong><em> 引用知识星球人里一段话 </em></strong></p><blockquote><p>人生那么长，做着枯燥而无意义的工作，每时每刻都是煎熬。  人生那么短，如果每一步成长都是令人激动的，那你一定不会说:”后悔”。</p></blockquote><blockquote><p>尝试，不断试错，不断碰壁，不断重来，你会发现人生有那么多的可能。会发现世界上有那么美丽的事情让我们满心欢喜。</p></blockquote><blockquote><p>献给现在迷茫，未来成功的你。</p></blockquote><h3 id="不忘初心，方得始终。"><a href="#不忘初心，方得始终。" class="headerlink" title="不忘初心，方得始终。"></a>不忘初心，方得始终。</h3><h3 id="2018，我来了！！！"><a href="#2018，我来了！！！" class="headerlink" title="2018，我来了！！！"></a>2018，我来了！！！</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是2017的最后一天了，对于2017，是我至今为止最重要的一年，在这一年中经历了人生的第一场高考，很高兴，这也是最后一场。而在下半年，我也进入了大学，虽然大学不是理想中的大学，但是我也很高兴，因为终于可以不再像高中那样了，在这里我可以学习我想要学的东西！&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
      <category term="总结" scheme="http://sergiojune.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="hard" scheme="http://sergiojune.com/tags/hard/"/>
    
  </entry>
  
</feed>
